/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DevicesAssignDeviceZpaAssignmentRequest } from '../models';
// @ts-ignore
import { DevicesChangeDeviceAssociationRequest } from '../models';
// @ts-ignore
import { DevicesCreateNewDeviceRequest } from '../models';
// @ts-ignore
import { DevicesGetDetailResponse } from '../models';
// @ts-ignore
import { DevicesGetZpaVersionInfoResponse } from '../models';
// @ts-ignore
import { DevicesListResponse } from '../models';
// @ts-ignore
import { DevicesListZdmGroupInfoResponse } from '../models';
// @ts-ignore
import { DevicesUpdateDeviceNameRequest } from '../models';
// @ts-ignore
import { DevicesUpgradeZpaOsAppRequest } from '../models';
// @ts-ignore
import { DevicesUpgradeZpaOsAppRequestData } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Assign a device to a user or commonarea
         * @param {DevicesAssignDeviceZpaAssignmentRequest} [devicesAssignDeviceZpaAssignmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignDeviceZpaAssignment: async (devicesAssignDeviceZpaAssignmentRequest?: DevicesAssignDeviceZpaAssignmentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/zpa/assignment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: devicesAssignDeviceZpaAssignmentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/zpa/assignment',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(devicesAssignDeviceZpaAssignmentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Change device association
         * @param {string} deviceId Unique identifier of the device.
         * @param {DevicesChangeDeviceAssociationRequest} [devicesChangeDeviceAssociationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDeviceAssociation: async (deviceId: string, devicesChangeDeviceAssociationRequest?: DevicesChangeDeviceAssociationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('changeDeviceAssociation', 'deviceId', deviceId)
            const localVarPath = `/devices/{deviceId}/assignment`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: devicesChangeDeviceAssociationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/{deviceId}/assignment',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(devicesChangeDeviceAssociationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new device to Zoom account.   **Scope:** `device:write:admin`       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add a new device
         * @param {DevicesCreateNewDeviceRequest} [devicesCreateNewDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDevice: async (devicesCreateNewDeviceRequest?: DevicesCreateNewDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: devicesCreateNewDeviceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(devicesCreateNewDeviceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a device\'s details.  **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get device detail
         * @param {string} deviceId The device\&#39;s unique identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDetail', 'deviceId', deviceId)
            const localVarPath = `/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:read:admin", "device:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/{deviceId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get ZPA version info
         * @param {string} zdmGroupId The Zoom Device Management (ZDM) group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZpaVersionInfo: async (zdmGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'zdmGroupId' is not null or undefined
            assertParamExists('getZpaVersionInfo', 'zdmGroupId', zdmGroupId)
            const localVarPath = `/devices/zpa/zdm_groups/{zdmGroupId}/versions`
                .replace(`{${"zdmGroupId"}}`, encodeURIComponent(String(zdmGroupId !== undefined ? zdmGroupId : `-zdmGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/zpa/zdm_groups/{zdmGroupId}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API lets you list devices.     **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary List devices
         * @param {string} [searchText] Filter devices by name or serial number.
         * @param {'win' | 'mac' | 'ipad' | 'iphone' | 'android' | 'linux'} [platformOs] Filter devices by platform operating system.
         * @param {boolean} [isEnrolledInZdm] Filter devices by enrollment of ZDM (Zoom Device Management).
         * @param {-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6} [deviceType] Filter devices by device type.     Device Type:    &#x60;-1&#x60; - All Zoom Room device(0,1,2,3,4,6).    &#x60;0&#x60; - Zoom Rooms Computer.    &#x60;1&#x60; - Zoom Rooms Controller.    &#x60;2&#x60; - Zoom Rooms Scheduling Display.    &#x60;3&#x60; - Zoom Rooms Control System.    &#x60;4&#x60; -  Zoom Rooms Whiteboard.    &#x60;5&#x60; - Zoom Phone Appliance.    &#x60;6&#x60; - Zoom Rooms Computer (with Controller).
         * @param {string} [deviceVendor] Filter devices by vendor.
         * @param {string} [deviceModel] Filter devices by model.
         * @param {-1 | 0 | 1} [deviceStatus] Filter devices by status.      Device Status:    &#x60;0&#x60; - offline.    &#x60;1&#x60; - online.    &#x60;-1&#x60; - unlink
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (searchText?: string, platformOs?: 'win' | 'mac' | 'ipad' | 'iphone' | 'android' | 'linux', isEnrolledInZdm?: boolean, deviceType?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6, deviceVendor?: string, deviceModel?: string, deviceStatus?: -1 | 0 | 1, pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:read:admin", "device:write:admin"], configuration)
            if (searchText !== undefined) {
                localVarQueryParameter['search_text'] = searchText;
            }

            if (platformOs !== undefined) {
                localVarQueryParameter['platform_os'] = platformOs;
            }

            if (isEnrolledInZdm !== undefined) {
                localVarQueryParameter['is_enrolled_in_zdm'] = isEnrolledInZdm;
            }

            if (deviceType !== undefined) {
                localVarQueryParameter['device_type'] = deviceType;
            }

            if (deviceVendor !== undefined) {
                localVarQueryParameter['device_vendor'] = deviceVendor;
            }

            if (deviceModel !== undefined) {
                localVarQueryParameter['device_model'] = deviceModel;
            }

            if (deviceStatus !== undefined) {
                localVarQueryParameter['device_status'] = deviceStatus;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get zdm group info
         * @param {number} [pageSize] The total number of records returned from a single API call. Default - 30. Max -100.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period token is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listZdmGroupInfo: async (pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/groups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Delete device
         * @param {string} deviceId Unique identifier of the device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeviceZMD: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('removeDeviceZMD', 'deviceId', deviceId)
            const localVarPath = `/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/{deviceId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete ZPA device by vendor and mac address
         * @param {string} vendor The device\&#39;s manufacturer.
         * @param {string} macAddress The device\&#39;s mac address.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeZpaDeviceByVendorAndMacAddress: async (vendor: string, macAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendor' is not null or undefined
            assertParamExists('removeZpaDeviceByVendorAndMacAddress', 'vendor', vendor)
            // verify required parameter 'macAddress' is not null or undefined
            assertParamExists('removeZpaDeviceByVendorAndMacAddress', 'macAddress', macAddress)
            const localVarPath = `/devices/zpa/vendors/{vendor}/mac_addresses/{macAddress}`
                .replace(`{${"vendor"}}`, encodeURIComponent(String(vendor !== undefined ? vendor : `-vendor-`)))
                .replace(`{${"macAddress"}}`, encodeURIComponent(String(macAddress !== undefined ? macAddress : `-macAddress-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/zpa/vendors/{vendor}/mac_addresses/{macAddress}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Change device 
         * @param {string} deviceId Unique identifier of the device.
         * @param {DevicesUpdateDeviceNameRequest} [devicesUpdateDeviceNameRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceName: async (deviceId: string, devicesUpdateDeviceNameRequest?: DevicesUpdateDeviceNameRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDeviceName', 'deviceId', deviceId)
            const localVarPath = `/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: devicesUpdateDeviceNameRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/{deviceId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(devicesUpdateDeviceNameRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary upgrade zpa os/app
         * @param {DevicesUpgradeZpaOsAppRequest} [devicesUpgradeZpaOsAppRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeZpaOsApp: async (devicesUpgradeZpaOsAppRequest?: DevicesUpgradeZpaOsAppRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/devices/zpa/upgrade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["device:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: devicesUpgradeZpaOsAppRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/devices/zpa/upgrade',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(devicesUpgradeZpaOsAppRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Assign a device to a user or commonarea
         * @param {DevicesApiAssignDeviceZpaAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignDeviceZpaAssignment(requestParameters: DevicesApiAssignDeviceZpaAssignmentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const devicesAssignDeviceZpaAssignmentRequest: DevicesAssignDeviceZpaAssignmentRequest = {
                extension_number: requestParameters.extension_number,
                mac_address: requestParameters.mac_address,
                vendor: requestParameters.vendor
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignDeviceZpaAssignment(devicesAssignDeviceZpaAssignmentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Change device association
         * @param {DevicesApiChangeDeviceAssociationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeDeviceAssociation(requestParameters: DevicesApiChangeDeviceAssociationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const devicesChangeDeviceAssociationRequest: DevicesChangeDeviceAssociationRequest = {
                room_id: requestParameters.room_id,
                app_type: requestParameters.app_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeDeviceAssociation(requestParameters.deviceId, devicesChangeDeviceAssociationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new device to Zoom account.   **Scope:** `device:write:admin`       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add a new device
         * @param {DevicesApiCreateNewDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDevice(requestParameters: DevicesApiCreateNewDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const devicesCreateNewDeviceRequest: DevicesCreateNewDeviceRequest = {
                device_name: requestParameters.device_name,
                mac_address: requestParameters.mac_address,
                serial_number: requestParameters.serial_number,
                vendor: requestParameters.vendor,
                model: requestParameters.model,
                room_id: requestParameters.room_id,
                user_email: requestParameters.user_email,
                device_type: requestParameters.device_type,
                tag: requestParameters.tag,
                zdm_group_id: requestParameters.zdm_group_id,
                extension_number: requestParameters.extension_number
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDevice(devicesCreateNewDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a device\'s details.  **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get device detail
         * @param {DevicesApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetail(requestParameters: DevicesApiGetDetailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesGetDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetail(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get ZPA version info
         * @param {DevicesApiGetZpaVersionInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getZpaVersionInfo(requestParameters: DevicesApiGetZpaVersionInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesGetZpaVersionInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getZpaVersionInfo(requestParameters.zdmGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API lets you list devices.     **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary List devices
         * @param {DevicesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: DevicesApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.searchText, requestParameters.platformOs, requestParameters.isEnrolledInZdm, requestParameters.deviceType, requestParameters.deviceVendor, requestParameters.deviceModel, requestParameters.deviceStatus, requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get zdm group info
         * @param {DevicesApiListZdmGroupInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listZdmGroupInfo(requestParameters: DevicesApiListZdmGroupInfoRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DevicesListZdmGroupInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listZdmGroupInfo(requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Delete device
         * @param {DevicesApiRemoveDeviceZMDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDeviceZMD(requestParameters: DevicesApiRemoveDeviceZMDRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDeviceZMD(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete ZPA device by vendor and mac address
         * @param {DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeZpaDeviceByVendorAndMacAddress(requestParameters: DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeZpaDeviceByVendorAndMacAddress(requestParameters.vendor, requestParameters.macAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Change device 
         * @param {DevicesApiUpdateDeviceNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeviceName(requestParameters: DevicesApiUpdateDeviceNameRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const devicesUpdateDeviceNameRequest: DevicesUpdateDeviceNameRequest = {
                device_name: requestParameters.device_name,
                tag: requestParameters.tag,
                room_id: requestParameters.room_id,
                device_type: requestParameters.device_type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeviceName(requestParameters.deviceId, devicesUpdateDeviceNameRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary upgrade zpa os/app
         * @param {DevicesApiUpgradeZpaOsAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradeZpaOsApp(requestParameters: DevicesApiUpgradeZpaOsAppRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const devicesUpgradeZpaOsAppRequest: DevicesUpgradeZpaOsAppRequest = {
                zdm_group_id: requestParameters.zdm_group_id,
                data: requestParameters.data
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.upgradeZpaOsApp(devicesUpgradeZpaOsAppRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Assign a device to a user or commonarea
         * @param {DevicesApiAssignDeviceZpaAssignmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignDeviceZpaAssignment(requestParameters: DevicesApiAssignDeviceZpaAssignmentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignDeviceZpaAssignment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Change device association
         * @param {DevicesApiChangeDeviceAssociationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeDeviceAssociation(requestParameters: DevicesApiChangeDeviceAssociationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeDeviceAssociation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new device to Zoom account.   **Scope:** `device:write:admin`       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add a new device
         * @param {DevicesApiCreateNewDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDevice(requestParameters: DevicesApiCreateNewDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a device\'s details.  **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get device detail
         * @param {DevicesApiGetDetailRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetail(requestParameters: DevicesApiGetDetailRequest, options?: AxiosRequestConfig): AxiosPromise<DevicesGetDetailResponse> {
            return localVarFp.getDetail(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get ZPA version info
         * @param {DevicesApiGetZpaVersionInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getZpaVersionInfo(requestParameters: DevicesApiGetZpaVersionInfoRequest, options?: AxiosRequestConfig): AxiosPromise<DevicesGetZpaVersionInfoResponse> {
            return localVarFp.getZpaVersionInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API lets you list devices.     **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary List devices
         * @param {DevicesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: DevicesApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DevicesListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get zdm group info
         * @param {DevicesApiListZdmGroupInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listZdmGroupInfo(requestParameters: DevicesApiListZdmGroupInfoRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DevicesListZdmGroupInfoResponse> {
            return localVarFp.listZdmGroupInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Delete device
         * @param {DevicesApiRemoveDeviceZMDRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDeviceZMD(requestParameters: DevicesApiRemoveDeviceZMDRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeDeviceZMD(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete ZPA device by vendor and mac address
         * @param {DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeZpaDeviceByVendorAndMacAddress(requestParameters: DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeZpaDeviceByVendorAndMacAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Change device 
         * @param {DevicesApiUpdateDeviceNameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceName(requestParameters: DevicesApiUpdateDeviceNameRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDeviceName(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary upgrade zpa os/app
         * @param {DevicesApiUpgradeZpaOsAppRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeZpaOsApp(requestParameters: DevicesApiUpgradeZpaOsAppRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.upgradeZpaOsApp(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for assignDeviceZpaAssignment operation in DevicesApi.
 * @export
 * @interface DevicesApiAssignDeviceZpaAssignmentRequest
 */
export type DevicesApiAssignDeviceZpaAssignmentRequest = {
    
} & DevicesAssignDeviceZpaAssignmentRequest

/**
 * Request parameters for changeDeviceAssociation operation in DevicesApi.
 * @export
 * @interface DevicesApiChangeDeviceAssociationRequest
 */
export type DevicesApiChangeDeviceAssociationRequest = {
    
    /**
    * Unique identifier of the device.
    * @type {string}
    * @memberof DevicesApiChangeDeviceAssociation
    */
    readonly deviceId: string
    
} & DevicesChangeDeviceAssociationRequest

/**
 * Request parameters for createNewDevice operation in DevicesApi.
 * @export
 * @interface DevicesApiCreateNewDeviceRequest
 */
export type DevicesApiCreateNewDeviceRequest = {
    
} & DevicesCreateNewDeviceRequest

/**
 * Request parameters for getDetail operation in DevicesApi.
 * @export
 * @interface DevicesApiGetDetailRequest
 */
export type DevicesApiGetDetailRequest = {
    
    /**
    * The device\'s unique identifier.
    * @type {string}
    * @memberof DevicesApiGetDetail
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getZpaVersionInfo operation in DevicesApi.
 * @export
 * @interface DevicesApiGetZpaVersionInfoRequest
 */
export type DevicesApiGetZpaVersionInfoRequest = {
    
    /**
    * The Zoom Device Management (ZDM) group ID.
    * @type {string}
    * @memberof DevicesApiGetZpaVersionInfo
    */
    readonly zdmGroupId: string
    
}

/**
 * Request parameters for list operation in DevicesApi.
 * @export
 * @interface DevicesApiListRequest
 */
export type DevicesApiListRequest = {
    
    /**
    * Filter devices by name or serial number.
    * @type {string}
    * @memberof DevicesApiList
    */
    readonly searchText?: string
    
    /**
    * Filter devices by platform operating system.
    * @type {'win' | 'mac' | 'ipad' | 'iphone' | 'android' | 'linux'}
    * @memberof DevicesApiList
    */
    readonly platformOs?: 'win' | 'mac' | 'ipad' | 'iphone' | 'android' | 'linux'
    
    /**
    * Filter devices by enrollment of ZDM (Zoom Device Management).
    * @type {boolean}
    * @memberof DevicesApiList
    */
    readonly isEnrolledInZdm?: boolean
    
    /**
    * Filter devices by device type.     Device Type:    `-1` - All Zoom Room device(0,1,2,3,4,6).    `0` - Zoom Rooms Computer.    `1` - Zoom Rooms Controller.    `2` - Zoom Rooms Scheduling Display.    `3` - Zoom Rooms Control System.    `4` -  Zoom Rooms Whiteboard.    `5` - Zoom Phone Appliance.    `6` - Zoom Rooms Computer (with Controller).
    * @type {-1 | 0 | 1 | 2 | 3 | 4 | 5 | 6}
    * @memberof DevicesApiList
    */
    readonly deviceType?: -1 | 0 | 1 | 2 | 3 | 4 | 5 | 6
    
    /**
    * Filter devices by vendor.
    * @type {string}
    * @memberof DevicesApiList
    */
    readonly deviceVendor?: string
    
    /**
    * Filter devices by model.
    * @type {string}
    * @memberof DevicesApiList
    */
    readonly deviceModel?: string
    
    /**
    * Filter devices by status.      Device Status:    `0` - offline.    `1` - online.    `-1` - unlink
    * @type {-1 | 0 | 1}
    * @memberof DevicesApiList
    */
    readonly deviceStatus?: -1 | 0 | 1
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof DevicesApiList
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof DevicesApiList
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listZdmGroupInfo operation in DevicesApi.
 * @export
 * @interface DevicesApiListZdmGroupInfoRequest
 */
export type DevicesApiListZdmGroupInfoRequest = {
    
    /**
    * The total number of records returned from a single API call. Default - 30. Max -100.
    * @type {number}
    * @memberof DevicesApiListZdmGroupInfo
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period token is 15 minutes.
    * @type {string}
    * @memberof DevicesApiListZdmGroupInfo
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for removeDeviceZMD operation in DevicesApi.
 * @export
 * @interface DevicesApiRemoveDeviceZMDRequest
 */
export type DevicesApiRemoveDeviceZMDRequest = {
    
    /**
    * Unique identifier of the device.
    * @type {string}
    * @memberof DevicesApiRemoveDeviceZMD
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for removeZpaDeviceByVendorAndMacAddress operation in DevicesApi.
 * @export
 * @interface DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest
 */
export type DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest = {
    
    /**
    * The device\'s manufacturer.
    * @type {string}
    * @memberof DevicesApiRemoveZpaDeviceByVendorAndMacAddress
    */
    readonly vendor: string
    
    /**
    * The device\'s mac address.
    * @type {string}
    * @memberof DevicesApiRemoveZpaDeviceByVendorAndMacAddress
    */
    readonly macAddress: string
    
}

/**
 * Request parameters for updateDeviceName operation in DevicesApi.
 * @export
 * @interface DevicesApiUpdateDeviceNameRequest
 */
export type DevicesApiUpdateDeviceNameRequest = {
    
    /**
    * Unique identifier of the device.
    * @type {string}
    * @memberof DevicesApiUpdateDeviceName
    */
    readonly deviceId: string
    
} & DevicesUpdateDeviceNameRequest

/**
 * Request parameters for upgradeZpaOsApp operation in DevicesApi.
 * @export
 * @interface DevicesApiUpgradeZpaOsAppRequest
 */
export type DevicesApiUpgradeZpaOsAppRequest = {
    
} & DevicesUpgradeZpaOsAppRequest

/**
 * DevicesApiGenerated - object-oriented interface
 * @export
 * @class DevicesApiGenerated
 * @extends {BaseAPI}
 */
export class DevicesApiGenerated extends BaseAPI {
    /**
     * Assign a device to a user or common area, or move a device to another user or common area, or remove a device.  **Prerequisites:** * Device must be enrolled in Zoom Device Management (ZDM).  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Assign a device to a user or commonarea
     * @param {DevicesApiAssignDeviceZpaAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public assignDeviceZpaAssignment(requestParameters: DevicesApiAssignDeviceZpaAssignmentRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).assignDeviceZpaAssignment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This Device API lets you change device association from one Zoom Room to another.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)     **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Change device association
     * @param {DevicesApiChangeDeviceAssociationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public changeDeviceAssociation(requestParameters: DevicesApiChangeDeviceAssociationRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).changeDeviceAssociation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new device to Zoom account.   **Scope:** `device:write:admin`       **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Add a new device
     * @param {DevicesApiCreateNewDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public createNewDevice(requestParameters: DevicesApiCreateNewDeviceRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).createNewDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a device\'s details.  **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get device detail
     * @param {DevicesApiGetDetailRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public getDetail(requestParameters: DevicesApiGetDetailRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDetail(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get ZPA firmware and app version information that can be upgraded for devices.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Get ZPA version info
     * @param {DevicesApiGetZpaVersionInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public getZpaVersionInfo(requestParameters: DevicesApiGetZpaVersionInfoRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getZpaVersionInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API lets you list devices.     **Scopes:** `device:read:admin`,`device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary List devices
     * @param {DevicesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public list(requestParameters: DevicesApiListRequest = {}, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Zoom Device Manager (ZDM) group information for an account.  **Scopes:** `device:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Get zdm group info
     * @param {DevicesApiListZdmGroupInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public listZdmGroupInfo(requestParameters: DevicesApiListZdmGroupInfoRequest = {}, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).listZdmGroupInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a device from a Zoom account.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Delete device
     * @param {DevicesApiRemoveDeviceZMDRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public removeDeviceZMD(requestParameters: DevicesApiRemoveDeviceZMDRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).removeDeviceZMD(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a ZPA device from the device manager, by vendor and mac address.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Delete ZPA device by vendor and mac address
     * @param {DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public removeZpaDeviceByVendorAndMacAddress(requestParameters: DevicesApiRemoveZpaDeviceByVendorAndMacAddressRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).removeZpaDeviceByVendorAndMacAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change device name.   **Prerequisites:** * Device must be enrolled in ZMD (Zoom Device Management)  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Change device 
     * @param {DevicesApiUpdateDeviceNameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public updateDeviceName(requestParameters: DevicesApiUpdateDeviceNameRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).updateDeviceName(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upgrade ZPA firmware or app by Zoom Device Manager (ZDM) group ID.  **Scopes:** `device:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary upgrade zpa os/app
     * @param {DevicesApiUpgradeZpaOsAppRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiGenerated
     */
    public upgradeZpaOsApp(requestParameters: DevicesApiUpgradeZpaOsAppRequest, options?: AxiosRequestConfig) {
        return DevicesApiFp(this.configuration).upgradeZpaOsApp(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
