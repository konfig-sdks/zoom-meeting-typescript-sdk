/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TspAddUserTspAccountRequest } from '../models';
// @ts-ignore
import { TspAddUserTspAccountRequestDialInNumbersInner } from '../models';
// @ts-ignore
import { TspAddUserTspAccountResponse } from '../models';
// @ts-ignore
import { TspAddUserTspAccountUserIdParameterOneOf } from '../models';
// @ts-ignore
import { TspDeleteUserTspAccountUserIdParameterOneOf } from '../models';
// @ts-ignore
import { TspGetAccountInfoResponse } from '../models';
// @ts-ignore
import { TspGetUserTspAccountResponse } from '../models';
// @ts-ignore
import { TspGetUserTspAccountUserIdParameterOneOf } from '../models';
// @ts-ignore
import { TspListUserTspAccountsResponse } from '../models';
// @ts-ignore
import { TspListUserTspAccountsUserIdParameterOneOf } from '../models';
// @ts-ignore
import { TspSetGlobalDialInUrlRequest } from '../models';
// @ts-ignore
import { TspUpdateAccountTspInformationRequest } from '../models';
// @ts-ignore
import { TspUpdateUserTspAccountRequest } from '../models';
// @ts-ignore
import { TspUpdateUserTspAccountRequestDialInNumbersInner } from '../models';
// @ts-ignore
import { TspUpdateUserTspAccountUserIdParameterOneOf } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TSPApi - axios parameter creator
 * @export
 */
export const TSPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a user\'s TSP account
         * @param {TspAddUserTspAccountUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {TspAddUserTspAccountRequest} [tspAddUserTspAccountRequest] TSP account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTspAccount: async (userId: TspAddUserTspAccountUserIdParameter, tspAddUserTspAccountRequest?: TspAddUserTspAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('addUserTspAccount', 'userId', userId)
            const localVarPath = `/users/{userId}/tsp`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:write:admin", "tsp:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tspAddUserTspAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tspAddUserTspAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a user\'s TSP account
         * @param {TspDeleteUserTspAccountUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {'1' | '2'} tspId TSP account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTspAccount: async (userId: TspDeleteUserTspAccountUserIdParameter, tspId: '1' | '2', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserTspAccount', 'userId', userId)
            // verify required parameter 'tspId' is not null or undefined
            assertParamExists('deleteUserTspAccount', 'tspId', tspId)
            const localVarPath = `/users/{userId}/tsp/{tspId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)))
                .replace(`{${"tspId"}}`, encodeURIComponent(String(tspId !== undefined ? tspId : `-tspId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:write:admin", "tsp:write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp/{tspId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** `tsp:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get account\'s TSP information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tsp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tsp',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a user\'s TSP account
         * @param {TspGetUserTspAccountUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {'1' | '2'} tspId TSP account ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTspAccount: async (userId: TspGetUserTspAccountUserIdParameter, tspId: '1' | '2', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserTspAccount', 'userId', userId)
            // verify required parameter 'tspId' is not null or undefined
            assertParamExists('getUserTspAccount', 'tspId', tspId)
            const localVarPath = `/users/{userId}/tsp/{tspId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)))
                .replace(`{${"tspId"}}`, encodeURIComponent(String(tspId !== undefined ? tspId : `-tspId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:read:admin", "tsp:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp/{tspId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List user\'s TSP accounts
         * @param {TspListUserTspAccountsUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserTspAccounts: async (userId: TspListUserTspAccountsUserIdParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUserTspAccounts', 'userId', userId)
            const localVarPath = `/users/{userId}/tsp`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:read:admin", "tsp:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt;   **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set global dial-in URL for a TSP user
         * @param {string} userId The userId or email address of the user.
         * @param {TspSetGlobalDialInUrlRequest} [tspSetGlobalDialInUrlRequest] Global dial-in URL of the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGlobalDialInUrl: async (userId: string, tspSetGlobalDialInUrlRequest?: TspSetGlobalDialInUrlRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('setGlobalDialInUrl', 'userId', userId)
            const localVarPath = `/users/{userId}/tsp/settings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:write:admin", "tsp:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tspSetGlobalDialInUrlRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp/settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tspSetGlobalDialInUrlRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** `tsp:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update account\'s TSP information
         * @param {TspUpdateAccountTspInformationRequest} [tspUpdateAccountTspInformationRequest] TSP Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountTspInformation: async (tspUpdateAccountTspInformationRequest?: TspUpdateAccountTspInformationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tsp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tspUpdateAccountTspInformationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tsp',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tspUpdateAccountTspInformationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a TSP account
         * @param {TspUpdateUserTspAccountUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {'1' | '2'} tspId TSP account ID.
         * @param {TspUpdateUserTspAccountRequest} [tspUpdateUserTspAccountRequest] TSP account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserTspAccount: async (userId: TspUpdateUserTspAccountUserIdParameter, tspId: '1' | '2', tspUpdateUserTspAccountRequest?: TspUpdateUserTspAccountRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserTspAccount', 'userId', userId)
            // verify required parameter 'tspId' is not null or undefined
            assertParamExists('updateUserTspAccount', 'tspId', tspId)
            const localVarPath = `/users/{userId}/tsp/{tspId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)))
                .replace(`{${"tspId"}}`, encodeURIComponent(String(tspId !== undefined ? tspId : `-tspId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tsp:write:admin", "tsp:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tspUpdateUserTspAccountRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/tsp/{tspId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tspUpdateUserTspAccountRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TSPApi - functional programming interface
 * @export
 */
export const TSPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TSPApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a user\'s TSP account
         * @param {TSPApiAddUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserTspAccount(requestParameters: TSPApiAddUserTspAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TspAddUserTspAccountResponse>> {
            const tspAddUserTspAccountRequest: TspAddUserTspAccountRequest = {
                conference_code: requestParameters.conference_code,
                dial_in_numbers: requestParameters.dial_in_numbers,
                leader_pin: requestParameters.leader_pin,
                tsp_bridge: requestParameters.tsp_bridge
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserTspAccount(requestParameters.userId, tspAddUserTspAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a user\'s TSP account
         * @param {TSPApiDeleteUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserTspAccount(requestParameters: TSPApiDeleteUserTspAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserTspAccount(requestParameters.userId, requestParameters.tspId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** `tsp:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get account\'s TSP information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccountInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TspGetAccountInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccountInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a user\'s TSP account
         * @param {TSPApiGetUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserTspAccount(requestParameters: TSPApiGetUserTspAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TspGetUserTspAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserTspAccount(requestParameters.userId, requestParameters.tspId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List user\'s TSP accounts
         * @param {TSPApiListUserTspAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserTspAccounts(requestParameters: TSPApiListUserTspAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TspListUserTspAccountsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserTspAccounts(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt;   **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set global dial-in URL for a TSP user
         * @param {TSPApiSetGlobalDialInUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setGlobalDialInUrl(requestParameters: TSPApiSetGlobalDialInUrlRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tspSetGlobalDialInUrlRequest: TspSetGlobalDialInUrlRequest = {
                audio_url: requestParameters.audio_url
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setGlobalDialInUrl(requestParameters.userId, tspSetGlobalDialInUrlRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** `tsp:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update account\'s TSP information
         * @param {TSPApiUpdateAccountTspInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountTspInformation(requestParameters: TSPApiUpdateAccountTspInformationRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tspUpdateAccountTspInformationRequest: TspUpdateAccountTspInformationRequest = {
                dial_in_number_unrestricted: requestParameters.dial_in_number_unrestricted,
                enable: requestParameters.enable,
                master_account_setting_extended: requestParameters.master_account_setting_extended,
                modify_credential_forbidden: requestParameters.modify_credential_forbidden,
                tsp_bridge: requestParameters.tsp_bridge,
                tsp_enabled: requestParameters.tsp_enabled,
                tsp_provider: requestParameters.tsp_provider
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountTspInformation(tspUpdateAccountTspInformationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a TSP account
         * @param {TSPApiUpdateUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserTspAccount(requestParameters: TSPApiUpdateUserTspAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tspUpdateUserTspAccountRequest: TspUpdateUserTspAccountRequest = {
                conference_code: requestParameters.conference_code,
                dial_in_numbers: requestParameters.dial_in_numbers,
                leader_pin: requestParameters.leader_pin,
                tsp_bridge: requestParameters.tsp_bridge
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserTspAccount(requestParameters.userId, requestParameters.tspId, tspUpdateUserTspAccountRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TSPApi - factory interface
 * @export
 */
export const TSPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TSPApiFp(configuration)
    return {
        /**
         * Add a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a user\'s TSP account
         * @param {TSPApiAddUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserTspAccount(requestParameters: TSPApiAddUserTspAccountRequest, options?: AxiosRequestConfig): AxiosPromise<TspAddUserTspAccountResponse> {
            return localVarFp.addUserTspAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a user\'s TSP account
         * @param {TSPApiDeleteUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserTspAccount(requestParameters: TSPApiDeleteUserTspAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserTspAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** `tsp:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get account\'s TSP information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfo(options?: AxiosRequestConfig): AxiosPromise<TspGetAccountInfoResponse> {
            return localVarFp.getAccountInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a user\'s TSP account
         * @param {TSPApiGetUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTspAccount(requestParameters: TSPApiGetUserTspAccountRequest, options?: AxiosRequestConfig): AxiosPromise<TspGetUserTspAccountResponse> {
            return localVarFp.getUserTspAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List user\'s TSP accounts
         * @param {TSPApiListUserTspAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserTspAccounts(requestParameters: TSPApiListUserTspAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<TspListUserTspAccountsResponse> {
            return localVarFp.listUserTspAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt;   **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set global dial-in URL for a TSP user
         * @param {TSPApiSetGlobalDialInUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setGlobalDialInUrl(requestParameters: TSPApiSetGlobalDialInUrlRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setGlobalDialInUrl(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** `tsp:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update account\'s TSP information
         * @param {TSPApiUpdateAccountTspInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountTspInformation(requestParameters: TSPApiUpdateAccountTspInformationRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAccountTspInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a TSP account
         * @param {TSPApiUpdateUserTspAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserTspAccount(requestParameters: TSPApiUpdateUserTspAccountRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateUserTspAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addUserTspAccount operation in TSPApi.
 * @export
 * @interface TSPApiAddUserTspAccountRequest
 */
export type TSPApiAddUserTspAccountRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {TspAddUserTspAccountUserIdParameter}
    * @memberof TSPApiAddUserTspAccount
    */
    readonly userId: TspAddUserTspAccountUserIdParameter
    
} & TspAddUserTspAccountRequest

/**
 * Request parameters for deleteUserTspAccount operation in TSPApi.
 * @export
 * @interface TSPApiDeleteUserTspAccountRequest
 */
export type TSPApiDeleteUserTspAccountRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {TspDeleteUserTspAccountUserIdParameter}
    * @memberof TSPApiDeleteUserTspAccount
    */
    readonly userId: TspDeleteUserTspAccountUserIdParameter
    
    /**
    * TSP account ID.
    * @type {'1' | '2'}
    * @memberof TSPApiDeleteUserTspAccount
    */
    readonly tspId: '1' | '2'
    
}

/**
 * Request parameters for getUserTspAccount operation in TSPApi.
 * @export
 * @interface TSPApiGetUserTspAccountRequest
 */
export type TSPApiGetUserTspAccountRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {TspGetUserTspAccountUserIdParameter}
    * @memberof TSPApiGetUserTspAccount
    */
    readonly userId: TspGetUserTspAccountUserIdParameter
    
    /**
    * TSP account ID.
    * @type {'1' | '2'}
    * @memberof TSPApiGetUserTspAccount
    */
    readonly tspId: '1' | '2'
    
}

/**
 * Request parameters for listUserTspAccounts operation in TSPApi.
 * @export
 * @interface TSPApiListUserTspAccountsRequest
 */
export type TSPApiListUserTspAccountsRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {TspListUserTspAccountsUserIdParameter}
    * @memberof TSPApiListUserTspAccounts
    */
    readonly userId: TspListUserTspAccountsUserIdParameter
    
}

/**
 * Request parameters for setGlobalDialInUrl operation in TSPApi.
 * @export
 * @interface TSPApiSetGlobalDialInUrlRequest
 */
export type TSPApiSetGlobalDialInUrlRequest = {
    
    /**
    * The userId or email address of the user.
    * @type {string}
    * @memberof TSPApiSetGlobalDialInUrl
    */
    readonly userId: string
    
} & TspSetGlobalDialInUrlRequest

/**
 * Request parameters for updateAccountTspInformation operation in TSPApi.
 * @export
 * @interface TSPApiUpdateAccountTspInformationRequest
 */
export type TSPApiUpdateAccountTspInformationRequest = {
    
} & TspUpdateAccountTspInformationRequest

/**
 * Request parameters for updateUserTspAccount operation in TSPApi.
 * @export
 * @interface TSPApiUpdateUserTspAccountRequest
 */
export type TSPApiUpdateUserTspAccountRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {TspUpdateUserTspAccountUserIdParameter}
    * @memberof TSPApiUpdateUserTspAccount
    */
    readonly userId: TspUpdateUserTspAccountUserIdParameter
    
    /**
    * TSP account ID.
    * @type {'1' | '2'}
    * @memberof TSPApiUpdateUserTspAccount
    */
    readonly tspId: '1' | '2'
    
} & TspUpdateUserTspAccountRequest

/**
 * TSPApiGenerated - object-oriented interface
 * @export
 * @class TSPApiGenerated
 * @extends {BaseAPI}
 */
export class TSPApiGenerated extends BaseAPI {
    /**
     * Add a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Add a user\'s TSP account
     * @param {TSPApiAddUserTspAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public addUserTspAccount(requestParameters: TSPApiAddUserTspAccountRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).addUserTspAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a user\'s TSP account
     * @param {TSPApiDeleteUserTspAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public deleteUserTspAccount(requestParameters: TSPApiDeleteUserTspAccountRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).deleteUserTspAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information on Telephony Service Provider on an account level.          **Prerequisites:**     * A Pro or a higher plan.  **Scopes:** `tsp:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get account\'s TSP information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public getAccountInfo(options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).getAccountInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Each user can have a maximum of two TSP accounts. Use this API to retrieve details of a specific TSP account enabled for a specific user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a user\'s TSP account
     * @param {TSPApiGetUserTspAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public getUserTspAccount(requestParameters: TSPApiGetUserTspAccountRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).getUserTspAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A user can have a maximum of two TSP accounts. Use this API to list all TSP accounts of a user.            **Scopes:** `tsp:read:admin`,`tsp:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List user\'s TSP accounts
     * @param {TSPApiListUserTspAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public listUserTspAccounts(requestParameters: TSPApiListUserTspAccountsRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).listUserTspAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A global dial-in page can provide a list of global access numbers using which audio conferencing can be conducted. By calling this API, you can set the url for the global dial-in page of a user whose Zoom account has TSP and special TSP with third-party audio conferencing options enabled. &lt;p&gt;&lt;/p&gt;   **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Set global dial-in URL for a TSP user
     * @param {TSPApiSetGlobalDialInUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public setGlobalDialInUrl(requestParameters: TSPApiSetGlobalDialInUrlRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).setGlobalDialInUrl(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update information of the Telephony Service Provider set up on an account.     **Prerequisites**:     TSP account option should be enabled.       **Scopes:** `tsp:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update account\'s TSP information
     * @param {TSPApiUpdateAccountTspInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public updateAccountTspInformation(requestParameters: TSPApiUpdateAccountTspInformationRequest = {}, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).updateAccountTspInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a user\'s TSP account.            **Scopes:** `tsp:write:admin`,`tsp:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update a TSP account
     * @param {TSPApiUpdateUserTspAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TSPApiGenerated
     */
    public updateUserTspAccount(requestParameters: TSPApiUpdateUserTspAccountRequest, options?: AxiosRequestConfig) {
        return TSPApiFp(this.configuration).updateUserTspAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
