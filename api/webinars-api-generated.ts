/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RecurrenceWebinarProperty } from '../models';
// @ts-ignore
import { WebinarsAddPanelistsRequest } from '../models';
// @ts-ignore
import { WebinarsAddPanelistsRequestPanelistsInner } from '../models';
// @ts-ignore
import { WebinarsAddPanelistsResponse } from '../models';
// @ts-ignore
import { WebinarsAddRegistrantRequest } from '../models';
// @ts-ignore
import { WebinarsAddRegistrantRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { WebinarsAddRegistrantResponse } from '../models';
// @ts-ignore
import { WebinarsCreateBatchRegistrantsRequest } from '../models';
// @ts-ignore
import { WebinarsCreateBatchRegistrantsRequestRegistrantsInner } from '../models';
// @ts-ignore
import { WebinarsCreateBatchRegistrantsResponse } from '../models';
// @ts-ignore
import { WebinarsCreateBrandingNameTagRequest } from '../models';
// @ts-ignore
import { WebinarsCreateBrandingNameTagResponse } from '../models';
// @ts-ignore
import { WebinarsCreateInviteLinksRequest } from '../models';
// @ts-ignore
import { WebinarsCreateInviteLinksRequestAttendeesInner } from '../models';
// @ts-ignore
import { WebinarsCreateInviteLinksResponse } from '../models';
// @ts-ignore
import { WebinarsCreatePollRequest } from '../models';
// @ts-ignore
import { WebinarsCreatePollRequestQuestionsInner } from '../models';
// @ts-ignore
import { WebinarsCreatePollResponse } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarRequest } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarRequestSettings } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarRequestTrackingFieldsInner } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarResponse } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarTemplateRequest } from '../models';
// @ts-ignore
import { WebinarsCreateWebinarTemplateResponse } from '../models';
// @ts-ignore
import { WebinarsGetDetailsResponse } from '../models';
// @ts-ignore
import { WebinarsGetJoinTokenLocalRecordingResponse } from '../models';
// @ts-ignore
import { WebinarsGetLiveStreamDetailsResponse } from '../models';
// @ts-ignore
import { WebinarsGetMeetingArchiveTokenForLocalArchivingResponse } from '../models';
// @ts-ignore
import { WebinarsGetPollDetailsResponse } from '../models';
// @ts-ignore
import { WebinarsGetSessionBrandingResponse } from '../models';
// @ts-ignore
import { WebinarsGetSipUriWithPasscodeRequest } from '../models';
// @ts-ignore
import { WebinarsGetSipUriWithPasscodeResponse } from '../models';
// @ts-ignore
import { WebinarsGetSurveyResponse } from '../models';
// @ts-ignore
import { WebinarsGetWebinarTokenResponse } from '../models';
// @ts-ignore
import { WebinarsJoinTokenLiveStreamingResponse } from '../models';
// @ts-ignore
import { WebinarsListAbsenteesResponse } from '../models';
// @ts-ignore
import { WebinarsListPanelistsResponse } from '../models';
// @ts-ignore
import { WebinarsListParticipantsResponse } from '../models';
// @ts-ignore
import { WebinarsListPastInstancesResponse } from '../models';
// @ts-ignore
import { WebinarsListPastWebinarQaResponse } from '../models';
// @ts-ignore
import { WebinarsListPollResultsResponse } from '../models';
// @ts-ignore
import { WebinarsListPollsResponse } from '../models';
// @ts-ignore
import { WebinarsListRegistrantsResponse } from '../models';
// @ts-ignore
import { WebinarsListRegistrationQuestionsResponse } from '../models';
// @ts-ignore
import { WebinarsListTrackingSourcesResponse } from '../models';
// @ts-ignore
import { WebinarsListWebinarTemplatesResponse } from '../models';
// @ts-ignore
import { WebinarsListWebinarsResponse } from '../models';
// @ts-ignore
import { WebinarsRegistrantDetailsResponse } from '../models';
// @ts-ignore
import { WebinarsUpdateBrandingNameTagRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateLiveStreamRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateLiveStreamStatusRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateLiveStreamStatusRequestSettings } from '../models';
// @ts-ignore
import { WebinarsUpdatePollRequest } from '../models';
// @ts-ignore
import { WebinarsUpdatePollRequestQuestionsInner } from '../models';
// @ts-ignore
import { WebinarsUpdateRegistrantStatusRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateRegistrantStatusRequestRegistrantsInner } from '../models';
// @ts-ignore
import { WebinarsUpdateRegistrationQuestionsRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateRegistrationQuestionsRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { WebinarsUpdateRegistrationQuestionsRequestQuestionsInner } from '../models';
// @ts-ignore
import { WebinarsUpdateScheduledWebinarRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateScheduledWebinarRequestRecurrence } from '../models';
// @ts-ignore
import { WebinarsUpdateScheduledWebinarRequestSettings } from '../models';
// @ts-ignore
import { WebinarsUpdateScheduledWebinarRequestTrackingFieldsInner } from '../models';
// @ts-ignore
import { WebinarsUpdateStatusRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateSurveyRequest } from '../models';
// @ts-ignore
import { WebinarsUpdateSurveyRequestCustomSurvey } from '../models';
// @ts-ignore
import { WebinarsUploadBrandingVirtualBackgroundRequest } from '../models';
// @ts-ignore
import { WebinarsUploadBrandingVirtualBackgroundResponse } from '../models';
// @ts-ignore
import { WebinarsUploadBrandingWallpaperRequest } from '../models';
// @ts-ignore
import { WebinarsUploadBrandingWallpaperResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebinarsApi - axios parameter creator
 * @export
 */
export const WebinarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add panelists
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsAddPanelistsRequest} [webinarsAddPanelistsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPanelists: async (webinarId: number, webinarsAddPanelistsRequest?: WebinarsAddPanelistsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('addPanelists', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/panelists`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsAddPanelistsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/panelists',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsAddPanelistsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create and submit a user\'s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Add a webinar registrant
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [occurrenceIds] A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](https://developers.zoom.us) API. Make sure the &#x60;registration_type&#x60; is 3 if updating multiple occurrences with this API.
         * @param {WebinarsAddRegistrantRequest} [webinarsAddRegistrantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegistrant: async (webinarId: number, occurrenceIds?: string, webinarsAddRegistrantRequest?: WebinarsAddRegistrantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('addRegistrant', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/registrants`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (occurrenceIds !== undefined) {
                localVarQueryParameter['occurrence_ids'] = occurrenceIds;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsAddRegistrantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsAddRegistrantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Perform batch registration
         * @param {string} webinarId The webinar\&#39;s unique identifier.
         * @param {WebinarsCreateBatchRegistrantsRequest} [webinarsCreateBatchRegistrantsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchRegistrants: async (webinarId: string, webinarsCreateBatchRegistrantsRequest?: WebinarsCreateBatchRegistrantsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('createBatchRegistrants', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/batch_registrants`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreateBatchRegistrantsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/batch_registrants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreateBatchRegistrantsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to create a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There\'s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar\'s branding name tag
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsCreateBrandingNameTagRequest} [webinarsCreateBrandingNameTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandingNameTag: async (webinarId: number, webinarsCreateBrandingNameTagRequest?: WebinarsCreateBrandingNameTagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('createBrandingNameTag', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding/name_tags`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreateBrandingNameTagRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/name_tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreateBrandingNameTagRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create webinar\'s invite links
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsCreateInviteLinksRequest} [webinarsCreateInviteLinksRequest] Webinar invite link object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInviteLinks: async (webinarId: number, webinarsCreateInviteLinksRequest?: WebinarsCreateInviteLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('createInviteLinks', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/invite_links`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreateInviteLinksRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/invite_links',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreateInviteLinksRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar\'s poll
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsCreatePollRequest} [webinarsCreatePollRequest] Webinar poll object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoll: async (webinarId: number, webinarsCreatePollRequest?: WebinarsCreatePollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('createPoll', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/polls`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreatePollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/polls',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreatePollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar
         * @param {string} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {WebinarsCreateWebinarRequest} [webinarsCreateWebinarRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinar: async (userId: string, webinarsCreateWebinarRequest?: WebinarsCreateWebinarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createWebinar', 'userId', userId)
            const localVarPath = `/users/{userId}/webinars`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreateWebinarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/webinars',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreateWebinarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar template
         * @param {string} userId The user ID retrievable from the [List users](https://developers.zoom.us) API.
         * @param {WebinarsCreateWebinarTemplateRequest} [webinarsCreateWebinarTemplateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinarTemplate: async (userId: string, webinarsCreateWebinarTemplateRequest?: WebinarsCreateWebinarTemplateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createWebinarTemplate', 'userId', userId)
            const localVarPath = `/users/{userId}/webinar_templates`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write:admin", "webinar:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsCreateWebinarTemplateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/webinar_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsCreateWebinarTemplateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding name tag
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [nameTagIds] A comma-separated list of the name tag IDs to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingNameTag: async (webinarId: number, nameTagIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteBrandingNameTag', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding/name_tags`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (nameTagIds !== undefined) {
                localVarQueryParameter['name_tag_ids'] = nameTagIds;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/name_tags',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding Virtual Backgrounds
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [ids] A comma-separated list of the Virtual Background file IDs to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingVirtualBackground: async (webinarId: number, ids?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteBrandingVirtualBackground', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding/virtual_backgrounds`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/virtual_backgrounds',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete a webinar\'s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding wallpaper
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingWallpaper: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteBrandingWallpaper', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding/wallpaper`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/wallpaper',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live webinar message
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} messageId The live webinar chat message\&#39;s unique identifier (UUID), in base64-encoded format.
         * @param {string} [fileIds] The live webinar chat file\&#39;s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageById: async (webinarId: number, messageId: string, fileIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteMessageById', 'webinarId', webinarId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('deleteMessageById', 'messageId', messageId)
            const localVarPath = `/live_webinars/{webinarId}/chat/messages/{messageId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId !== undefined ? messageId : `-messageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (fileIds !== undefined) {
                localVarQueryParameter['file_ids'] = fileIds;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_webinars/{webinarId}/chat/messages/{messageId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar poll
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} pollId The poll ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoll: async (webinarId: number, pollId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deletePoll', 'webinarId', webinarId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('deletePoll', 'pollId', pollId)
            const localVarPath = `/webinars/{webinarId}/polls/{pollId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/polls/{pollId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webinar registrant.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar registrant
         * @param {number} webinarId The webinar ID.
         * @param {string} registrantId The registrant ID.
         * @param {string} [occurrenceId] The webinar occurrence ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrant: async (webinarId: number, registrantId: string, occurrenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteRegistrant', 'webinarId', webinarId)
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('deleteRegistrant', 'registrantId', registrantId)
            const localVarPath = `/webinars/{webinarId}/registrants/{registrantId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"registrantId"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants/{registrantId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar survey
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSurvey: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('deleteSurvey', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/survey`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/survey',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).
         * @param {string} [occurrenceId] Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](https://developers.zoom.us) API, you can retrieve the Occurrence ID from the response of the API call.
         * @param {boolean} [showPreviousOccurrences] Set the value of this field to &#x60;true&#x60; if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (webinarId: string, occurrenceId?: string, showPreviousOccurrences?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getDetails', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (showPreviousOccurrences !== undefined) {
                localVarQueryParameter['show_previous_occurrences'] = showPreviousOccurrences;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a webinar\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for local recording
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinTokenLocalRecording: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getJoinTokenLocalRecording', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/jointoken/local_recording`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar_token:read:admin:local_recording", "webinar_token:read:local_recording"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/jointoken/local_recording',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a webinar\'s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get live stream details
         * @param {string} webinarId The webinar\&#39;s unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveStreamDetails: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getLiveStreamDetails', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/livestream`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/livestream',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a webinar\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar\'s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s archive token for local archiving
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingArchiveTokenForLocalArchiving: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getMeetingArchiveTokenForLocalArchiving', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/jointoken/local_archiving`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar_token:read:admin:local_archiving"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/jointoken/local_archiving',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar poll
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} pollId The poll ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollDetails: async (webinarId: number, pollId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getPollDetails', 'webinarId', webinarId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('getPollDetails', 'pollId', pollId)
            const localVarPath = `/webinars/{webinarId}/polls/{pollId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/polls/{pollId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get the webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s session branding
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionBranding: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getSessionBranding', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read", "webinar:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a webinar\'s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** `webinar:write:admin:sip_dialing`,`webinar:write:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar SIP URI with Passcode
         * @param {number} webinarId The webinar\&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
         * @param {WebinarsGetSipUriWithPasscodeRequest} [webinarsGetSipUriWithPasscodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSipUriWithPasscode: async (webinarId: number, webinarsGetSipUriWithPasscodeRequest?: WebinarsGetSipUriWithPasscodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getSipUriWithPasscode', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/sip_dialing`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write:admin:sip_dialing", "webinar:write:sip_dialing"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsGetSipUriWithPasscodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/sip_dialing',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsGetSipUriWithPasscodeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar survey
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurvey: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getSurvey', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/survey`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/survey',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a webinar\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s token
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {'closed_caption_token'} [type] The webinar token type:  * &#x60;closed_caption_token&#x60; &amp;mdash; The third-party closed caption API token.   This defaults to &#x60;closed_caption_token&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarToken: async (webinarId: number, type?: 'closed_caption_token', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getWebinarToken', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/token`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read", "webinar:read:admin"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/token',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a webinar\'s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for live streaming
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinTokenLiveStreaming: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('joinTokenLiveStreaming', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/jointoken/live_streaming`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar_token:read:admin:live_streaming", "webinar_token:read:live_streaming"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/jointoken/live_streaming',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List absentees of a webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar absentees
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbsentees: async (webinarId: string, occurrenceId?: string, pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listAbsentees', 'webinarId', webinarId)
            const localVarPath = `/past_webinars/{webinarId}/absentees`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_webinars/{webinarId}/absentees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all of a webinar\'s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List panelists
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPanelists: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listPanelists', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/panelists`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/panelists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar participants
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParticipants: async (webinarId: string, pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listParticipants', 'webinarId', webinarId)
            const localVarPath = `/past_webinars/{webinarId}/participants`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_webinars/{webinarId}/participants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List past webinar instances.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List past webinar instances
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastInstances: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listPastInstances', 'webinarId', webinarId)
            const localVarPath = `/past_webinars/{webinarId}/instances`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_webinars/{webinarId}/instances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List Q&As of a past webinar
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastWebinarQa: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listPastWebinarQa', 'webinarId', webinarId)
            const localVarPath = `/past_webinars/{webinarId}/qa`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_webinars/{webinarId}/qa',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List past webinar poll results
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPollResults: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listPollResults', 'webinarId', webinarId)
            const localVarPath = `/past_webinars/{webinarId}/polls`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_webinars/{webinarId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List a webinar\'s polls 
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {boolean} [anonymous] Whether to query for polls with the **Anonymous** option enabled:  * &#x60;true&#x60; &amp;mdash; Query for polls with the **Anonymous** option enabled.  * &#x60;false&#x60; &amp;mdash; Do not query for polls with the **Anonymous** option enabled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolls: async (webinarId: number, anonymous?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listPolls', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/polls`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (anonymous !== undefined) {
                localVarQueryParameter['anonymous'] = anonymous;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar registrants
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {'pending' | 'approved' | 'denied'} [status] Query by the registrant\&#39;s status.  * &#x60;pending&#x60; - The registration is pending.  * &#x60;approved&#x60; - The registrant is approved.  * &#x60;denied&#x60; - The registration is denied.
         * @param {string} [trackingSourceId] The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants: async (webinarId: number, occurrenceId?: string, status?: 'pending' | 'approved' | 'denied', trackingSourceId?: string, pageSize?: number, pageNumber?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listRegistrants', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/registrants`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (trackingSourceId !== undefined) {
                localVarQueryParameter['tracking_source_id'] = trackingSourceId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List registration questions
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listRegistrationQuestions', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/registrants/questions`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants/questions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get webinar tracking sources
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrackingSources: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('listTrackingSources', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/tracking_sources`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/tracking_sources',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Display a list of a user\'s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://developers.zoom.us) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`
         * @summary List webinar templates
         * @param {string} userId The user\&#39;s ID. To get a user\&#39;s ID, use the [**List users**](https://developers.zoom.us) API. For user-level apps, pass the &#x60;me&#x60; value instead of the user ID value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarTemplates: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listWebinarTemplates', 'userId', userId)
            const localVarPath = `/users/{userId}/webinar_templates`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/webinar_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user\'s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinars
         * @param {string} userId The user\&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {'scheduled' | 'upcoming'} [type] The type of webinar.  * &#x60;scheduled&#x60; - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.  * &#x60;upcoming&#x60; - All upcoming webinars, including live webinars.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] **Deprecated** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinars: async (userId: string, type?: 'scheduled' | 'upcoming', pageSize?: number, pageNumber?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listWebinars', 'userId', userId)
            const localVarPath = `/users/{userId}/webinars`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/webinars',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar registrant
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} registrantId The registrant ID.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrantDetails: async (webinarId: number, registrantId: string, occurrenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('registrantDetails', 'webinarId', webinarId)
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('registrantDetails', 'registrantId', registrantId)
            const localVarPath = `/webinars/{webinarId}/registrants/{registrantId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"registrantId"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:read:admin", "webinar:read"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants/{registrantId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove a panelist
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} panelistId The panelist\&#39;s ID or email.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePanelist: async (webinarId: number, panelistId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('removePanelist', 'webinarId', webinarId)
            // verify required parameter 'panelistId' is not null or undefined
            assertParamExists('removePanelist', 'panelistId', panelistId)
            const localVarPath = `/webinars/{webinarId}/panelists/{panelistId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"panelistId"}}`, encodeURIComponent(String(panelistId !== undefined ? panelistId : `-panelistId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/panelists/{panelistId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove webinar panelists
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePanelists: async (webinarId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('removePanelists', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/panelists`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/panelists',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {boolean} [cancelWebinarReminder] &#x60;true&#x60; - Notify panelists and registrants about the webinar cancellation via email.   &#x60;false&#x60; - Do not send any email notification to webinar registrants and panelists.   The default value of this field is &#x60;false&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebinar: async (webinarId: number, occurrenceId?: string, cancelWebinarReminder?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('removeWebinar', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (cancelWebinarReminder !== undefined) {
                localVarQueryParameter['cancel_webinar_reminder'] = cancelWebinarReminder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to set a webinar\'s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set webinar\'s default branding Virtual Background
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [id] The Virtual Background file ID to update.
         * @param {boolean} [setDefaultForAllPanelists] Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultBrandingVirtualBackground: async (webinarId: number, id?: string, setDefaultForAllPanelists?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('setDefaultBrandingVirtualBackground', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/branding/virtual_backgrounds`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (setDefaultForAllPanelists !== undefined) {
                localVarQueryParameter['set_default_for_all_panelists'] = setDefaultForAllPanelists;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/virtual_backgrounds',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to update a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update a webinar\'s branding name tag
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} nameTagId The name tag\&#39;s ID.
         * @param {WebinarsUpdateBrandingNameTagRequest} [webinarsUpdateBrandingNameTagRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrandingNameTag: async (webinarId: number, nameTagId: string, webinarsUpdateBrandingNameTagRequest?: WebinarsUpdateBrandingNameTagRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateBrandingNameTag', 'webinarId', webinarId)
            // verify required parameter 'nameTagId' is not null or undefined
            assertParamExists('updateBrandingNameTag', 'nameTagId', nameTagId)
            const localVarPath = `/webinars/{webinarId}/branding/name_tags/{nameTagId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"nameTagId"}}`, encodeURIComponent(String(nameTagId !== undefined ? nameTagId : `-nameTagId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateBrandingNameTagRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/name_tags/{nameTagId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateBrandingNameTagRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webinar\'s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a live stream
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsUpdateLiveStreamRequest} [webinarsUpdateLiveStreamRequest] Webinar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLiveStream: async (webinarId: number, webinarsUpdateLiveStreamRequest?: WebinarsUpdateLiveStreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateLiveStream', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/livestream`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateLiveStreamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/livestream',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateLiveStreamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar\'s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update live stream status
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsUpdateLiveStreamStatusRequest} [webinarsUpdateLiveStreamStatusRequest] Webinar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLiveStreamStatus: async (webinarId: number, webinarsUpdateLiveStreamStatusRequest?: WebinarsUpdateLiveStreamStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateLiveStreamStatus', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/livestream/status`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateLiveStreamStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/livestream/status',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateLiveStreamStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar poll
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} pollId The poll ID
         * @param {WebinarsUpdatePollRequest} [webinarsUpdatePollRequest] Webinar Poll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoll: async (webinarId: number, pollId: string, webinarsUpdatePollRequest?: WebinarsUpdatePollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updatePoll', 'webinarId', webinarId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('updatePoll', 'pollId', pollId)
            const localVarPath = `/webinars/{webinarId}/polls/{pollId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdatePollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/polls/{pollId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdatePollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update webinar registrants\' registration status. You can approve or deny a registrant, or revoke a registrant\'s approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update registrant\'s status
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {WebinarsUpdateRegistrantStatusRequest} [webinarsUpdateRegistrantStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus: async (webinarId: number, occurrenceId?: string, webinarsUpdateRegistrantStatusRequest?: WebinarsUpdateRegistrantStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateRegistrantStatus', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/registrants/status`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateRegistrantStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateRegistrantStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update registration questions
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsUpdateRegistrationQuestionsRequest} [webinarsUpdateRegistrationQuestionsRequest] Webinar registrant questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions: async (webinarId: number, webinarsUpdateRegistrationQuestionsRequest?: WebinarsUpdateRegistrationQuestionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateRegistrationQuestions', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/registrants/questions`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateRegistrationQuestionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/registrants/questions',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateRegistrationQuestionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {string} [occurrenceId] Webinar occurrence ID. Support change of agenda, start time, duration, and settings &#x60;host_video&#x60;, &#x60;panelist_video&#x60;, &#x60;hd_video, watermark&#x60;, &#x60;auto_recording&#x60;.
         * @param {WebinarsUpdateScheduledWebinarRequest} [webinarsUpdateScheduledWebinarRequest] Webinar.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledWebinar: async (webinarId: number, occurrenceId?: string, webinarsUpdateScheduledWebinarRequest?: WebinarsUpdateScheduledWebinarRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateScheduledWebinar', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateScheduledWebinarRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateScheduledWebinarRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webinar\'s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update webinar status
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsUpdateStatusRequest} [webinarsUpdateStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus: async (webinarId: number, webinarsUpdateStatusRequest?: WebinarsUpdateStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateStatus', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/status`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar survey
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {WebinarsUpdateSurveyRequest} [webinarsUpdateSurveyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurvey: async (webinarId: number, webinarsUpdateSurveyRequest?: WebinarsUpdateSurveyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('updateSurvey', 'webinarId', webinarId)
            const localVarPath = `/webinars/{webinarId}/survey`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: webinarsUpdateSurveyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/survey',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(webinarsUpdateSurveyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to upload a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding Virtual Background
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {Uint8Array | File | buffer.File} file The Virtual Background\\\&#39;s file path, in binary format.
         * @param {boolean} [default] Whether set the file as the default Virtual Background file.
         * @param {boolean} [setDefaultForAllPanelists] Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
         * @param {WebinarsUploadBrandingVirtualBackgroundRequest} [webinarsUploadBrandingVirtualBackgroundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBrandingVirtualBackground: async (webinarId: number, file: Uint8Array | File | buffer.File, default?: boolean, setDefaultForAllPanelists?: boolean, webinarsUploadBrandingVirtualBackgroundRequest?: WebinarsUploadBrandingVirtualBackgroundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('uploadBrandingVirtualBackground', 'webinarId', webinarId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadBrandingVirtualBackground', 'file', file)
            const localVarPath = `/webinars/{webinarId}/branding/virtual_backgrounds`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
            if (default !== undefined) {
                await addFormParam('default', default, false, true)
            }
    
            if (setDefaultForAllPanelists !== undefined) {
                await addFormParam('set_default_for_all_panelists', setDefaultForAllPanelists, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: webinarsUploadBrandingVirtualBackgroundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/virtual_backgrounds',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to upload a webinar\'s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding wallpaper
         * @param {number} webinarId The webinar\&#39;s ID.
         * @param {Uint8Array | File | buffer.File} file The wallpaper\\\&#39;s file path, in binary format.
         * @param {WebinarsUploadBrandingWallpaperRequest} [webinarsUploadBrandingWallpaperRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBrandingWallpaper: async (webinarId: number, file: Uint8Array | File | buffer.File, webinarsUploadBrandingWallpaperRequest?: WebinarsUploadBrandingWallpaperRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('uploadBrandingWallpaper', 'webinarId', webinarId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadBrandingWallpaper', 'file', file)
            const localVarPath = `/webinars/{webinarId}/branding/wallpaper`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["webinar:write", "webinar:write:admin"], configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: webinarsUploadBrandingWallpaperRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/webinars/{webinarId}/branding/wallpaper',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebinarsApi - functional programming interface
 * @export
 */
export const WebinarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebinarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add panelists
         * @param {WebinarsApiAddPanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPanelists(requestParameters: WebinarsApiAddPanelistsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsAddPanelistsResponse>> {
            const webinarsAddPanelistsRequest: WebinarsAddPanelistsRequest = {
                panelists: requestParameters.panelists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPanelists(requestParameters.webinarId, webinarsAddPanelistsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create and submit a user\'s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Add a webinar registrant
         * @param {WebinarsApiAddRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRegistrant(requestParameters: WebinarsApiAddRegistrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsAddRegistrantResponse>> {
            const webinarsAddRegistrantRequest: WebinarsAddRegistrantRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email,
                address: requestParameters.address,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                phone: requestParameters.phone,
                comments: requestParameters.comments,
                custom_questions: requestParameters.custom_questions,
                industry: requestParameters.industry,
                job_title: requestParameters.job_title,
                no_of_employees: requestParameters.no_of_employees,
                org: requestParameters.org,
                purchasing_time_frame: requestParameters.purchasing_time_frame,
                role_in_purchase_process: requestParameters.role_in_purchase_process,
                language: requestParameters.language,
                source_id: requestParameters.source_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRegistrant(requestParameters.webinarId, requestParameters.occurrenceIds, webinarsAddRegistrantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Perform batch registration
         * @param {WebinarsApiCreateBatchRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatchRegistrants(requestParameters: WebinarsApiCreateBatchRegistrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreateBatchRegistrantsResponse>> {
            const webinarsCreateBatchRegistrantsRequest: WebinarsCreateBatchRegistrantsRequest = {
                auto_approve: requestParameters.auto_approve,
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchRegistrants(requestParameters.webinarId, webinarsCreateBatchRegistrantsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to create a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There\'s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar\'s branding name tag
         * @param {WebinarsApiCreateBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBrandingNameTag(requestParameters: WebinarsApiCreateBrandingNameTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreateBrandingNameTagResponse>> {
            const webinarsCreateBrandingNameTagRequest: WebinarsCreateBrandingNameTagRequest = {
                name: requestParameters.name,
                text_color: requestParameters.text_color,
                accent_color: requestParameters.accent_color,
                background_color: requestParameters.background_color,
                is_default: requestParameters.is_default,
                set_default_for_all_panelists: requestParameters.set_default_for_all_panelists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBrandingNameTag(requestParameters.webinarId, webinarsCreateBrandingNameTagRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create webinar\'s invite links
         * @param {WebinarsApiCreateInviteLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInviteLinks(requestParameters: WebinarsApiCreateInviteLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreateInviteLinksResponse>> {
            const webinarsCreateInviteLinksRequest: WebinarsCreateInviteLinksRequest = {
                attendees: requestParameters.attendees,
                ttl: requestParameters.ttl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteLinks(requestParameters.webinarId, webinarsCreateInviteLinksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar\'s poll
         * @param {WebinarsApiCreatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPoll(requestParameters: WebinarsApiCreatePollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreatePollResponse>> {
            const webinarsCreatePollRequest: WebinarsCreatePollRequest = {
                title: requestParameters.title,
                anonymous: requestParameters.anonymous,
                poll_type: requestParameters.poll_type,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPoll(requestParameters.webinarId, webinarsCreatePollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar
         * @param {WebinarsApiCreateWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebinar(requestParameters: WebinarsApiCreateWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreateWebinarResponse>> {
            const webinarsCreateWebinarRequest: WebinarsCreateWebinarRequest = {
                agenda: requestParameters.agenda,
                duration: requestParameters.duration,
                password: requestParameters.password,
                recurrence: requestParameters.recurrence,
                schedule_for: requestParameters.schedule_for,
                settings: requestParameters.settings,
                start_time: requestParameters.start_time,
                template_id: requestParameters.template_id,
                timezone: requestParameters.timezone,
                topic: requestParameters.topic,
                tracking_fields: requestParameters.tracking_fields,
                type: requestParameters.type,
                is_simulive: requestParameters.is_simulive,
                record_file_id: requestParameters.record_file_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebinar(requestParameters.userId, webinarsCreateWebinarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar template
         * @param {WebinarsApiCreateWebinarTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebinarTemplate(requestParameters: WebinarsApiCreateWebinarTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsCreateWebinarTemplateResponse>> {
            const webinarsCreateWebinarTemplateRequest: WebinarsCreateWebinarTemplateRequest = {
                webinar_id: requestParameters.webinar_id,
                name: requestParameters.name,
                save_recurrence: requestParameters.save_recurrence,
                overwrite: requestParameters.overwrite
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebinarTemplate(requestParameters.userId, webinarsCreateWebinarTemplateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding name tag
         * @param {WebinarsApiDeleteBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandingNameTag(requestParameters: WebinarsApiDeleteBrandingNameTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandingNameTag(requestParameters.webinarId, requestParameters.nameTagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding Virtual Backgrounds
         * @param {WebinarsApiDeleteBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandingVirtualBackground(requestParameters: WebinarsApiDeleteBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandingVirtualBackground(requestParameters.webinarId, requestParameters.ids, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete a webinar\'s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding wallpaper
         * @param {WebinarsApiDeleteBrandingWallpaperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBrandingWallpaper(requestParameters: WebinarsApiDeleteBrandingWallpaperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBrandingWallpaper(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live webinar message
         * @param {WebinarsApiDeleteMessageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessageById(requestParameters: WebinarsApiDeleteMessageByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageById(requestParameters.webinarId, requestParameters.messageId, requestParameters.fileIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar poll
         * @param {WebinarsApiDeletePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePoll(requestParameters: WebinarsApiDeletePollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePoll(requestParameters.webinarId, requestParameters.pollId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a webinar registrant.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar registrant
         * @param {WebinarsApiDeleteRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegistrant(requestParameters: WebinarsApiDeleteRegistrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistrant(requestParameters.webinarId, requestParameters.registrantId, requestParameters.occurrenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar survey
         * @param {WebinarsApiDeleteSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSurvey(requestParameters: WebinarsApiDeleteSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSurvey(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar
         * @param {WebinarsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: WebinarsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.webinarId, requestParameters.occurrenceId, requestParameters.showPreviousOccurrences, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get a webinar\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for local recording
         * @param {WebinarsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJoinTokenLocalRecording(requestParameters: WebinarsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetJoinTokenLocalRecordingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJoinTokenLocalRecording(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a webinar\'s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get live stream details
         * @param {WebinarsApiGetLiveStreamDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLiveStreamDetails(requestParameters: WebinarsApiGetLiveStreamDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetLiveStreamDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLiveStreamDetails(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get a webinar\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar\'s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s archive token for local archiving
         * @param {WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingArchiveTokenForLocalArchiving(requestParameters: WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingArchiveTokenForLocalArchiving(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar poll
         * @param {WebinarsApiGetPollDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPollDetails(requestParameters: WebinarsApiGetPollDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetPollDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPollDetails(requestParameters.webinarId, requestParameters.pollId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get the webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s session branding
         * @param {WebinarsApiGetSessionBrandingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSessionBranding(requestParameters: WebinarsApiGetSessionBrandingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetSessionBrandingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionBranding(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a webinar\'s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** `webinar:write:admin:sip_dialing`,`webinar:write:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar SIP URI with Passcode
         * @param {WebinarsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSipUriWithPasscode(requestParameters: WebinarsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetSipUriWithPasscodeResponse>> {
            const webinarsGetSipUriWithPasscodeRequest: WebinarsGetSipUriWithPasscodeRequest = {
                passcode: requestParameters.passcode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSipUriWithPasscode(requestParameters.webinarId, webinarsGetSipUriWithPasscodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar survey
         * @param {WebinarsApiGetSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSurvey(requestParameters: WebinarsApiGetSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetSurveyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSurvey(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get a webinar\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s token
         * @param {WebinarsApiGetWebinarTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarToken(requestParameters: WebinarsApiGetWebinarTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsGetWebinarTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebinarToken(requestParameters.webinarId, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get a webinar\'s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for live streaming
         * @param {WebinarsApiJoinTokenLiveStreamingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinTokenLiveStreaming(requestParameters: WebinarsApiJoinTokenLiveStreamingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsJoinTokenLiveStreamingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinTokenLiveStreaming(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List absentees of a webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar absentees
         * @param {WebinarsApiListAbsenteesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAbsentees(requestParameters: WebinarsApiListAbsenteesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListAbsenteesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAbsentees(requestParameters.webinarId, requestParameters.occurrenceId, requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all of a webinar\'s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List panelists
         * @param {WebinarsApiListPanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPanelists(requestParameters: WebinarsApiListPanelistsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListPanelistsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPanelists(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar participants
         * @param {WebinarsApiListParticipantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listParticipants(requestParameters: WebinarsApiListParticipantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListParticipantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listParticipants(requestParameters.webinarId, requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List past webinar instances.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List past webinar instances
         * @param {WebinarsApiListPastInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPastInstances(requestParameters: WebinarsApiListPastInstancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListPastInstancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPastInstances(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List Q&As of a past webinar
         * @param {WebinarsApiListPastWebinarQaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPastWebinarQa(requestParameters: WebinarsApiListPastWebinarQaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListPastWebinarQaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPastWebinarQa(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List past webinar poll results
         * @param {WebinarsApiListPollResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPollResults(requestParameters: WebinarsApiListPollResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListPollResultsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPollResults(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List a webinar\'s polls 
         * @param {WebinarsApiListPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPolls(requestParameters: WebinarsApiListPollsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListPollsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPolls(requestParameters.webinarId, requestParameters.anonymous, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar registrants
         * @param {WebinarsApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrants(requestParameters: WebinarsApiListRegistrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListRegistrantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrants(requestParameters.webinarId, requestParameters.occurrenceId, requestParameters.status, requestParameters.trackingSourceId, requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List registration questions
         * @param {WebinarsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrationQuestions(requestParameters: WebinarsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListRegistrationQuestionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrationQuestions(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get webinar tracking sources
         * @param {WebinarsApiListTrackingSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrackingSources(requestParameters: WebinarsApiListTrackingSourcesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListTrackingSourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrackingSources(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Display a list of a user\'s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://developers.zoom.us) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`
         * @summary List webinar templates
         * @param {WebinarsApiListWebinarTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebinarTemplates(requestParameters: WebinarsApiListWebinarTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListWebinarTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebinarTemplates(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user\'s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinars
         * @param {WebinarsApiListWebinarsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebinars(requestParameters: WebinarsApiListWebinarsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsListWebinarsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebinars(requestParameters.userId, requestParameters.type, requestParameters.pageSize, requestParameters.pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar registrant
         * @param {WebinarsApiRegistrantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registrantDetails(requestParameters: WebinarsApiRegistrantDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsRegistrantDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registrantDetails(requestParameters.webinarId, requestParameters.registrantId, requestParameters.occurrenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove a panelist
         * @param {WebinarsApiRemovePanelistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePanelist(requestParameters: WebinarsApiRemovePanelistRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePanelist(requestParameters.webinarId, requestParameters.panelistId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove webinar panelists
         * @param {WebinarsApiRemovePanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removePanelists(requestParameters: WebinarsApiRemovePanelistsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removePanelists(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar
         * @param {WebinarsApiRemoveWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeWebinar(requestParameters: WebinarsApiRemoveWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeWebinar(requestParameters.webinarId, requestParameters.occurrenceId, requestParameters.cancelWebinarReminder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to set a webinar\'s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set webinar\'s default branding Virtual Background
         * @param {WebinarsApiSetDefaultBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setDefaultBrandingVirtualBackground(requestParameters: WebinarsApiSetDefaultBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultBrandingVirtualBackground(requestParameters.webinarId, requestParameters.id, requestParameters.setDefaultForAllPanelists, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to update a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update a webinar\'s branding name tag
         * @param {WebinarsApiUpdateBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBrandingNameTag(requestParameters: WebinarsApiUpdateBrandingNameTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateBrandingNameTagRequest: WebinarsUpdateBrandingNameTagRequest = {
                name: requestParameters.name,
                text_color: requestParameters.text_color,
                accent_color: requestParameters.accent_color,
                background_color: requestParameters.background_color,
                is_default: requestParameters.is_default,
                set_default_for_all_panelists: requestParameters.set_default_for_all_panelists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBrandingNameTag(requestParameters.webinarId, requestParameters.nameTagId, webinarsUpdateBrandingNameTagRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a webinar\'s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a live stream
         * @param {WebinarsApiUpdateLiveStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLiveStream(requestParameters: WebinarsApiUpdateLiveStreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateLiveStreamRequest: WebinarsUpdateLiveStreamRequest = {
                page_url: requestParameters.page_url,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                resolution: requestParameters.resolution
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLiveStream(requestParameters.webinarId, webinarsUpdateLiveStreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar\'s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update live stream status
         * @param {WebinarsApiUpdateLiveStreamStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLiveStreamStatus(requestParameters: WebinarsApiUpdateLiveStreamStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateLiveStreamStatusRequest: WebinarsUpdateLiveStreamStatusRequest = {
                action: requestParameters.action,
                settings: requestParameters.settings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLiveStreamStatus(requestParameters.webinarId, webinarsUpdateLiveStreamStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar poll
         * @param {WebinarsApiUpdatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePoll(requestParameters: WebinarsApiUpdatePollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdatePollRequest: WebinarsUpdatePollRequest = {
                title: requestParameters.title,
                anonymous: requestParameters.anonymous,
                poll_type: requestParameters.poll_type,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePoll(requestParameters.webinarId, requestParameters.pollId, webinarsUpdatePollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update webinar registrants\' registration status. You can approve or deny a registrant, or revoke a registrant\'s approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update registrant\'s status
         * @param {WebinarsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrantStatus(requestParameters: WebinarsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateRegistrantStatusRequest: WebinarsUpdateRegistrantStatusRequest = {
                action: requestParameters.action,
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrantStatus(requestParameters.webinarId, requestParameters.occurrenceId, webinarsUpdateRegistrantStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update registration questions
         * @param {WebinarsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrationQuestions(requestParameters: WebinarsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateRegistrationQuestionsRequest: WebinarsUpdateRegistrationQuestionsRequest = {
                custom_questions: requestParameters.custom_questions,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrationQuestions(requestParameters.webinarId, webinarsUpdateRegistrationQuestionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar
         * @param {WebinarsApiUpdateScheduledWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduledWebinar(requestParameters: WebinarsApiUpdateScheduledWebinarRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateScheduledWebinarRequest: WebinarsUpdateScheduledWebinarRequest = {
                agenda: requestParameters.agenda,
                duration: requestParameters.duration,
                password: requestParameters.password,
                schedule_for: requestParameters.schedule_for,
                recurrence: requestParameters.recurrence,
                settings: requestParameters.settings,
                start_time: requestParameters.start_time,
                timezone: requestParameters.timezone,
                topic: requestParameters.topic,
                tracking_fields: requestParameters.tracking_fields,
                type: requestParameters.type,
                is_simulive: requestParameters.is_simulive,
                record_file_id: requestParameters.record_file_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduledWebinar(requestParameters.webinarId, requestParameters.occurrenceId, webinarsUpdateScheduledWebinarRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a webinar\'s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update webinar status
         * @param {WebinarsApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStatus(requestParameters: WebinarsApiUpdateStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const webinarsUpdateStatusRequest: WebinarsUpdateStatusRequest = {
                action: requestParameters.action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateStatus(requestParameters.webinarId, webinarsUpdateStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar survey
         * @param {WebinarsApiUpdateSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSurvey(requestParameters: WebinarsApiUpdateSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const webinarsUpdateSurveyRequest: WebinarsUpdateSurveyRequest = {
                custom_survey: requestParameters.custom_survey,
                show_in_the_browser: requestParameters.show_in_the_browser,
                show_in_the_follow_up_email: requestParameters.show_in_the_follow_up_email,
                third_party_survey: requestParameters.third_party_survey
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSurvey(requestParameters.webinarId, webinarsUpdateSurveyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to upload a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding Virtual Background
         * @param {WebinarsApiUploadBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBrandingVirtualBackground(requestParameters: WebinarsApiUploadBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsUploadBrandingVirtualBackgroundResponse>> {
            const webinarsUploadBrandingVirtualBackgroundRequest: WebinarsUploadBrandingVirtualBackgroundRequest = {
                file: requestParameters.file,
                default: requestParameters.default,
                set_default_for_all_panelists: requestParameters.set_default_for_all_panelists
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBrandingVirtualBackground(requestParameters.webinarId, requestParameters.file, requestParameters.default, requestParameters.setDefaultForAllPanelists, webinarsUploadBrandingVirtualBackgroundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to upload a webinar\'s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding wallpaper
         * @param {WebinarsApiUploadBrandingWallpaperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBrandingWallpaper(requestParameters: WebinarsApiUploadBrandingWallpaperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebinarsUploadBrandingWallpaperResponse>> {
            const webinarsUploadBrandingWallpaperRequest: WebinarsUploadBrandingWallpaperRequest = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBrandingWallpaper(requestParameters.webinarId, requestParameters.file, webinarsUploadBrandingWallpaperRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebinarsApi - factory interface
 * @export
 */
export const WebinarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebinarsApiFp(configuration)
    return {
        /**
         * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Add panelists
         * @param {WebinarsApiAddPanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPanelists(requestParameters: WebinarsApiAddPanelistsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsAddPanelistsResponse> {
            return localVarFp.addPanelists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create and submit a user\'s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Add a webinar registrant
         * @param {WebinarsApiAddRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegistrant(requestParameters: WebinarsApiAddRegistrantRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsAddRegistrantResponse> {
            return localVarFp.addRegistrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Perform batch registration
         * @param {WebinarsApiCreateBatchRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchRegistrants(requestParameters: WebinarsApiCreateBatchRegistrantsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreateBatchRegistrantsResponse> {
            return localVarFp.createBatchRegistrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to create a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There\'s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar\'s branding name tag
         * @param {WebinarsApiCreateBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBrandingNameTag(requestParameters: WebinarsApiCreateBrandingNameTagRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreateBrandingNameTagResponse> {
            return localVarFp.createBrandingNameTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create webinar\'s invite links
         * @param {WebinarsApiCreateInviteLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInviteLinks(requestParameters: WebinarsApiCreateInviteLinksRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreateInviteLinksResponse> {
            return localVarFp.createInviteLinks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar\'s poll
         * @param {WebinarsApiCreatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoll(requestParameters: WebinarsApiCreatePollRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreatePollResponse> {
            return localVarFp.createPoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Create a webinar
         * @param {WebinarsApiCreateWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinar(requestParameters: WebinarsApiCreateWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreateWebinarResponse> {
            return localVarFp.createWebinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a webinar template
         * @param {WebinarsApiCreateWebinarTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebinarTemplate(requestParameters: WebinarsApiCreateWebinarTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsCreateWebinarTemplateResponse> {
            return localVarFp.createWebinarTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding name tag
         * @param {WebinarsApiDeleteBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingNameTag(requestParameters: WebinarsApiDeleteBrandingNameTagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBrandingNameTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding Virtual Backgrounds
         * @param {WebinarsApiDeleteBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingVirtualBackground(requestParameters: WebinarsApiDeleteBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBrandingVirtualBackground(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete a webinar\'s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a webinar\'s branding wallpaper
         * @param {WebinarsApiDeleteBrandingWallpaperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBrandingWallpaper(requestParameters: WebinarsApiDeleteBrandingWallpaperRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteBrandingWallpaper(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live webinar message
         * @param {WebinarsApiDeleteMessageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageById(requestParameters: WebinarsApiDeleteMessageByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMessageById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar poll
         * @param {WebinarsApiDeletePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePoll(requestParameters: WebinarsApiDeletePollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deletePoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a webinar registrant.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar registrant
         * @param {WebinarsApiDeleteRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrant(requestParameters: WebinarsApiDeleteRegistrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRegistrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar survey
         * @param {WebinarsApiDeleteSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSurvey(requestParameters: WebinarsApiDeleteSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar
         * @param {WebinarsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: WebinarsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a webinar\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for local recording
         * @param {WebinarsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinTokenLocalRecording(requestParameters: WebinarsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetJoinTokenLocalRecordingResponse> {
            return localVarFp.getJoinTokenLocalRecording(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a webinar\'s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get live stream details
         * @param {WebinarsApiGetLiveStreamDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveStreamDetails(requestParameters: WebinarsApiGetLiveStreamDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetLiveStreamDetailsResponse> {
            return localVarFp.getLiveStreamDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a webinar\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar\'s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s archive token for local archiving
         * @param {WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingArchiveTokenForLocalArchiving(requestParameters: WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetMeetingArchiveTokenForLocalArchivingResponse> {
            return localVarFp.getMeetingArchiveTokenForLocalArchiving(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar poll
         * @param {WebinarsApiGetPollDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPollDetails(requestParameters: WebinarsApiGetPollDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetPollDetailsResponse> {
            return localVarFp.getPollDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get the webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s session branding
         * @param {WebinarsApiGetSessionBrandingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSessionBranding(requestParameters: WebinarsApiGetSessionBrandingRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetSessionBrandingResponse> {
            return localVarFp.getSessionBranding(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a webinar\'s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** `webinar:write:admin:sip_dialing`,`webinar:write:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar SIP URI with Passcode
         * @param {WebinarsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSipUriWithPasscode(requestParameters: WebinarsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetSipUriWithPasscodeResponse> {
            return localVarFp.getSipUriWithPasscode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar survey
         * @param {WebinarsApiGetSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSurvey(requestParameters: WebinarsApiGetSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetSurveyResponse> {
            return localVarFp.getSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a webinar\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get webinar\'s token
         * @param {WebinarsApiGetWebinarTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarToken(requestParameters: WebinarsApiGetWebinarTokenRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsGetWebinarTokenResponse> {
            return localVarFp.getWebinarToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a webinar\'s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a webinar\'s join token for live streaming
         * @param {WebinarsApiJoinTokenLiveStreamingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinTokenLiveStreaming(requestParameters: WebinarsApiJoinTokenLiveStreamingRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsJoinTokenLiveStreamingResponse> {
            return localVarFp.joinTokenLiveStreaming(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List absentees of a webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar absentees
         * @param {WebinarsApiListAbsenteesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAbsentees(requestParameters: WebinarsApiListAbsenteesRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListAbsenteesResponse> {
            return localVarFp.listAbsentees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all of a webinar\'s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List panelists
         * @param {WebinarsApiListPanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPanelists(requestParameters: WebinarsApiListPanelistsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListPanelistsResponse> {
            return localVarFp.listPanelists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar participants
         * @param {WebinarsApiListParticipantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listParticipants(requestParameters: WebinarsApiListParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListParticipantsResponse> {
            return localVarFp.listParticipants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List past webinar instances.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List past webinar instances
         * @param {WebinarsApiListPastInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastInstances(requestParameters: WebinarsApiListPastInstancesRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListPastInstancesResponse> {
            return localVarFp.listPastInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List Q&As of a past webinar
         * @param {WebinarsApiListPastWebinarQaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastWebinarQa(requestParameters: WebinarsApiListPastWebinarQaRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListPastWebinarQaResponse> {
            return localVarFp.listPastWebinarQa(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List past webinar poll results
         * @param {WebinarsApiListPollResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPollResults(requestParameters: WebinarsApiListPollResultsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListPollResultsResponse> {
            return localVarFp.listPollResults(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List a webinar\'s polls 
         * @param {WebinarsApiListPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolls(requestParameters: WebinarsApiListPollsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListPollsResponse> {
            return localVarFp.listPolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinar registrants
         * @param {WebinarsApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants(requestParameters: WebinarsApiListRegistrantsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListRegistrantsResponse> {
            return localVarFp.listRegistrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary List registration questions
         * @param {WebinarsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions(requestParameters: WebinarsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListRegistrationQuestionsResponse> {
            return localVarFp.listRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get webinar tracking sources
         * @param {WebinarsApiListTrackingSourcesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrackingSources(requestParameters: WebinarsApiListTrackingSourcesRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListTrackingSourcesResponse> {
            return localVarFp.listTrackingSources(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Display a list of a user\'s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://developers.zoom.us) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`
         * @summary List webinar templates
         * @param {WebinarsApiListWebinarTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinarTemplates(requestParameters: WebinarsApiListWebinarTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListWebinarTemplatesResponse> {
            return localVarFp.listWebinarTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user\'s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List webinars
         * @param {WebinarsApiListWebinarsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebinars(requestParameters: WebinarsApiListWebinarsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsListWebinarsResponse> {
            return localVarFp.listWebinars(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a webinar registrant
         * @param {WebinarsApiRegistrantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registrantDetails(requestParameters: WebinarsApiRegistrantDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsRegistrantDetailsResponse> {
            return localVarFp.registrantDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove a panelist
         * @param {WebinarsApiRemovePanelistRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePanelist(requestParameters: WebinarsApiRemovePanelistRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePanelist(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Remove webinar panelists
         * @param {WebinarsApiRemovePanelistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removePanelists(requestParameters: WebinarsApiRemovePanelistsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removePanelists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Delete a webinar
         * @param {WebinarsApiRemoveWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeWebinar(requestParameters: WebinarsApiRemoveWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeWebinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to set a webinar\'s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Set webinar\'s default branding Virtual Background
         * @param {WebinarsApiSetDefaultBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setDefaultBrandingVirtualBackground(requestParameters: WebinarsApiSetDefaultBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setDefaultBrandingVirtualBackground(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to update a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update a webinar\'s branding name tag
         * @param {WebinarsApiUpdateBrandingNameTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBrandingNameTag(requestParameters: WebinarsApiUpdateBrandingNameTagRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateBrandingNameTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a webinar\'s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a live stream
         * @param {WebinarsApiUpdateLiveStreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLiveStream(requestParameters: WebinarsApiUpdateLiveStreamRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLiveStream(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar\'s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update live stream status
         * @param {WebinarsApiUpdateLiveStreamStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLiveStreamStatus(requestParameters: WebinarsApiUpdateLiveStreamStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLiveStreamStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar poll
         * @param {WebinarsApiUpdatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePoll(requestParameters: WebinarsApiUpdatePollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update webinar registrants\' registration status. You can approve or deny a registrant, or revoke a registrant\'s approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update registrant\'s status
         * @param {WebinarsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus(requestParameters: WebinarsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrantStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update registration questions
         * @param {WebinarsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions(requestParameters: WebinarsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar
         * @param {WebinarsApiUpdateScheduledWebinarRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledWebinar(requestParameters: WebinarsApiUpdateScheduledWebinarRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateScheduledWebinar(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a webinar\'s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update webinar status
         * @param {WebinarsApiUpdateStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStatus(requestParameters: WebinarsApiUpdateStatusRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a webinar survey
         * @param {WebinarsApiUpdateSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurvey(requestParameters: WebinarsApiUpdateSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to upload a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding Virtual Background
         * @param {WebinarsApiUploadBrandingVirtualBackgroundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBrandingVirtualBackground(requestParameters: WebinarsApiUploadBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsUploadBrandingVirtualBackgroundResponse> {
            return localVarFp.uploadBrandingVirtualBackground(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to upload a webinar\'s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Upload a webinar\'s branding wallpaper
         * @param {WebinarsApiUploadBrandingWallpaperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBrandingWallpaper(requestParameters: WebinarsApiUploadBrandingWallpaperRequest, options?: AxiosRequestConfig): AxiosPromise<WebinarsUploadBrandingWallpaperResponse> {
            return localVarFp.uploadBrandingWallpaper(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addPanelists operation in WebinarsApi.
 * @export
 * @interface WebinarsApiAddPanelistsRequest
 */
export type WebinarsApiAddPanelistsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiAddPanelists
    */
    readonly webinarId: number
    
} & WebinarsAddPanelistsRequest

/**
 * Request parameters for addRegistrant operation in WebinarsApi.
 * @export
 * @interface WebinarsApiAddRegistrantRequest
 */
export type WebinarsApiAddRegistrantRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiAddRegistrant
    */
    readonly webinarId: number
    
    /**
    * A comma-separated list of webinar occurrence IDs. Get this value with the [Get a webinar](https://developers.zoom.us) API. Make sure the `registration_type` is 3 if updating multiple occurrences with this API.
    * @type {string}
    * @memberof WebinarsApiAddRegistrant
    */
    readonly occurrenceIds?: string
    
} & WebinarsAddRegistrantRequest

/**
 * Request parameters for createBatchRegistrants operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreateBatchRegistrantsRequest
 */
export type WebinarsApiCreateBatchRegistrantsRequest = {
    
    /**
    * The webinar\'s unique identifier.
    * @type {string}
    * @memberof WebinarsApiCreateBatchRegistrants
    */
    readonly webinarId: string
    
} & WebinarsCreateBatchRegistrantsRequest

/**
 * Request parameters for createBrandingNameTag operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreateBrandingNameTagRequest
 */
export type WebinarsApiCreateBrandingNameTagRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiCreateBrandingNameTag
    */
    readonly webinarId: number
    
} & WebinarsCreateBrandingNameTagRequest

/**
 * Request parameters for createInviteLinks operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreateInviteLinksRequest
 */
export type WebinarsApiCreateInviteLinksRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiCreateInviteLinks
    */
    readonly webinarId: number
    
} & WebinarsCreateInviteLinksRequest

/**
 * Request parameters for createPoll operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreatePollRequest
 */
export type WebinarsApiCreatePollRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiCreatePoll
    */
    readonly webinarId: number
    
} & WebinarsCreatePollRequest

/**
 * Request parameters for createWebinar operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreateWebinarRequest
 */
export type WebinarsApiCreateWebinarRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {string}
    * @memberof WebinarsApiCreateWebinar
    */
    readonly userId: string
    
} & WebinarsCreateWebinarRequest

/**
 * Request parameters for createWebinarTemplate operation in WebinarsApi.
 * @export
 * @interface WebinarsApiCreateWebinarTemplateRequest
 */
export type WebinarsApiCreateWebinarTemplateRequest = {
    
    /**
    * The user ID retrievable from the [List users](https://developers.zoom.us) API.
    * @type {string}
    * @memberof WebinarsApiCreateWebinarTemplate
    */
    readonly userId: string
    
} & WebinarsCreateWebinarTemplateRequest

/**
 * Request parameters for deleteBrandingNameTag operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteBrandingNameTagRequest
 */
export type WebinarsApiDeleteBrandingNameTagRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeleteBrandingNameTag
    */
    readonly webinarId: number
    
    /**
    * A comma-separated list of the name tag IDs to delete.
    * @type {string}
    * @memberof WebinarsApiDeleteBrandingNameTag
    */
    readonly nameTagIds?: string
    
}

/**
 * Request parameters for deleteBrandingVirtualBackground operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteBrandingVirtualBackgroundRequest
 */
export type WebinarsApiDeleteBrandingVirtualBackgroundRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeleteBrandingVirtualBackground
    */
    readonly webinarId: number
    
    /**
    * A comma-separated list of the Virtual Background file IDs to delete.
    * @type {string}
    * @memberof WebinarsApiDeleteBrandingVirtualBackground
    */
    readonly ids?: string
    
}

/**
 * Request parameters for deleteBrandingWallpaper operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteBrandingWallpaperRequest
 */
export type WebinarsApiDeleteBrandingWallpaperRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeleteBrandingWallpaper
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for deleteMessageById operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteMessageByIdRequest
 */
export type WebinarsApiDeleteMessageByIdRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeleteMessageById
    */
    readonly webinarId: number
    
    /**
    * The live webinar chat message\'s unique identifier (UUID), in base64-encoded format.
    * @type {string}
    * @memberof WebinarsApiDeleteMessageById
    */
    readonly messageId: string
    
    /**
    * The live webinar chat file\'s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
    * @type {string}
    * @memberof WebinarsApiDeleteMessageById
    */
    readonly fileIds?: string
    
}

/**
 * Request parameters for deletePoll operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeletePollRequest
 */
export type WebinarsApiDeletePollRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeletePoll
    */
    readonly webinarId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof WebinarsApiDeletePoll
    */
    readonly pollId: string
    
}

/**
 * Request parameters for deleteRegistrant operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteRegistrantRequest
 */
export type WebinarsApiDeleteRegistrantRequest = {
    
    /**
    * The webinar ID.
    * @type {number}
    * @memberof WebinarsApiDeleteRegistrant
    */
    readonly webinarId: number
    
    /**
    * The registrant ID.
    * @type {string}
    * @memberof WebinarsApiDeleteRegistrant
    */
    readonly registrantId: string
    
    /**
    * The webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiDeleteRegistrant
    */
    readonly occurrenceId?: string
    
}

/**
 * Request parameters for deleteSurvey operation in WebinarsApi.
 * @export
 * @interface WebinarsApiDeleteSurveyRequest
 */
export type WebinarsApiDeleteSurveyRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiDeleteSurvey
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for getDetails operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetDetailsRequest
 */
export type WebinarsApiGetDetailsRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).
    * @type {string}
    * @memberof WebinarsApiGetDetails
    */
    readonly webinarId: string
    
    /**
    * Unique identifier for an occurrence of a recurring webinar. [Recurring webinars](https://support.zoom.us/hc/en-us/articles/216354763-How-to-Schedule-A-Recurring-Webinar) can have a maximum of 50 occurrences. When you create a recurring Webinar using [**Create a webinar**](https://developers.zoom.us) API, you can retrieve the Occurrence ID from the response of the API call.
    * @type {string}
    * @memberof WebinarsApiGetDetails
    */
    readonly occurrenceId?: string
    
    /**
    * Set the value of this field to `true` if you would like to view Webinar details of all previous occurrences of a recurring Webinar.
    * @type {boolean}
    * @memberof WebinarsApiGetDetails
    */
    readonly showPreviousOccurrences?: boolean
    
}

/**
 * Request parameters for getJoinTokenLocalRecording operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetJoinTokenLocalRecordingRequest
 */
export type WebinarsApiGetJoinTokenLocalRecordingRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetJoinTokenLocalRecording
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for getLiveStreamDetails operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetLiveStreamDetailsRequest
 */
export type WebinarsApiGetLiveStreamDetailsRequest = {
    
    /**
    * The webinar\'s unique ID.
    * @type {string}
    * @memberof WebinarsApiGetLiveStreamDetails
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getMeetingArchiveTokenForLocalArchiving operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest
 */
export type WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetMeetingArchiveTokenForLocalArchiving
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for getPollDetails operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetPollDetailsRequest
 */
export type WebinarsApiGetPollDetailsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetPollDetails
    */
    readonly webinarId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof WebinarsApiGetPollDetails
    */
    readonly pollId: string
    
}

/**
 * Request parameters for getSessionBranding operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetSessionBrandingRequest
 */
export type WebinarsApiGetSessionBrandingRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetSessionBranding
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for getSipUriWithPasscode operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetSipUriWithPasscodeRequest
 */
export type WebinarsApiGetSipUriWithPasscodeRequest = {
    
    /**
    * The webinar\'s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Webinar IDs can exceed 10 digits.
    * @type {number}
    * @memberof WebinarsApiGetSipUriWithPasscode
    */
    readonly webinarId: number
    
} & WebinarsGetSipUriWithPasscodeRequest

/**
 * Request parameters for getSurvey operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetSurveyRequest
 */
export type WebinarsApiGetSurveyRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetSurvey
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for getWebinarToken operation in WebinarsApi.
 * @export
 * @interface WebinarsApiGetWebinarTokenRequest
 */
export type WebinarsApiGetWebinarTokenRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiGetWebinarToken
    */
    readonly webinarId: number
    
    /**
    * The webinar token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
    * @type {'closed_caption_token'}
    * @memberof WebinarsApiGetWebinarToken
    */
    readonly type?: 'closed_caption_token'
    
}

/**
 * Request parameters for joinTokenLiveStreaming operation in WebinarsApi.
 * @export
 * @interface WebinarsApiJoinTokenLiveStreamingRequest
 */
export type WebinarsApiJoinTokenLiveStreamingRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiJoinTokenLiveStreaming
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for listAbsentees operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListAbsenteesRequest
 */
export type WebinarsApiListAbsenteesRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    * @type {string}
    * @memberof WebinarsApiListAbsentees
    */
    readonly webinarId: string
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiListAbsentees
    */
    readonly occurrenceId?: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof WebinarsApiListAbsentees
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof WebinarsApiListAbsentees
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listPanelists operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListPanelistsRequest
 */
export type WebinarsApiListPanelistsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListPanelists
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for listParticipants operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListParticipantsRequest
 */
export type WebinarsApiListParticipantsRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    * @type {string}
    * @memberof WebinarsApiListParticipants
    */
    readonly webinarId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof WebinarsApiListParticipants
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof WebinarsApiListParticipants
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listPastInstances operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListPastInstancesRequest
 */
export type WebinarsApiListPastInstancesRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListPastInstances
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for listPastWebinarQa operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListPastWebinarQaRequest
 */
export type WebinarsApiListPastWebinarQaRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    * @type {string}
    * @memberof WebinarsApiListPastWebinarQa
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for listPollResults operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListPollResultsRequest
 */
export type WebinarsApiListPollResultsRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    * @type {string}
    * @memberof WebinarsApiListPollResults
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for listPolls operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListPollsRequest
 */
export type WebinarsApiListPollsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListPolls
    */
    readonly webinarId: number
    
    /**
    * Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
    * @type {boolean}
    * @memberof WebinarsApiListPolls
    */
    readonly anonymous?: boolean
    
}

/**
 * Request parameters for listRegistrants operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListRegistrantsRequest
 */
export type WebinarsApiListRegistrantsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListRegistrants
    */
    readonly webinarId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiListRegistrants
    */
    readonly occurrenceId?: string
    
    /**
    * Query by the registrant\'s status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
    * @type {'pending' | 'approved' | 'denied'}
    * @memberof WebinarsApiListRegistrants
    */
    readonly status?: 'pending' | 'approved' | 'denied'
    
    /**
    * The tracking source ID for the registrants. Useful if you share the webinar registration page in multiple locations. See [Creating source tracking links for webinar registration](https://support.zoom.us/hc/en-us/articles/360000315683-Creating-source-tracking-links-for-webinar-registration) for details.
    * @type {string}
    * @memberof WebinarsApiListRegistrants
    */
    readonly trackingSourceId?: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof WebinarsApiListRegistrants
    */
    readonly pageSize?: number
    
    /**
    * **Deprecated** This field will be deprecated. We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    * @type {number}
    * @memberof WebinarsApiListRegistrants
    */
    readonly pageNumber?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof WebinarsApiListRegistrants
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listRegistrationQuestions operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListRegistrationQuestionsRequest
 */
export type WebinarsApiListRegistrationQuestionsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListRegistrationQuestions
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for listTrackingSources operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListTrackingSourcesRequest
 */
export type WebinarsApiListTrackingSourcesRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiListTrackingSources
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for listWebinarTemplates operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListWebinarTemplatesRequest
 */
export type WebinarsApiListWebinarTemplatesRequest = {
    
    /**
    * The user\'s ID. To get a user\'s ID, use the [**List users**](https://developers.zoom.us) API. For user-level apps, pass the `me` value instead of the user ID value.
    * @type {string}
    * @memberof WebinarsApiListWebinarTemplates
    */
    readonly userId: string
    
}

/**
 * Request parameters for listWebinars operation in WebinarsApi.
 * @export
 * @interface WebinarsApiListWebinarsRequest
 */
export type WebinarsApiListWebinarsRequest = {
    
    /**
    * The user\'s user ID or email address. For user-level apps, pass the `me` value.
    * @type {string}
    * @memberof WebinarsApiListWebinars
    */
    readonly userId: string
    
    /**
    * The type of webinar.  * `scheduled` - All valid previous (unexpired) webinars, live webinars, and upcoming scheduled webinars.  * `upcoming` - All upcoming webinars, including live webinars.
    * @type {'scheduled' | 'upcoming'}
    * @memberof WebinarsApiListWebinars
    */
    readonly type?: 'scheduled' | 'upcoming'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof WebinarsApiListWebinars
    */
    readonly pageSize?: number
    
    /**
    * **Deprecated** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    * @type {number}
    * @memberof WebinarsApiListWebinars
    */
    readonly pageNumber?: number
    
}

/**
 * Request parameters for registrantDetails operation in WebinarsApi.
 * @export
 * @interface WebinarsApiRegistrantDetailsRequest
 */
export type WebinarsApiRegistrantDetailsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiRegistrantDetails
    */
    readonly webinarId: number
    
    /**
    * The registrant ID.
    * @type {string}
    * @memberof WebinarsApiRegistrantDetails
    */
    readonly registrantId: string
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiRegistrantDetails
    */
    readonly occurrenceId?: string
    
}

/**
 * Request parameters for removePanelist operation in WebinarsApi.
 * @export
 * @interface WebinarsApiRemovePanelistRequest
 */
export type WebinarsApiRemovePanelistRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiRemovePanelist
    */
    readonly webinarId: number
    
    /**
    * The panelist\'s ID or email.
    * @type {string}
    * @memberof WebinarsApiRemovePanelist
    */
    readonly panelistId: string
    
}

/**
 * Request parameters for removePanelists operation in WebinarsApi.
 * @export
 * @interface WebinarsApiRemovePanelistsRequest
 */
export type WebinarsApiRemovePanelistsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiRemovePanelists
    */
    readonly webinarId: number
    
}

/**
 * Request parameters for removeWebinar operation in WebinarsApi.
 * @export
 * @interface WebinarsApiRemoveWebinarRequest
 */
export type WebinarsApiRemoveWebinarRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiRemoveWebinar
    */
    readonly webinarId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiRemoveWebinar
    */
    readonly occurrenceId?: string
    
    /**
    * `true` - Notify panelists and registrants about the webinar cancellation via email.   `false` - Do not send any email notification to webinar registrants and panelists.   The default value of this field is `false`.
    * @type {boolean}
    * @memberof WebinarsApiRemoveWebinar
    */
    readonly cancelWebinarReminder?: boolean
    
}

/**
 * Request parameters for setDefaultBrandingVirtualBackground operation in WebinarsApi.
 * @export
 * @interface WebinarsApiSetDefaultBrandingVirtualBackgroundRequest
 */
export type WebinarsApiSetDefaultBrandingVirtualBackgroundRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiSetDefaultBrandingVirtualBackground
    */
    readonly webinarId: number
    
    /**
    * The Virtual Background file ID to update.
    * @type {string}
    * @memberof WebinarsApiSetDefaultBrandingVirtualBackground
    */
    readonly id?: string
    
    /**
    * Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
    * @type {boolean}
    * @memberof WebinarsApiSetDefaultBrandingVirtualBackground
    */
    readonly setDefaultForAllPanelists?: boolean
    
}

/**
 * Request parameters for updateBrandingNameTag operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateBrandingNameTagRequest
 */
export type WebinarsApiUpdateBrandingNameTagRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateBrandingNameTag
    */
    readonly webinarId: number
    
    /**
    * The name tag\'s ID.
    * @type {string}
    * @memberof WebinarsApiUpdateBrandingNameTag
    */
    readonly nameTagId: string
    
} & WebinarsUpdateBrandingNameTagRequest

/**
 * Request parameters for updateLiveStream operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateLiveStreamRequest
 */
export type WebinarsApiUpdateLiveStreamRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateLiveStream
    */
    readonly webinarId: number
    
} & WebinarsUpdateLiveStreamRequest

/**
 * Request parameters for updateLiveStreamStatus operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateLiveStreamStatusRequest
 */
export type WebinarsApiUpdateLiveStreamStatusRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateLiveStreamStatus
    */
    readonly webinarId: number
    
} & WebinarsUpdateLiveStreamStatusRequest

/**
 * Request parameters for updatePoll operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdatePollRequest
 */
export type WebinarsApiUpdatePollRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdatePoll
    */
    readonly webinarId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof WebinarsApiUpdatePoll
    */
    readonly pollId: string
    
} & WebinarsUpdatePollRequest

/**
 * Request parameters for updateRegistrantStatus operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateRegistrantStatusRequest
 */
export type WebinarsApiUpdateRegistrantStatusRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateRegistrantStatus
    */
    readonly webinarId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof WebinarsApiUpdateRegistrantStatus
    */
    readonly occurrenceId?: string
    
} & WebinarsUpdateRegistrantStatusRequest

/**
 * Request parameters for updateRegistrationQuestions operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateRegistrationQuestionsRequest
 */
export type WebinarsApiUpdateRegistrationQuestionsRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateRegistrationQuestions
    */
    readonly webinarId: number
    
} & WebinarsUpdateRegistrationQuestionsRequest

/**
 * Request parameters for updateScheduledWebinar operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateScheduledWebinarRequest
 */
export type WebinarsApiUpdateScheduledWebinarRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateScheduledWebinar
    */
    readonly webinarId: number
    
    /**
    * Webinar occurrence ID. Support change of agenda, start time, duration, and settings `host_video`, `panelist_video`, `hd_video, watermark`, `auto_recording`.
    * @type {string}
    * @memberof WebinarsApiUpdateScheduledWebinar
    */
    readonly occurrenceId?: string
    
} & WebinarsUpdateScheduledWebinarRequest

/**
 * Request parameters for updateStatus operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateStatusRequest
 */
export type WebinarsApiUpdateStatusRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateStatus
    */
    readonly webinarId: number
    
} & WebinarsUpdateStatusRequest

/**
 * Request parameters for updateSurvey operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUpdateSurveyRequest
 */
export type WebinarsApiUpdateSurveyRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUpdateSurvey
    */
    readonly webinarId: number
    
} & WebinarsUpdateSurveyRequest

/**
 * Request parameters for uploadBrandingVirtualBackground operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUploadBrandingVirtualBackgroundRequest
 */
export type WebinarsApiUploadBrandingVirtualBackgroundRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUploadBrandingVirtualBackground
    */
    readonly webinarId: number
    
    /**
    * The Virtual Background\\\'s file path, in binary format.
    * @type {Uint8Array | File | buffer.File}
    * @memberof WebinarsApiUploadBrandingVirtualBackground
    */
    readonly file: Uint8Array | File | buffer.File
    
    /**
    * Whether set the file as the default Virtual Background file.
    * @type {boolean}
    * @memberof WebinarsApiUploadBrandingVirtualBackground
    */
    readonly default?: boolean
    
    /**
    * Whether to set the Virtual Background file as the new default for all panelists. This includes panelists not currently assigned a default Virtual Background.
    * @type {boolean}
    * @memberof WebinarsApiUploadBrandingVirtualBackground
    */
    readonly setDefaultForAllPanelists?: boolean
    
} & WebinarsUploadBrandingVirtualBackgroundRequest

/**
 * Request parameters for uploadBrandingWallpaper operation in WebinarsApi.
 * @export
 * @interface WebinarsApiUploadBrandingWallpaperRequest
 */
export type WebinarsApiUploadBrandingWallpaperRequest = {
    
    /**
    * The webinar\'s ID.
    * @type {number}
    * @memberof WebinarsApiUploadBrandingWallpaper
    */
    readonly webinarId: number
    
    /**
    * The wallpaper\\\'s file path, in binary format.
    * @type {Uint8Array | File | buffer.File}
    * @memberof WebinarsApiUploadBrandingWallpaper
    */
    readonly file: Uint8Array | File | buffer.File
    
} & WebinarsUploadBrandingWallpaperRequest

/**
 * WebinarsApiGenerated - object-oriented interface
 * @export
 * @class WebinarsApiGenerated
 * @extends {BaseAPI}
 */
export class WebinarsApiGenerated extends BaseAPI {
    /**
     * Panelists in a webinar can view and send video, screen share, annotate, and do much more compared to attendees in a webinar.    [Add panelists](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_7550d59e-23f5-4703-9e22-e76bded1ed70) to a scheduled webinar.           **Prerequisites:** * Pro or a higher plan with the [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Add panelists
     * @param {WebinarsApiAddPanelistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public addPanelists(requestParameters: WebinarsApiAddPanelistsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).addPanelists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create and submit a user\'s registration for a webinar. Zoom users with a [Webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars allow hosts to broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Add a webinar registrant
     * @param {WebinarsApiAddRegistrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public addRegistrant(requestParameters: WebinarsApiAddRegistrantRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).addRegistrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register up to 30 registrants at once for a scheduled webinar that requires [registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-webinar-with-registration).       **Prerequisites:**     * The webinar host must be a licensed user. * The webinar should be type `5`, a scheduled webinar. Other types of webinars are not supported by this API.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Perform batch registration
     * @param {WebinarsApiCreateBatchRegistrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createBatchRegistrants(requestParameters: WebinarsApiCreateBatchRegistrantsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createBatchRegistrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to create a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. There\'s a limit of 20 name tags per webinar. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Create a webinar\'s branding name tag
     * @param {WebinarsApiCreateBrandingNameTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createBrandingNameTag(requestParameters: WebinarsApiCreateBrandingNameTagRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createBrandingNameTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a batch of invitation links for a webinar.  **Prerequisites:**  * Business, Education or API Plan with the Webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Create webinar\'s invite links
     * @param {WebinarsApiCreateInviteLinksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createInviteLinks(requestParameters: WebinarsApiCreateInviteLinksRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createInviteLinks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) for a webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Create a webinar\'s poll
     * @param {WebinarsApiCreatePollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createPoll(requestParameters: WebinarsApiCreatePollRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createPoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Schedule a webinar for a user who is a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Webinars allow a host to broadcast a Zoom meeting to up to 10,000 attendees.   **Rate limit:** Up to a maximum of **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites:**  * A Pro or higher plan with a [Webinar plan](https://zoom.us/webinar) add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Create a webinar
     * @param {WebinarsApiCreateWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createWebinar(requestParameters: WebinarsApiCreateWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createWebinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to create a webinar template from an existing webinar.     **Scopes:** `webinar:write:admin`,`webinar:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Create a webinar template
     * @param {WebinarsApiCreateWebinarTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public createWebinarTemplate(requestParameters: WebinarsApiCreateWebinarTemplateRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).createWebinarTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a webinar\'s branding name tag
     * @param {WebinarsApiDeleteBrandingNameTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteBrandingNameTag(requestParameters: WebinarsApiDeleteBrandingNameTagRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteBrandingNameTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a webinar\'s branding Virtual Backgrounds
     * @param {WebinarsApiDeleteBrandingVirtualBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteBrandingVirtualBackground(requestParameters: WebinarsApiDeleteBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteBrandingVirtualBackground(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete a webinar\'s session branding wallpaper file.    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a webinar\'s branding wallpaper
     * @param {WebinarsApiDeleteBrandingWallpaperRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteBrandingWallpaper(requestParameters: WebinarsApiDeleteBrandingWallpaperRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteBrandingWallpaper(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a message in a live webinar based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Delete a live webinar message
     * @param {WebinarsApiDeleteMessageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteMessageById(requestParameters: WebinarsApiDeleteMessageByIdRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteMessageById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Delete a webinar poll
     * @param {WebinarsApiDeletePollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deletePoll(requestParameters: WebinarsApiDeletePollRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deletePoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a webinar registrant.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Delete a webinar registrant
     * @param {WebinarsApiDeleteRegistrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteRegistrant(requestParameters: WebinarsApiDeleteRegistrantRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteRegistrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar Add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Delete a webinar survey
     * @param {WebinarsApiDeleteSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public deleteSurvey(requestParameters: WebinarsApiDeleteSurveyRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).deleteSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details for a scheduled Zoom Webinar.            **Prerequisites:** * Pro or higher plan with a Webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a webinar
     * @param {WebinarsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getDetails(requestParameters: WebinarsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a webinar\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom webinar. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_recording`,`webinar_token:read:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a webinar\'s join token for local recording
     * @param {WebinarsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getJoinTokenLocalRecording(requestParameters: WebinarsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getJoinTokenLocalRecording(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a webinar\'s live stream configuration details, such as Stream URL, Stream Key and Page URL.  Zoom allows users to [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get live stream details
     * @param {WebinarsApiGetLiveStreamDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getLiveStreamDetails(requestParameters: WebinarsApiGetLiveStreamDetailsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getLiveStreamDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a webinar\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the webinar\'s raw audio and video media stream in real-time.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a webinar\'s archive token for local archiving
     * @param {WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getMeetingArchiveTokenForLocalArchiving(requestParameters: WebinarsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getMeetingArchiveTokenForLocalArchiving(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) details.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a webinar poll
     * @param {WebinarsApiGetPollDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getPollDetails(requestParameters: WebinarsApiGetPollDetailsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getPollDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get the webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) information. Session branding lets hosts visually customize a webinar by setting a webinar wallpaper that displays behind video tiles. Session branding also lets hosts set the Virtual Background for and apply name tags to hosts, alternative hosts, panelists, interpreters, and speakers.    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get webinar\'s session branding
     * @param {WebinarsApiGetSessionBrandingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getSessionBranding(requestParameters: WebinarsApiGetSessionBrandingRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getSessionBranding(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a webinar\'s SIP URI. The URI consists of the webinar ID, an optional user-supplied passcode, and participant identifier code. The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period in seconds.   **Scopes:** `webinar:write:admin:sip_dialing`,`webinar:write:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a webinar SIP URI with Passcode
     * @param {WebinarsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getSipUriWithPasscode(requestParameters: WebinarsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getSipUriWithPasscode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return information about a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).    **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature enabled in the host\'s account.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a webinar survey
     * @param {WebinarsApiGetSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getSurvey(requestParameters: WebinarsApiGetSurveyRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a webinar\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom webinar.   **Prerequisites:**  * A Pro or higher plan with the Webinar add-on.  * The **Closed captioning** setting enabled in the Zoom web portal.  *  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `webinar:read`,`webinar:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get webinar\'s token
     * @param {WebinarsApiGetWebinarTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public getWebinarToken(requestParameters: WebinarsApiGetWebinarTokenRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).getWebinarToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a webinar\'s archive token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.    **Prerequisites:**  * A Pro or higher plan with a Webinar Add-on.  * The **Allow livestreaming of webinars** user setting enabled in the Zoom web portal.  **Scopes:** `webinar_token:read:admin:live_streaming`,`webinar_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a webinar\'s join token for live streaming
     * @param {WebinarsApiJoinTokenLiveStreamingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public joinTokenLiveStreaming(requestParameters: WebinarsApiJoinTokenLiveStreamingRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).joinTokenLiveStreaming(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List absentees of a webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get webinar absentees
     * @param {WebinarsApiListAbsenteesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listAbsentees(requestParameters: WebinarsApiListAbsenteesRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listAbsentees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all of a webinar\'s panelists.    Webinar panelists can view and send video, screen share, annotate, and do much more compared to webinar attendees.    **Prerequisites:**     * Pro or a higher plan with [Webinar Add-on](https://zoom.us/webinar).       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List panelists
     * @param {WebinarsApiListPanelistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listPanelists(requestParameters: WebinarsApiListPanelistsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listPanelists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all the participants who attended a webinar hosted in the past.   **Prerequisites:**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List webinar participants
     * @param {WebinarsApiListParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listParticipants(requestParameters: WebinarsApiListParticipantsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listParticipants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List past webinar instances.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary List past webinar instances
     * @param {WebinarsApiListPastInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listPastInstances(requestParameters: WebinarsApiListPastInstancesRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listPastInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the Q&amp;A of a specific past webinar.   The [question &amp; answer (Q&amp;A)](https://support.zoom.us/hc/en-us/articles/203686015-Getting-Started-with-Question-Answer) feature for webinars lets attendees ask questions during the webinar and for the panelists, co-hosts and host to answer their questions.   **Prerequisites**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List Q&As of a past webinar
     * @param {WebinarsApiListPastWebinarQaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listPastWebinarQa(requestParameters: WebinarsApiListPastWebinarQaRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listPastWebinarQa(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The polling feature for webinar lets you create single-choice or multiple-choice polling questions for your webinars. This API endpoint retrieves the results for webinar polls of a specific webinar.  **Prerequisites:**     * [Webinar license](https://zoom.us/webinar)       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List past webinar poll results
     * @param {WebinarsApiListPollResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listPollResults(requestParameters: WebinarsApiListPollResultsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listPollResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the [polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars) of a Webinar.            **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary List a webinar\'s polls 
     * @param {WebinarsApiListPollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listPolls(requestParameters: WebinarsApiListPollsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listPolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all users that have registered for a given webinar. Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar functionality lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.     **Prerequisites** * Pro or higher plan with a Webinar Add-on.       **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List webinar registrants
     * @param {WebinarsApiListRegistrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listRegistrants(requestParameters: WebinarsApiListRegistrantsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listRegistrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List registration questions and fields that are to be answered by users while registering for a webinar.    Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.       **Prerequisites:**      * Pro or higher plan with the webinar add-on.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary List registration questions
     * @param {WebinarsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listRegistrationQuestions(requestParameters: WebinarsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Webinar Registration Tracking Sources](https://support.zoom.us/hc/en-us/articles/360000315683-Webinar-Registration-Source-Tracking) allow you to see where your registrants are coming from if you share the webinar registration page in multiple platforms. You can then use the source tracking to see the number of registrants generated from each platform.     Use this API to list information on all the tracking sources of a Webinar.      **Prerequisites**:     * [Webinar license](https://zoom.us/webinar). * Registration must be required for the Webinar.   **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Get webinar tracking sources
     * @param {WebinarsApiListTrackingSourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listTrackingSources(requestParameters: WebinarsApiListTrackingSourcesRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listTrackingSources(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Display a list of a user\'s [webinar templates](https://support.zoom.us/hc/en-us/articles/115001079746-Webinar-Templates). For user-level apps, pass [the `me` value](https://developers.zoom.us) instead of the `userId` parameter. When you schedule a webinar, save the settings for that webinar as a template for scheduling future webinars.  To use a template when scheduling a webinar, use the `id` value in this API response in the `template_id` field of the [**Create a webinar**](https://developers.zoom.us) API. **Prerequisites:** * A Pro or a higher account with the [Zoom Webinar plan](https://zoom.us/pricing/webinar).  **Scopes:** `webinar:read:admin`,`webinar:read`
     * @summary List webinar templates
     * @param {WebinarsApiListWebinarTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listWebinarTemplates(requestParameters: WebinarsApiListWebinarTemplatesRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listWebinarTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the webinars scheduled by or on behalf a webinar host. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. Webinars let a host broadcast a Zoom meeting to up to 10,000 attendees.   **Note** This API only returns a user\'s [unexpired webinars](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).    **Prerequisites**  * A Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List webinars
     * @param {WebinarsApiListWebinarsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public listWebinars(requestParameters: WebinarsApiListWebinarsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).listWebinars(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Zoom users with a [webinar plan](https://zoom.us/webinar) have access to creating and managing webinars. The webinar feature lets a host broadcast a Zoom meeting to up to 10,000 attendees. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form before receiving the link to join the webinar.    Use this API to get details on a specific user who has registered for the webinar.           **Prerequisites:**     * The account must have a webinar plan.  **Scopes:** `webinar:read:admin`,`webinar:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a webinar registrant
     * @param {WebinarsApiRegistrantDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public registrantDetails(requestParameters: WebinarsApiRegistrantDetailsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).registrantDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Remove](https://support.zoom.us/hc/en-us/articles/115005657826-Inviting-Panelists-to-a-Webinar#h_de31f237-a91c-4fb2-912b-ecfba8ec5ffb) a single panelist from a webinar.     Retrieve the `panelistId` by calling **List Panelists API**.           **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Remove a panelist
     * @param {WebinarsApiRemovePanelistRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public removePanelist(requestParameters: WebinarsApiRemovePanelistRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).removePanelist(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove all the panelists from a webinar.     **Prerequisites:**     * Pro or a higher plan with the [webinar add-on](https://zoom.us/webinar).       **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Remove webinar panelists
     * @param {WebinarsApiRemovePanelistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public removePanelists(requestParameters: WebinarsApiRemovePanelistsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).removePanelists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a webinar.    **Prerequisites:**     * Pro or higher plan with the webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Delete a webinar
     * @param {WebinarsApiRemoveWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public removeWebinar(requestParameters: WebinarsApiRemoveWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).removeWebinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to set a webinar\'s default session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background).    **Prerequisites:**  * The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Set webinar\'s default branding Virtual Background
     * @param {WebinarsApiSetDefaultBrandingVirtualBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public setDefaultBrandingVirtualBackground(requestParameters: WebinarsApiSetDefaultBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).setDefaultBrandingVirtualBackground(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to update a webinar\'s [Session Branding](https://support.zoom.us/hc/en-us/articles/4836268732045-Using-Webinar-Session-Branding) name tag. **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Update a webinar\'s branding name tag
     * @param {WebinarsApiUpdateBrandingNameTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateBrandingNameTag(requestParameters: WebinarsApiUpdateBrandingNameTagRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateBrandingNameTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a webinar\'s live stream information.         **Prerequisites:**     * Pro or higher plan with the webinar add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a live stream
     * @param {WebinarsApiUpdateLiveStreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateLiveStream(requestParameters: WebinarsApiUpdateLiveStreamRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateLiveStream(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Let users [live stream a webinar](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a webinar\'s live stream.          **Prerequisites:**     * Pro or higher plan with a Webinar Add-on.     * Live streaming details must be [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the webinar.            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update live stream status
     * @param {WebinarsApiUpdateLiveStreamStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateLiveStreamStatus(requestParameters: WebinarsApiUpdateLiveStreamStatusRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateLiveStreamStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a webinar\'s [poll](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).            **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a webinar poll
     * @param {WebinarsApiUpdatePollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updatePoll(requestParameters: WebinarsApiUpdatePollRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updatePoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update webinar registrants\' registration status. You can approve or deny a registrant, or revoke a registrant\'s approval.   **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Update registrant\'s status
     * @param {WebinarsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateRegistrantStatus(requestParameters: WebinarsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateRegistrantStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update registration questions and fields of a scheduled webinar for users to answer during webinar registration. Scheduling a [webinar with registration](https://support.zoom.us/hc/en-us/articles/204619915-Scheduling-a-Webinar-with-Registration) requires your registrants to complete a brief form with fields and questions before they can receive the link to join the webinar.          **Prerequisites:**       * Pro or higher plan with a Webinar Add-on. * Registration option for Webinar should be set as required to use this API.    **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update registration questions
     * @param {WebinarsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateRegistrationQuestions(requestParameters: WebinarsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Make updates to a scheduled webinar.   **100 requests per day**. The rate limit is applied to the `userId` of the **webinar host** used to make the request.   **Prerequisites**  * A Pro or higher plan with a webinar add-on.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a webinar
     * @param {WebinarsApiUpdateScheduledWebinarRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateScheduledWebinar(requestParameters: WebinarsApiUpdateScheduledWebinarRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateScheduledWebinar(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a webinar\'s status. Use this API to end an ongoing webinar.          **Prerequisites:**     * The account must hold a valid [Webinar plan](https://zoom.us/webinar).  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update webinar status
     * @param {WebinarsApiUpdateStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateStatus(requestParameters: WebinarsApiUpdateStatusRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [webinar survey](https://support.zoom.us/hc/en-us/articles/360048745651).  **Prerequisites:** * A Pro or higher plan with the Webinar add-on. * Enable the [**Webinar Survey**](https://support.zoom.us/hc/en-us/articles/360061293191-Enabling-webinar-survey) feature in the host\'s account.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a webinar survey
     * @param {WebinarsApiUpdateSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public updateSurvey(requestParameters: WebinarsApiUpdateSurveyRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).updateSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to upload a webinar\'s session branding [Virtual Background](https://support.zoom.us/hc/en-us/articles/210707503-Virtual-Background). Hosts and panelists can select and use these Virtual Backgrounds during the webinar. Branding Virtual Background files have the following restrictions:  * A webinar cannot exceed more than 10 Virtual Background files.  * You can only upload image files that are in JPG/JPEG, GIF or PNG format.  * The Virtual Background file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Upload a webinar\'s branding Virtual Background
     * @param {WebinarsApiUploadBrandingVirtualBackgroundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public uploadBrandingVirtualBackground(requestParameters: WebinarsApiUploadBrandingVirtualBackgroundRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).uploadBrandingVirtualBackground(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to upload a webinar\'s session branding wallpaper file. Webinar branding wallpaper files have the following requirements:  * A webinar can only have one wallpaper file.  * You can only upload image files that are in JPG/JPEG, GIF, or PNG format.  * Image files must be 16:9 ratio. The recommended image size is 1920 x 1080 pixels (px).  * The wallpaper file size cannot exceed 15 megabytes (MB).    **Prerequisites:**  *  The **Webinar Session Branding** setting enabled.  **Scopes:** `webinar:write`,`webinar:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Upload a webinar\'s branding wallpaper
     * @param {WebinarsApiUploadBrandingWallpaperRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebinarsApiGenerated
     */
    public uploadBrandingWallpaper(requestParameters: WebinarsApiUploadBrandingWallpaperRequest, options?: AxiosRequestConfig) {
        return WebinarsApiFp(this.configuration).uploadBrandingWallpaper(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
