/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AnalyticsDetailsResponse } from '../models';
// @ts-ignore
import { AnalyticsSummaryResponse } from '../models';
// @ts-ignore
import { CloudRecordingCreateRegistrantRequest } from '../models';
// @ts-ignore
import { CloudRecordingCreateRegistrantRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { CloudRecordingCreateRegistrantResponse } from '../models';
// @ts-ignore
import { CloudRecordingGetMeetingRecordingsResponse } from '../models';
// @ts-ignore
import { CloudRecordingGetSettingsResponse } from '../models';
// @ts-ignore
import { CloudRecordingListRecordingsResponse } from '../models';
// @ts-ignore
import { CloudRecordingListRegistrantsResponse } from '../models';
// @ts-ignore
import { CloudRecordingListRegistrationQuestionsResponse } from '../models';
// @ts-ignore
import { CloudRecordingRecoverRecordingStatusRequest } from '../models';
// @ts-ignore
import { CloudRecordingRecoverStatusRequest } from '../models';
// @ts-ignore
import { CloudRecordingUpdateRegistrantStatusRequest } from '../models';
// @ts-ignore
import { CloudRecordingUpdateRegistrantStatusRequestRegistrantsInner } from '../models';
// @ts-ignore
import { CloudRecordingUpdateRegistrationQuestionsRequest } from '../models';
// @ts-ignore
import { CloudRecordingUpdateRegistrationQuestionsRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { CloudRecordingUpdateRegistrationQuestionsRequestQuestionsInner } from '../models';
// @ts-ignore
import { CloudRecordingUpdateSettingsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CloudRecordingApi - axios parameter creator
 * @export
 */
export const CloudRecordingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a recording registrant
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {CloudRecordingCreateRegistrantRequest} [cloudRecordingCreateRegistrantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrant: async (meetingId: number, cloudRecordingCreateRegistrantRequest?: CloudRecordingCreateRegistrantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('createRegistrant', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/registrants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingCreateRegistrantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/registrants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingCreateRegistrantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user\'s account.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete meeting recordings
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {'trash' | 'delete'} [action] The recording delete actions:    &#x60;trash&#x60; - Move recording to trash.    &#x60;delete&#x60; - Delete recording permanently.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRecordings: async (meetingId: string, action?: 'trash' | 'delete', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteMeetingRecordings', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific recording file from a meeting.&lt;p style=&quot;background-color:#e1f5fe; color:#01579b; padding:8px&quot;&gt; &lt;b&gt;Note:&lt;/b&gt; To use this API, you must enable the &lt;b&gt;The host can delete cloud recordings&lt;/b&gt; setting. You can find this setting in the &lt;b&gt;Recording&lt;/b&gt; tab of the &lt;b&gt;Settings&lt;/b&gt; interface in the [Zoom web portal](https://zoom.us/).&lt;/p&gt;    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting recording file
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {string} recordingId The recording ID.
         * @param {'trash' | 'delete'} [action] The recording delete actions:    &#x60;trash&#x60; - Move recording to trash.    &#x60;delete&#x60; - Delete recording permanently.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording: async (meetingId: string, recordingId: string, action?: 'trash' | 'delete', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteRecording', 'meetingId', meetingId)
            // verify required parameter 'recordingId' is not null or undefined
            assertParamExists('deleteRecording', 'recordingId', recordingId)
            const localVarPath = `/meetings/{meetingId}/recordings/{recordingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"recordingId"}}`, encodeURIComponent(String(recordingId !== undefined ? recordingId : `-recordingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)
            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/{recordingId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to return a meeting recording\'s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Details
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {string | Date} [from] The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
         * @param {string | Date} [to] The end date for the monthly range to query. The maximum range can be a month.
         * @param {'by_view' | 'by_download'} [type] The type of analytics details:  * &#x60;by_view&#x60; &amp;mdash; by_view.  * &#x60;by_download&#x60; &amp;mdash; by_download.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details: async (meetingId: string, pageSize?: number, nextPageToken?: string, from?: string | Date, to?: string | Date, type?: 'by_view' | 'by_download', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('details', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/analytics_details`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/analytics_details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all of a meeting\'s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the `download_url` property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  `curl -H \'Authorization: Bearer <ACCESS_TOKEN>\' https://{{base-domain}}/rec/archive/download/xyz`    **Scopes:** `recording:read`,`phone_recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recordings
         * @param {string} meetingId To get a meeting\&#39;s cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance.   To get a webinar\&#39;s cloud recordings, provide the webinar\&#39;s ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance.   If a UUID starts with &#x60;/&#x60; or contains &#x60;//&#x60; (example: &#x60;/ajXp112QmuoKj4854875&#x3D;&#x3D;&#x60;), **[double encode](https://developers.zoom.us) the UUID** before making an API request. 
         * @param {string} [includeFields] The &#x60;download_access_token&#x60; value for downloading the meeting\&#39;s recordings.
         * @param {number} [ttl] The &#x60;download_access_token&#x60; Time to Live (TTL) value. This parameter is only valid if the &#x60;include_fields&#x60; query parameter contains the &#x60;download_access_token&#x60; value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRecordings: async (meetingId: string, includeFields?: string, ttl?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingRecordings', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read", "phone_recording:read:admin"], configuration)
            if (includeFields !== undefined) {
                localVarQueryParameter['include_fields'] = includeFields;
            }

            if (ttl !== undefined) {
                localVarQueryParameter['ttl'] = ttl;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recording settings
         * @param {string} meetingId The meeting ID enables you to get cloud recording of a: - Meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   - Webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **double encode** the UUID before making an API request. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getSettings', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/settings`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/settings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user\'s passcode protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  `curl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://{{base-domain}}/rec/archive/download/xyz`    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user\'s account.  **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List all recordings
         * @param {string} userId The user\&#39;s ID or email address. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
         * @param {string} [mc] The query metadata of the recording if using an on-premise meeting connector for the meeting.
         * @param {boolean} [trash] The query trash. * &#x60;true&#x60; - List recordings from trash.   * &#x60;false&#x60; - Do not list recordings from the trash.    The default value is &#x60;false&#x60;. If you set it to &#x60;true&#x60;, you can use the &#x60;trash_type&#x60; property to indicate the type of Cloud recording that you need to retrieve. 
         * @param {string | Date} [from] The start date in \&#39;yyyy-mm-dd\&#39; UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date.   For example, if you make the API request on June 30, 2020, without providing the &#x60;from&#x60; and &#x60;to&#x60; parameters, by default the value of \&#39;from\&#39; field will be &#x60;2020-06-30&#x60; and the value of the \&#39;to\&#39; field will be &#x60;2020-07-01&#x60;.   **Note**: The &#x60;trash&#x60; files cannot be filtered by date range and thus, the &#x60;from&#x60; and &#x60;to&#x60; fields should not be used for trash files.
         * @param {string | Date} [to] The end date in \&#39;yyyy-mm-dd\&#39; \&#39;yyyy-mm-dd\&#39; UTC format. 
         * @param {string} [trashType] The type of cloud recording to retrieve from the trash.     *   &#x60;meeting_recordings&#x60;: List all meeting recordings from the trash.    *  &#x60;recording_file&#x60;: List all individual recording files from the trash. 
         * @param {number} [meetingId] The meeting ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecordings: async (userId: string, pageSize?: number, nextPageToken?: string, mc?: string, trash?: boolean, from?: string | Date, to?: string | Date, trashType?: string, meetingId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listRecordings', 'userId', userId)
            const localVarPath = `/users/{userId}/recordings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (mc !== undefined) {
                localVarQueryParameter['mc'] = mc;
            }

            if (trash !== undefined) {
                localVarQueryParameter['trash'] = trash;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (trashType !== undefined) {
                localVarQueryParameter['trash_type'] = trashType;
            }

            if (meetingId !== undefined) {
                localVarQueryParameter['meeting_id'] = meetingId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/recordings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to list registrants of a past meeting\'s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List recording registrants
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {'pending' | 'approved' | 'denied'} [status] Query by the registrant\&#39;s status:  * &#x60;pending&#x60; &amp;mdash; The registration is pending.  * &#x60;approved&#x60; &amp;mdash; The registrant is approved.  * &#x60;denied&#x60; &amp;mdash; The registration is denied.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants: async (meetingId: number, status?: 'pending' | 'approved' | 'denied', pageSize?: number, pageNumber?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listRegistrants', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/registrants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/registrants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get registration questions
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listRegistrationQuestions', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/registrants/questions`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/registrants/questions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover meeting recordings
         * @param {string} meetingUUID The meeting\&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
         * @param {CloudRecordingRecoverRecordingStatusRequest} [cloudRecordingRecoverRecordingStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverRecordingStatus: async (meetingUUID: string, cloudRecordingRecoverRecordingStatusRequest?: CloudRecordingRecoverRecordingStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingUUID' is not null or undefined
            assertParamExists('recoverRecordingStatus', 'meetingUUID', meetingUUID)
            const localVarPath = `/meetings/{meetingUUID}/recordings/status`
                .replace(`{${"meetingUUID"}}`, encodeURIComponent(String(meetingUUID !== undefined ? meetingUUID : `-meetingUUID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingRecoverRecordingStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingUUID}/recordings/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingRecoverRecordingStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover a single recording
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {string} recordingId The recording ID.
         * @param {CloudRecordingRecoverStatusRequest} [cloudRecordingRecoverStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverStatus: async (meetingId: string, recordingId: string, cloudRecordingRecoverStatusRequest?: CloudRecordingRecoverStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('recoverStatus', 'meetingId', meetingId)
            // verify required parameter 'recordingId' is not null or undefined
            assertParamExists('recoverStatus', 'recordingId', recordingId)
            const localVarPath = `/meetings/{meetingId}/recordings/{recordingId}/status`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"recordingId"}}`, encodeURIComponent(String(recordingId !== undefined ? recordingId : `-recordingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingRecoverStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/{recordingId}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingRecoverStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to return a meeting recording\'s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Summary
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {string | Date} [from] The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
         * @param {string | Date} [to] The end date for the monthly range to query. The maximum range can be a month.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summary: async (meetingId: string, from?: string | Date, to?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('summary', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/analytics_summary`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin", "recording:read"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/analytics_summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant\'s status.    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {CloudRecordingUpdateRegistrantStatusRequest} [cloudRecordingUpdateRegistrantStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus: async (meetingId: number, cloudRecordingUpdateRegistrantStatusRequest?: CloudRecordingUpdateRegistrantStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateRegistrantStatus', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/registrants/status`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingUpdateRegistrantStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/registrants/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingUpdateRegistrantStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
         * @param {CloudRecordingUpdateRegistrationQuestionsRequest} [cloudRecordingUpdateRegistrationQuestionsRequest] Recording Registrant Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions: async (meetingId: string, cloudRecordingUpdateRegistrationQuestionsRequest?: CloudRecordingUpdateRegistrationQuestionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateRegistrationQuestions', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/registrants/questions`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingUpdateRegistrationQuestionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/registrants/questions',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingUpdateRegistrationQuestionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update meeting recording settings
         * @param {string} meetingId To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &amp;quot;/&amp;quot; or contains &amp;quot;//&amp;quot; (example: &amp;quot;/ajXp112QmuoKj4854875&#x3D;&#x3D;&amp;quot;), you must **double encode** the UUID before making an API request. 
         * @param {CloudRecordingUpdateSettingsRequest} [cloudRecordingUpdateSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings: async (meetingId: string, cloudRecordingUpdateSettingsRequest?: CloudRecordingUpdateSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateSettings', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/recordings/settings`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write", "recording:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cloudRecordingUpdateSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/recordings/settings',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cloudRecordingUpdateSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CloudRecordingApi - functional programming interface
 * @export
 */
export const CloudRecordingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CloudRecordingApiAxiosParamCreator(configuration)
    return {
        /**
         * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a recording registrant
         * @param {CloudRecordingApiCreateRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistrant(requestParameters: CloudRecordingApiCreateRegistrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingCreateRegistrantResponse>> {
            const cloudRecordingCreateRegistrantRequest: CloudRecordingCreateRegistrantRequest = {
                address: requestParameters.address,
                city: requestParameters.city,
                comments: requestParameters.comments,
                country: requestParameters.country,
                custom_questions: requestParameters.custom_questions,
                email: requestParameters.email,
                first_name: requestParameters.first_name,
                industry: requestParameters.industry,
                job_title: requestParameters.job_title,
                last_name: requestParameters.last_name,
                no_of_employees: requestParameters.no_of_employees,
                org: requestParameters.org,
                phone: requestParameters.phone,
                purchasing_time_frame: requestParameters.purchasing_time_frame,
                role_in_purchase_process: requestParameters.role_in_purchase_process,
                state: requestParameters.state,
                status: requestParameters.status,
                zip: requestParameters.zip
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistrant(requestParameters.meetingId, cloudRecordingCreateRegistrantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user\'s account.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete meeting recordings
         * @param {CloudRecordingApiDeleteMeetingRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingRecordings(requestParameters: CloudRecordingApiDeleteMeetingRecordingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingRecordings(requestParameters.meetingId, requestParameters.action, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific recording file from a meeting.&lt;p style=&quot;background-color:#e1f5fe; color:#01579b; padding:8px&quot;&gt; &lt;b&gt;Note:&lt;/b&gt; To use this API, you must enable the &lt;b&gt;The host can delete cloud recordings&lt;/b&gt; setting. You can find this setting in the &lt;b&gt;Recording&lt;/b&gt; tab of the &lt;b&gt;Settings&lt;/b&gt; interface in the [Zoom web portal](https://zoom.us/).&lt;/p&gt;    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting recording file
         * @param {CloudRecordingApiDeleteRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRecording(requestParameters: CloudRecordingApiDeleteRecordingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRecording(requestParameters.meetingId, requestParameters.recordingId, requestParameters.action, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to return a meeting recording\'s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Details
         * @param {CloudRecordingApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async details(requestParameters: CloudRecordingApiDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.details(requestParameters.meetingId, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.from, requestParameters.to, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all of a meeting\'s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the `download_url` property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  `curl -H \'Authorization: Bearer <ACCESS_TOKEN>\' https://{{base-domain}}/rec/archive/download/xyz`    **Scopes:** `recording:read`,`phone_recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recordings
         * @param {CloudRecordingApiGetMeetingRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingRecordings(requestParameters: CloudRecordingApiGetMeetingRecordingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingGetMeetingRecordingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingRecordings(requestParameters.meetingId, requestParameters.includeFields, requestParameters.ttl, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recording settings
         * @param {CloudRecordingApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSettings(requestParameters: CloudRecordingApiGetSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingGetSettingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSettings(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user\'s passcode protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  `curl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://{{base-domain}}/rec/archive/download/xyz`    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user\'s account.  **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List all recordings
         * @param {CloudRecordingApiListRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRecordings(requestParameters: CloudRecordingApiListRecordingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingListRecordingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRecordings(requestParameters.userId, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.mc, requestParameters.trash, requestParameters.from, requestParameters.to, requestParameters.trashType, requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to list registrants of a past meeting\'s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List recording registrants
         * @param {CloudRecordingApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrants(requestParameters: CloudRecordingApiListRegistrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingListRegistrantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrants(requestParameters.meetingId, requestParameters.status, requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get registration questions
         * @param {CloudRecordingApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrationQuestions(requestParameters: CloudRecordingApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRecordingListRegistrationQuestionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrationQuestions(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover meeting recordings
         * @param {CloudRecordingApiRecoverRecordingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverRecordingStatus(requestParameters: CloudRecordingApiRecoverRecordingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cloudRecordingRecoverRecordingStatusRequest: CloudRecordingRecoverRecordingStatusRequest = {
                action: requestParameters.action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverRecordingStatus(requestParameters.meetingUUID, cloudRecordingRecoverRecordingStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover a single recording
         * @param {CloudRecordingApiRecoverStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recoverStatus(requestParameters: CloudRecordingApiRecoverStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cloudRecordingRecoverStatusRequest: CloudRecordingRecoverStatusRequest = {
                action: requestParameters.action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.recoverStatus(requestParameters.meetingId, requestParameters.recordingId, cloudRecordingRecoverStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to return a meeting recording\'s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Summary
         * @param {CloudRecordingApiSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summary(requestParameters: CloudRecordingApiSummaryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnalyticsSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summary(requestParameters.meetingId, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant\'s status.    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {CloudRecordingApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrantStatus(requestParameters: CloudRecordingApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cloudRecordingUpdateRegistrantStatusRequest: CloudRecordingUpdateRegistrantStatusRequest = {
                action: requestParameters.action,
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrantStatus(requestParameters.meetingId, cloudRecordingUpdateRegistrantStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {CloudRecordingApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrationQuestions(requestParameters: CloudRecordingApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cloudRecordingUpdateRegistrationQuestionsRequest: CloudRecordingUpdateRegistrationQuestionsRequest = {
                custom_questions: requestParameters.custom_questions,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrationQuestions(requestParameters.meetingId, cloudRecordingUpdateRegistrationQuestionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update meeting recording settings
         * @param {CloudRecordingApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSettings(requestParameters: CloudRecordingApiUpdateSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const cloudRecordingUpdateSettingsRequest: CloudRecordingUpdateSettingsRequest = {
                approval_type: requestParameters.approval_type,
                authentication_domains: requestParameters.authentication_domains,
                authentication_option: requestParameters.authentication_option,
                on_demand: requestParameters.on_demand,
                password: requestParameters.password,
                recording_authentication: requestParameters.recording_authentication,
                send_email_to_host: requestParameters.send_email_to_host,
                share_recording: requestParameters.share_recording,
                show_social_share_buttons: requestParameters.show_social_share_buttons,
                topic: requestParameters.topic,
                viewer_download: requestParameters.viewer_download
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSettings(requestParameters.meetingId, cloudRecordingUpdateSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CloudRecordingApi - factory interface
 * @export
 */
export const CloudRecordingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CloudRecordingApiFp(configuration)
    return {
        /**
         * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a recording registrant
         * @param {CloudRecordingApiCreateRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistrant(requestParameters: CloudRecordingApiCreateRegistrantRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingCreateRegistrantResponse> {
            return localVarFp.createRegistrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user\'s account.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete meeting recordings
         * @param {CloudRecordingApiDeleteMeetingRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingRecordings(requestParameters: CloudRecordingApiDeleteMeetingRecordingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingRecordings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific recording file from a meeting.&lt;p style=&quot;background-color:#e1f5fe; color:#01579b; padding:8px&quot;&gt; &lt;b&gt;Note:&lt;/b&gt; To use this API, you must enable the &lt;b&gt;The host can delete cloud recordings&lt;/b&gt; setting. You can find this setting in the &lt;b&gt;Recording&lt;/b&gt; tab of the &lt;b&gt;Settings&lt;/b&gt; interface in the [Zoom web portal](https://zoom.us/).&lt;/p&gt;    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting recording file
         * @param {CloudRecordingApiDeleteRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRecording(requestParameters: CloudRecordingApiDeleteRecordingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRecording(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to return a meeting recording\'s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Details
         * @param {CloudRecordingApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details(requestParameters: CloudRecordingApiDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<AnalyticsDetailsResponse> {
            return localVarFp.details(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all of a meeting\'s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the `download_url` property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  `curl -H \'Authorization: Bearer <ACCESS_TOKEN>\' https://{{base-domain}}/rec/archive/download/xyz`    **Scopes:** `recording:read`,`phone_recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recordings
         * @param {CloudRecordingApiGetMeetingRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingRecordings(requestParameters: CloudRecordingApiGetMeetingRecordingsRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingGetMeetingRecordingsResponse> {
            return localVarFp.getMeetingRecordings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting recording settings
         * @param {CloudRecordingApiGetSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSettings(requestParameters: CloudRecordingApiGetSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingGetSettingsResponse> {
            return localVarFp.getSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user\'s passcode protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  `curl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://{{base-domain}}/rec/archive/download/xyz`    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user\'s account.  **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List all recordings
         * @param {CloudRecordingApiListRecordingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRecordings(requestParameters: CloudRecordingApiListRecordingsRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingListRecordingsResponse> {
            return localVarFp.listRecordings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to list registrants of a past meeting\'s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List recording registrants
         * @param {CloudRecordingApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants(requestParameters: CloudRecordingApiListRegistrantsRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingListRegistrantsResponse> {
            return localVarFp.listRegistrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get registration questions
         * @param {CloudRecordingApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions(requestParameters: CloudRecordingApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<CloudRecordingListRegistrationQuestionsResponse> {
            return localVarFp.listRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover meeting recordings
         * @param {CloudRecordingApiRecoverRecordingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverRecordingStatus(requestParameters: CloudRecordingApiRecoverRecordingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.recoverRecordingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Recover a single recording
         * @param {CloudRecordingApiRecoverStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recoverStatus(requestParameters: CloudRecordingApiRecoverStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.recoverStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to return a meeting recording\'s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get Meeting Recording\'s Analytics Summary
         * @param {CloudRecordingApiSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summary(requestParameters: CloudRecordingApiSummaryRequest, options?: AxiosRequestConfig): AxiosPromise<AnalyticsSummaryResponse> {
            return localVarFp.summary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant\'s status.    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {CloudRecordingApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus(requestParameters: CloudRecordingApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrantStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {CloudRecordingApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions(requestParameters: CloudRecordingApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update meeting recording settings
         * @param {CloudRecordingApiUpdateSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSettings(requestParameters: CloudRecordingApiUpdateSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRegistrant operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiCreateRegistrantRequest
 */
export type CloudRecordingApiCreateRegistrantRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof CloudRecordingApiCreateRegistrant
    */
    readonly meetingId: number
    
} & CloudRecordingCreateRegistrantRequest

/**
 * Request parameters for deleteMeetingRecordings operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiDeleteMeetingRecordingsRequest
 */
export type CloudRecordingApiDeleteMeetingRecordingsRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiDeleteMeetingRecordings
    */
    readonly meetingId: string
    
    /**
    * The recording delete actions:    `trash` - Move recording to trash.    `delete` - Delete recording permanently.
    * @type {'trash' | 'delete'}
    * @memberof CloudRecordingApiDeleteMeetingRecordings
    */
    readonly action?: 'trash' | 'delete'
    
}

/**
 * Request parameters for deleteRecording operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiDeleteRecordingRequest
 */
export type CloudRecordingApiDeleteRecordingRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiDeleteRecording
    */
    readonly meetingId: string
    
    /**
    * The recording ID.
    * @type {string}
    * @memberof CloudRecordingApiDeleteRecording
    */
    readonly recordingId: string
    
    /**
    * The recording delete actions:    `trash` - Move recording to trash.    `delete` - Delete recording permanently.
    * @type {'trash' | 'delete'}
    * @memberof CloudRecordingApiDeleteRecording
    */
    readonly action?: 'trash' | 'delete'
    
}

/**
 * Request parameters for details operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiDetailsRequest
 */
export type CloudRecordingApiDetailsRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiDetails
    */
    readonly meetingId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof CloudRecordingApiDetails
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof CloudRecordingApiDetails
    */
    readonly nextPageToken?: string
    
    /**
    * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
    * @type {string | Date}
    * @memberof CloudRecordingApiDetails
    */
    readonly from?: string | Date
    
    /**
    * The end date for the monthly range to query. The maximum range can be a month.
    * @type {string | Date}
    * @memberof CloudRecordingApiDetails
    */
    readonly to?: string | Date
    
    /**
    * The type of analytics details:  * `by_view` &mdash; by_view.  * `by_download` &mdash; by_download.
    * @type {'by_view' | 'by_download'}
    * @memberof CloudRecordingApiDetails
    */
    readonly type?: 'by_view' | 'by_download'
    
}

/**
 * Request parameters for getMeetingRecordings operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiGetMeetingRecordingsRequest
 */
export type CloudRecordingApiGetMeetingRecordingsRequest = {
    
    /**
    * To get a meeting\'s cloud recordings, provide the meeting ID or UUID. If providing the meeting ID instead of UUID, the response will be for the latest meeting instance.   To get a webinar\'s cloud recordings, provide the webinar\'s ID or UUID. If providing the webinar ID instead of UUID, the response will be for the latest webinar instance.   If a UUID starts with `/` or contains `//` (example: `/ajXp112QmuoKj4854875==`), **[double encode](https://developers.zoom.us) the UUID** before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiGetMeetingRecordings
    */
    readonly meetingId: string
    
    /**
    * The `download_access_token` value for downloading the meeting\'s recordings.
    * @type {string}
    * @memberof CloudRecordingApiGetMeetingRecordings
    */
    readonly includeFields?: string
    
    /**
    * The `download_access_token` Time to Live (TTL) value. This parameter is only valid if the `include_fields` query parameter contains the `download_access_token` value.
    * @type {number}
    * @memberof CloudRecordingApiGetMeetingRecordings
    */
    readonly ttl?: number
    
}

/**
 * Request parameters for getSettings operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiGetSettingsRequest
 */
export type CloudRecordingApiGetSettingsRequest = {
    
    /**
    * The meeting ID enables you to get cloud recording of a: - Meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   - Webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiGetSettings
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for listRecordings operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiListRecordingsRequest
 */
export type CloudRecordingApiListRecordingsRequest = {
    
    /**
    * The user\'s ID or email address. For user-level apps, pass the `me` value.
    * @type {string}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly userId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly pageSize?: number
    
    /**
    * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    * @type {string}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly nextPageToken?: string
    
    /**
    * The query metadata of the recording if using an on-premise meeting connector for the meeting.
    * @type {string}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly mc?: string
    
    /**
    * The query trash. * `true` - List recordings from trash.   * `false` - Do not list recordings from the trash.    The default value is `false`. If you set it to `true`, you can use the `trash_type` property to indicate the type of Cloud recording that you need to retrieve. 
    * @type {boolean}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly trash?: boolean
    
    /**
    * The start date in \'yyyy-mm-dd\' UTC format for the date range where you would like to retrieve recordings. The maximum range can be a month. If no value is provided for this field, the default will be current date.   For example, if you make the API request on June 30, 2020, without providing the `from` and `to` parameters, by default the value of \'from\' field will be `2020-06-30` and the value of the \'to\' field will be `2020-07-01`.   **Note**: The `trash` files cannot be filtered by date range and thus, the `from` and `to` fields should not be used for trash files.
    * @type {string | Date}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly from?: string | Date
    
    /**
    * The end date in \'yyyy-mm-dd\' \'yyyy-mm-dd\' UTC format. 
    * @type {string | Date}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly to?: string | Date
    
    /**
    * The type of cloud recording to retrieve from the trash.     *   `meeting_recordings`: List all meeting recordings from the trash.    *  `recording_file`: List all individual recording files from the trash. 
    * @type {string}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly trashType?: string
    
    /**
    * The meeting ID.
    * @type {number}
    * @memberof CloudRecordingApiListRecordings
    */
    readonly meetingId?: number
    
}

/**
 * Request parameters for listRegistrants operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiListRegistrantsRequest
 */
export type CloudRecordingApiListRegistrantsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof CloudRecordingApiListRegistrants
    */
    readonly meetingId: number
    
    /**
    * Query by the registrant\'s status:  * `pending` &mdash; The registration is pending.  * `approved` &mdash; The registrant is approved.  * `denied` &mdash; The registration is denied.
    * @type {'pending' | 'approved' | 'denied'}
    * @memberof CloudRecordingApiListRegistrants
    */
    readonly status?: 'pending' | 'approved' | 'denied'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof CloudRecordingApiListRegistrants
    */
    readonly pageSize?: number
    
    /**
    * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    * @type {number}
    * @memberof CloudRecordingApiListRegistrants
    */
    readonly pageNumber?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof CloudRecordingApiListRegistrants
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listRegistrationQuestions operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiListRegistrationQuestionsRequest
 */
export type CloudRecordingApiListRegistrationQuestionsRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiListRegistrationQuestions
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for recoverRecordingStatus operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiRecoverRecordingStatusRequest
 */
export type CloudRecordingApiRecoverRecordingStatusRequest = {
    
    /**
    * The meeting\'s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
    * @type {string}
    * @memberof CloudRecordingApiRecoverRecordingStatus
    */
    readonly meetingUUID: string
    
} & CloudRecordingRecoverRecordingStatusRequest

/**
 * Request parameters for recoverStatus operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiRecoverStatusRequest
 */
export type CloudRecordingApiRecoverStatusRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiRecoverStatus
    */
    readonly meetingId: string
    
    /**
    * The recording ID.
    * @type {string}
    * @memberof CloudRecordingApiRecoverStatus
    */
    readonly recordingId: string
    
} & CloudRecordingRecoverStatusRequest

/**
 * Request parameters for summary operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiSummaryRequest
 */
export type CloudRecordingApiSummaryRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiSummary
    */
    readonly meetingId: string
    
    /**
    * The start date for the monthly range to query. The maximum range can be a month. If you do not provide this value, this defaults to the current date.
    * @type {string | Date}
    * @memberof CloudRecordingApiSummary
    */
    readonly from?: string | Date
    
    /**
    * The end date for the monthly range to query. The maximum range can be a month.
    * @type {string | Date}
    * @memberof CloudRecordingApiSummary
    */
    readonly to?: string | Date
    
}

/**
 * Request parameters for updateRegistrantStatus operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiUpdateRegistrantStatusRequest
 */
export type CloudRecordingApiUpdateRegistrantStatusRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof CloudRecordingApiUpdateRegistrantStatus
    */
    readonly meetingId: number
    
} & CloudRecordingUpdateRegistrantStatusRequest

/**
 * Request parameters for updateRegistrationQuestions operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiUpdateRegistrationQuestionsRequest
 */
export type CloudRecordingApiUpdateRegistrationQuestionsRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **[double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid)** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiUpdateRegistrationQuestions
    */
    readonly meetingId: string
    
} & CloudRecordingUpdateRegistrationQuestionsRequest

/**
 * Request parameters for updateSettings operation in CloudRecordingApi.
 * @export
 * @interface CloudRecordingApiUpdateSettingsRequest
 */
export type CloudRecordingApiUpdateSettingsRequest = {
    
    /**
    * To get Cloud Recordings of a meeting, provide the meeting ID or meeting UUID. If the meeting ID is provided instead of UUID,the response will be for the latest meeting instance.   To get Cloud Recordings of a webinar, provide the webinar ID or the webinar UUID. If the webinar ID is provided instead of UUID,the response will be for the latest webinar instance.   If a UUID starts with &quot;/&quot; or contains &quot;//&quot; (example: &quot;/ajXp112QmuoKj4854875==&quot;), you must **double encode** the UUID before making an API request. 
    * @type {string}
    * @memberof CloudRecordingApiUpdateSettings
    */
    readonly meetingId: string
    
} & CloudRecordingUpdateSettingsRequest

/**
 * CloudRecordingApiGenerated - object-oriented interface
 * @export
 * @class CloudRecordingApiGenerated
 * @extends {BaseAPI}
 */
export class CloudRecordingApiGenerated extends BaseAPI {
    /**
     * Cloud Recordings of past Zoom Meetings can be made [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings). Users should be [registered](https://developers.zoom.us) to view these recordings.  Use this API to register a user to gain access to **On-demand Cloud Recordings** of a past meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Create a recording registrant
     * @param {CloudRecordingApiCreateRegistrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public createRegistrant(requestParameters: CloudRecordingApiCreateRegistrantRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).createRegistrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete all recording files of a meeting.           **Prerequisites**: * Cloud Recording should be enabled on the user\'s account.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete meeting recordings
     * @param {CloudRecordingApiDeleteMeetingRecordingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public deleteMeetingRecordings(requestParameters: CloudRecordingApiDeleteMeetingRecordingsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).deleteMeetingRecordings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific recording file from a meeting.&lt;p style=&quot;background-color:#e1f5fe; color:#01579b; padding:8px&quot;&gt; &lt;b&gt;Note:&lt;/b&gt; To use this API, you must enable the &lt;b&gt;The host can delete cloud recordings&lt;/b&gt; setting. You can find this setting in the &lt;b&gt;Recording&lt;/b&gt; tab of the &lt;b&gt;Settings&lt;/b&gt; interface in the [Zoom web portal](https://zoom.us/).&lt;/p&gt;    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting recording file
     * @param {CloudRecordingApiDeleteRecordingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public deleteRecording(requestParameters: CloudRecordingApiDeleteRecordingRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).deleteRecording(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to return a meeting recording\'s [analytics details](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Get Meeting Recording\'s Analytics Details
     * @param {CloudRecordingApiDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public details(requestParameters: CloudRecordingApiDetailsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).details(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all of a meeting\'s [recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording#h_7420acb5-1897-4061-87b4-5b76e99c03b4).   Use the `download_url` property listed in the response to download the recording files.  To access a passcode-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header.     Example:  `curl -H \'Authorization: Bearer <ACCESS_TOKEN>\' https://{{base-domain}}/rec/archive/download/xyz`    **Scopes:** `recording:read`,`phone_recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get meeting recordings
     * @param {CloudRecordingApiGetMeetingRecordingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public getMeetingRecordings(requestParameters: CloudRecordingApiGetMeetingRecordingsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).getMeetingRecordings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).            **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get meeting recording settings
     * @param {CloudRecordingApiGetSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public getSettings(requestParameters: CloudRecordingApiGetSettingsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).getSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all [cloud recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) for a user.    For user-level apps, pass the [`me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  To access a user\'s passcode protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a bearer token in the authorization header.    Example:  `curl -H \"Authorization: Bearer <ACCESS_TOKEN>\" https://{{base-domain}}/rec/archive/download/xyz`    **Prerequisites:**   * Must have a Pro or a higher plan.   * Must enable Cloud Recording on the user\'s account.  **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List all recordings
     * @param {CloudRecordingApiListRecordingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public listRecordings(requestParameters: CloudRecordingApiListRecordingsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).listRecordings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to list registrants of a past meeting\'s [on-demand cloud recordings](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-recordings). Users must [register](https://developers.zoom.us) to view the recordings.      **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List recording registrants
     * @param {CloudRecordingApiListRegistrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public listRegistrants(requestParameters: CloudRecordingApiListRegistrantsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).listRegistrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to retrieve a list of questions that are displayed for users to complete when registering to view the recording of a specific meeting.       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get registration questions
     * @param {CloudRecordingApiListRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public listRegistrationQuestions(requestParameters: CloudRecordingApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).listRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover all deleted [Cloud Recordings](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording) of a specific meeting.          **Prerequisites**:     * A Pro user with Cloud Recording enabled.  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Recover meeting recordings
     * @param {CloudRecordingApiRecoverRecordingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public recoverRecordingStatus(requestParameters: CloudRecordingApiRecoverRecordingStatusRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).recoverRecordingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Zoom allows users to recover recordings from trash for up to 30 days from the deletion date. Use this API to recover a single recording file from the meeting.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Recover a single recording
     * @param {CloudRecordingApiRecoverStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public recoverStatus(requestParameters: CloudRecordingApiRecoverStatusRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).recoverStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to return a meeting recording\'s [analytics summary](https://support.zoom.us/hc/en-us/articles/205347605-Managing-cloud-recordings#h_0b665029-ce74-4849-9794-d1aa0320d163). **Maximum duration: 1 Month**. To access a password-protected cloud recording, send the user\'s [OAuth access token](https://developers.zoom.us/docs/integrations/oauth/) as a Bearer token in the Authorization header. For example,    `curl -H &quot;Authorization: Bearer &lt;ACCESS_TOKEN&gt;&quot; https://{{base-domain}}/rec/archive/download/xyz`       **Scopes:** `recording:read:admin`,`recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Get Meeting Recording\'s Analytics Summary
     * @param {CloudRecordingApiSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public summary(requestParameters: CloudRecordingApiSummaryRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).summary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A registrant can either be approved or denied from viewing the [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) recording.  Use this API to update a registrant\'s status.    **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Update registrant\'s status
     * @param {CloudRecordingApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public updateRegistrantStatus(requestParameters: CloudRecordingApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).updateRegistrantStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * For [on-demand](https://support.zoom.us/hc/en-us/articles/360000488283-On-demand-Recordings) meeting recordings, you can include fields with questions that will be shown to registrants when they register to view the recording.  Use this API to update registration questions that are to be answered by users while registering to view a recording.       **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update registration questions
     * @param {CloudRecordingApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public updateRegistrationQuestions(requestParameters: CloudRecordingApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).updateRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates settings applied to a meeting\'s [Cloud Recording](https://support.zoom.us/hc/en-us/articles/203741855-Cloud-Recording).        **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update meeting recording settings
     * @param {CloudRecordingApiUpdateSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CloudRecordingApiGenerated
     */
    public updateSettings(requestParameters: CloudRecordingApiUpdateSettingsRequest, options?: AxiosRequestConfig) {
        return CloudRecordingApiFp(this.configuration).updateSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
