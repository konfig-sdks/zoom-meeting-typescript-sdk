/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ReportsGetActiveInactiveHostReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetBillingDepartmentReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetBillingInvoicesResponse } from '../models';
// @ts-ignore
import { ReportsGetCloudRecordingUsageReportResponse } from '../models';
// @ts-ignore
import { ReportsGetDailyUsageReportResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingDetailReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingParticipantReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingPollReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingQaReportResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetMeetingReportsUserIdParameterOneOf } from '../models';
// @ts-ignore
import { ReportsGetMeetingSurveyReportResponse } from '../models';
// @ts-ignore
import { ReportsGetOperationLogsReportResponse } from '../models';
// @ts-ignore
import { ReportsGetTelephoneReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetWebinarDetailsReportResponse } from '../models';
// @ts-ignore
import { ReportsGetWebinarPollReportsResponse } from '../models';
// @ts-ignore
import { ReportsGetWebinarQaReportResponse } from '../models';
// @ts-ignore
import { ReportsGetWebinarSurveyReportResponse } from '../models';
// @ts-ignore
import { ReportsListSignInSignOutActivitiesResponse } from '../models';
// @ts-ignore
import { ReportsListUpcomingEventsReportResponse } from '../models';
// @ts-ignore
import { ReportsWebinarParticipantsListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get active/inactive host reports
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &#x60;from&#x60; and &#x60;to&#x60; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {'active' | 'inactive'} [type] Active or inactive hosts.    &#x60;active&#x60; - Active hosts.     &#x60;inactive&#x60; - Inactive hosts.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] The page number of the current page in the returned records.
         * @param {string} [nextPageToken] The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
         * @param {string} [groupId] The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveInactiveHostReports: async (from: string | Date, to: string | Date, type?: 'active' | 'inactive', pageSize?: number, pageNumber?: number, nextPageToken?: string, groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getActiveInactiveHostReports', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getActiveInactiveHostReports', 'to', to)
            const localVarPath = `/report/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingDepartmentReports: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report/billing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/billing',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing invoice reports
         * @param {string} billingId Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.   
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingInvoices: async (billingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'billingId' is not null or undefined
            assertParamExists('getBillingInvoices', 'billingId', billingId)
            const localVarPath = `/report/billing/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (billingId !== undefined) {
                localVarQueryParameter['billing_id'] = billingId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/billing/invoices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get cloud recording usage report
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {string} [groupId] The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudRecordingUsageReport: async (from: string | Date, to: string | Date, groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getCloudRecordingUsageReport', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getCloudRecordingUsageReport', 'to', to)
            const localVarPath = `/report/cloud_recording`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/cloud_recording',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get daily usage report
         * @param {number} [year] Year for this report
         * @param {number} [month] Month for this report
         * @param {string} [groupId] The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyUsageReport: async (year?: number, month?: number, groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report/daily`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/daily',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting detail reports
         * @param {ReportsGetMeetingDetailReportsMeetingIdParameter} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingDetailReports: async (meetingId: ReportsGetMeetingDetailReportsMeetingIdParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingDetailReports', 'meetingId', meetingId)
            const localVarPath = `/report/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/meetings/{meetingId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants\' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting participant reports
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {'registrant_id'} [includeFields] Provide &#x60;registrant_id&#x60; as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://developers.zoom.us).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingParticipantReports: async (meetingId: string, pageSize?: number, nextPageToken?: string, includeFields?: 'registrant_id', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingParticipantReports', 'meetingId', meetingId)
            const localVarPath = `/report/meetings/{meetingId}/participants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (includeFields !== undefined) {
                localVarQueryParameter['include_fields'] = includeFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/meetings/{meetingId}/participants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting poll reports
         * @param {ReportsGetMeetingPollReportsMeetingIdParameter} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingPollReports: async (meetingId: ReportsGetMeetingPollReportsMeetingIdParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingPollReports', 'meetingId', meetingId)
            const localVarPath = `/report/meetings/{meetingId}/polls`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/meetings/{meetingId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting Q&A report
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingQaReport: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingQaReport', 'meetingId', meetingId)
            const localVarPath = `/report/meetings/{meetingId}/qa`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/meetings/{meetingId}/qa',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting reports
         * @param {ReportsGetMeetingReportsUserIdParameter} userId The user ID or email address of the user. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {'past' | 'pastOne' | 'pastJoined'} [type] The meeting type to query for:  * &#x60;past&#x60; &amp;mdash; All past meetings.  * &#x60;pastOne&#x60; &amp;mdash; A single past user meeting.  * &#x60;pastJoined&#x60; &amp;mdash; All past meetings the account\&#39;s users hosted or joined.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingReports: async (userId: ReportsGetMeetingReportsUserIdParameter, from: string | Date, to: string | Date, pageSize?: number, nextPageToken?: string, type?: 'past' | 'pastOne' | 'pastJoined', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getMeetingReports', 'userId', userId)
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getMeetingReports', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getMeetingReports', 'to', to)
            const localVarPath = `/report/users/{userId}/meetings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/users/{userId}/meetings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting survey report
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSurveyReport: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingSurveyReport', 'meetingId', meetingId)
            const localVarPath = `/report/meetings/{meetingId}/survey`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/meetings/{meetingId}/survey',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get operation logs report
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {'all' | 'user' | 'user_settings' | 'account' | 'billing' | 'im' | 'recording' | 'phone_contacts' | 'webinar' | 'sub_account' | 'role' | 'zoom_rooms'} [categoryType] **Optional**     Filter your response by a category type to see reports for a specific category. The value for this field can be one of the following:     &#x60;all&#x60;    &#x60;user&#x60;    &#x60;user_settings&#x60;    &#x60;account&#x60;    &#x60;billing&#x60;    &#x60;im&#x60;    &#x60;recording&#x60;    &#x60;phone_contacts&#x60;    &#x60;webinar&#x60;    &#x60;sub_account&#x60;    &#x60;role&#x60;    &#x60;zoom_rooms&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationLogsReport: async (from: string | Date, to: string | Date, pageSize?: number, nextPageToken?: string, categoryType?: 'all' | 'user' | 'user_settings' | 'account' | 'billing' | 'im' | 'recording' | 'phone_contacts' | 'webinar' | 'sub_account' | 'role' | 'zoom_rooms', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getOperationLogsReport', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getOperationLogsReport', 'to', to)
            const localVarPath = `/report/operationlogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (categoryType !== undefined) {
                localVarQueryParameter['category_type'] = categoryType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/operationlogs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get telephone reports
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {'1' | '2' | '3'} [type] Audio types:    &#x60;1&#x60; - Toll-free Call-in &amp;amp; Call-out.    &#x60;2&#x60; - Toll      &#x60;3&#x60; - SIP Connected Audio
         * @param {'start_time' | 'end_time' | 'meeting_start_time' | 'meeting_end_time'} [queryDateType] The type of date to query.  * &#x60;start_time&#x60; &amp;mdash; Query by call start time.  * &#x60;end_time&#x60; &amp;mdash; Query by call end time.  * &#x60;meeting_start_time&#x60; &amp;mdash; Query by meeting start time.  * &#x60;meeting_end_time&#x60; &amp;mdash; Query by meeting end time.   This value defaults to &#x60;start_time&#x60;.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] The page number of the current page in the returned records. This field is **not** available if the &#x60;query_date_type&#x60; parameter is the &#x60;meeting_start_time&#x60; or &#x60;meeting_end_time&#x60; value.   This field is deprecated. Use the &#x60;next_page_token&#x60; query parameter for pagination.
         * @param {string} [nextPageToken] The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTelephoneReports: async (from: string | Date, to: string | Date, type?: '1' | '2' | '3', queryDateType?: 'start_time' | 'end_time' | 'meeting_start_time' | 'meeting_end_time', pageSize?: number, pageNumber?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getTelephoneReports', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getTelephoneReports', 'to', to)
            const localVarPath = `/report/telephone`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (queryDateType !== undefined) {
                localVarQueryParameter['query_date_type'] = queryDateType;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/telephone',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar detail reports
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarDetailsReport: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getWebinarDetailsReport', 'webinarId', webinarId)
            const localVarPath = `/report/webinars/{webinarId}`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/webinars/{webinarId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar poll reports
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarPollReports: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getWebinarPollReports', 'webinarId', webinarId)
            const localVarPath = `/report/webinars/{webinarId}/polls`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/webinars/{webinarId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar Q&A report
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarQAReport: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getWebinarQAReport', 'webinarId', webinarId)
            const localVarPath = `/report/webinars/{webinarId}/qa`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/webinars/{webinarId}/qa',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar survey report
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarSurveyReport: async (webinarId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('getWebinarSurveyReport', 'webinarId', webinarId)
            const localVarPath = `/report/webinars/{webinarId}/survey`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/webinars/{webinarId}/survey',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get sign In / sign out activity report
         * @param {string | Date} [from] Start date for which you would like to view the activity logs report. Using the &#x60;from&#x60; and &#x60;to&#x60; parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months.
         * @param {string | Date} [to] End date up to which you would like to view the activity logs report.
         * @param {number} [pageSize] The number of records to be returned within a single API call
         * @param {string} [nextPageToken] Next page token is used to paginate through large result sets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSignInSignOutActivities: async (from?: string | Date, to?: string | Date, pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/report/activities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/activities',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report\'s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get upcoming events report
         * @param {string | Date} from Start date in \&#39;yyyy-mm-dd\&#39; format. The date range defined by the &amp;quot;from&amp;quot; and &amp;quot;to&amp;quot; parameters should only be one month as the report includes only one month worth of data at once.
         * @param {string | Date} to End date.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {'meeting' | 'webinar' | 'all'} [type] The type of event to query.  * &#x60;meeting&#x60; &amp;mdash; A meeting event.  * &#x60;webinar&#x60; &amp;mdash; A webinar event.  * &#x60;all&#x60; &amp;mdash; Both meeting and webinar events.  This value defaults to &#x60;all&#x60;.
         * @param {string} [groupId] The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain meetings where the host is a member of the queried group ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpcomingEventsReport: async (from: string | Date, to: string | Date, pageSize?: number, nextPageToken?: string, type?: 'meeting' | 'webinar' | 'all', groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('listUpcomingEventsReport', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('listUpcomingEventsReport', 'to', to)
            const localVarPath = `/report/upcoming_events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/upcoming_events',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar participant reports
         * @param {string} webinarId The webinar\&#39;s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the webinar UUID before making an API request.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {'registrant_id'} [includeFields] The additional query parameters to include.  * &#x60;registrant_id&#x60; - Include the registrant\&#39;s ID in the API response. The registrant ID is the webinar participant\&#39;s unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webinarParticipantsList: async (webinarId: string, pageSize?: number, nextPageToken?: string, includeFields?: 'registrant_id', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'webinarId' is not null or undefined
            assertParamExists('webinarParticipantsList', 'webinarId', webinarId)
            const localVarPath = `/report/webinars/{webinarId}/participants`
                .replace(`{${"webinarId"}}`, encodeURIComponent(String(webinarId !== undefined ? webinarId : `-webinarId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["report:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (includeFields !== undefined) {
                localVarQueryParameter['include_fields'] = includeFields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/report/webinars/{webinarId}/participants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get active/inactive host reports
         * @param {ReportsApiGetActiveInactiveHostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActiveInactiveHostReports(requestParameters: ReportsApiGetActiveInactiveHostReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetActiveInactiveHostReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActiveInactiveHostReports(requestParameters.from, requestParameters.to, requestParameters.type, requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillingDepartmentReports(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetBillingDepartmentReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillingDepartmentReports(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing invoice reports
         * @param {ReportsApiGetBillingInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBillingInvoices(requestParameters: ReportsApiGetBillingInvoicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetBillingInvoicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBillingInvoices(requestParameters.billingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get cloud recording usage report
         * @param {ReportsApiGetCloudRecordingUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCloudRecordingUsageReport(requestParameters: ReportsApiGetCloudRecordingUsageReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetCloudRecordingUsageReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCloudRecordingUsageReport(requestParameters.from, requestParameters.to, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get daily usage report
         * @param {ReportsApiGetDailyUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyUsageReport(requestParameters: ReportsApiGetDailyUsageReportRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetDailyUsageReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyUsageReport(requestParameters.year, requestParameters.month, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting detail reports
         * @param {ReportsApiGetMeetingDetailReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingDetailReports(requestParameters: ReportsApiGetMeetingDetailReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingDetailReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingDetailReports(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants\' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting participant reports
         * @param {ReportsApiGetMeetingParticipantReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingParticipantReports(requestParameters: ReportsApiGetMeetingParticipantReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingParticipantReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingParticipantReports(requestParameters.meetingId, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.includeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting poll reports
         * @param {ReportsApiGetMeetingPollReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingPollReports(requestParameters: ReportsApiGetMeetingPollReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingPollReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingPollReports(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting Q&A report
         * @param {ReportsApiGetMeetingQaReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingQaReport(requestParameters: ReportsApiGetMeetingQaReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingQaReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingQaReport(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting reports
         * @param {ReportsApiGetMeetingReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingReports(requestParameters: ReportsApiGetMeetingReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingReports(requestParameters.userId, requestParameters.from, requestParameters.to, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting survey report
         * @param {ReportsApiGetMeetingSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingSurveyReport(requestParameters: ReportsApiGetMeetingSurveyReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetMeetingSurveyReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingSurveyReport(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get operation logs report
         * @param {ReportsApiGetOperationLogsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperationLogsReport(requestParameters: ReportsApiGetOperationLogsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetOperationLogsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOperationLogsReport(requestParameters.from, requestParameters.to, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.categoryType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get telephone reports
         * @param {ReportsApiGetTelephoneReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTelephoneReports(requestParameters: ReportsApiGetTelephoneReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetTelephoneReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTelephoneReports(requestParameters.from, requestParameters.to, requestParameters.type, requestParameters.queryDateType, requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar detail reports
         * @param {ReportsApiGetWebinarDetailsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarDetailsReport(requestParameters: ReportsApiGetWebinarDetailsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetWebinarDetailsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebinarDetailsReport(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar poll reports
         * @param {ReportsApiGetWebinarPollReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarPollReports(requestParameters: ReportsApiGetWebinarPollReportsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetWebinarPollReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebinarPollReports(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar Q&A report
         * @param {ReportsApiGetWebinarQAReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarQAReport(requestParameters: ReportsApiGetWebinarQAReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetWebinarQaReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebinarQAReport(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar survey report
         * @param {ReportsApiGetWebinarSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebinarSurveyReport(requestParameters: ReportsApiGetWebinarSurveyReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsGetWebinarSurveyReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebinarSurveyReport(requestParameters.webinarId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get sign In / sign out activity report
         * @param {ReportsApiListSignInSignOutActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSignInSignOutActivities(requestParameters: ReportsApiListSignInSignOutActivitiesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListSignInSignOutActivitiesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSignInSignOutActivities(requestParameters.from, requestParameters.to, requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report\'s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get upcoming events report
         * @param {ReportsApiListUpcomingEventsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUpcomingEventsReport(requestParameters: ReportsApiListUpcomingEventsReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsListUpcomingEventsReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpcomingEventsReport(requestParameters.from, requestParameters.to, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.type, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar participant reports
         * @param {ReportsApiWebinarParticipantsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webinarParticipantsList(requestParameters: ReportsApiWebinarParticipantsListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportsWebinarParticipantsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webinarParticipantsList(requestParameters.webinarId, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.includeFields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get active/inactive host reports
         * @param {ReportsApiGetActiveInactiveHostReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActiveInactiveHostReports(requestParameters: ReportsApiGetActiveInactiveHostReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetActiveInactiveHostReportsResponse> {
            return localVarFp.getActiveInactiveHostReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing reports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingDepartmentReports(options?: AxiosRequestConfig): AxiosPromise<ReportsGetBillingDepartmentReportsResponse> {
            return localVarFp.getBillingDepartmentReports(options).then((request) => request(axios, basePath));
        },
        /**
         * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get billing invoice reports
         * @param {ReportsApiGetBillingInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBillingInvoices(requestParameters: ReportsApiGetBillingInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetBillingInvoicesResponse> {
            return localVarFp.getBillingInvoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get cloud recording usage report
         * @param {ReportsApiGetCloudRecordingUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCloudRecordingUsageReport(requestParameters: ReportsApiGetCloudRecordingUsageReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetCloudRecordingUsageReportResponse> {
            return localVarFp.getCloudRecordingUsageReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get daily usage report
         * @param {ReportsApiGetDailyUsageReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyUsageReport(requestParameters: ReportsApiGetDailyUsageReportRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReportsGetDailyUsageReportResponse> {
            return localVarFp.getDailyUsageReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting detail reports
         * @param {ReportsApiGetMeetingDetailReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingDetailReports(requestParameters: ReportsApiGetMeetingDetailReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingDetailReportsResponse> {
            return localVarFp.getMeetingDetailReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants\' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting participant reports
         * @param {ReportsApiGetMeetingParticipantReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingParticipantReports(requestParameters: ReportsApiGetMeetingParticipantReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingParticipantReportsResponse> {
            return localVarFp.getMeetingParticipantReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting poll reports
         * @param {ReportsApiGetMeetingPollReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingPollReports(requestParameters: ReportsApiGetMeetingPollReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingPollReportsResponse> {
            return localVarFp.getMeetingPollReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting Q&A report
         * @param {ReportsApiGetMeetingQaReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingQaReport(requestParameters: ReportsApiGetMeetingQaReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingQaReportResponse> {
            return localVarFp.getMeetingQaReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get meeting reports
         * @param {ReportsApiGetMeetingReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingReports(requestParameters: ReportsApiGetMeetingReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingReportsResponse> {
            return localVarFp.getMeetingReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get meeting survey report
         * @param {ReportsApiGetMeetingSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSurveyReport(requestParameters: ReportsApiGetMeetingSurveyReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetMeetingSurveyReportResponse> {
            return localVarFp.getMeetingSurveyReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get operation logs report
         * @param {ReportsApiGetOperationLogsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperationLogsReport(requestParameters: ReportsApiGetOperationLogsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetOperationLogsReportResponse> {
            return localVarFp.getOperationLogsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get telephone reports
         * @param {ReportsApiGetTelephoneReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTelephoneReports(requestParameters: ReportsApiGetTelephoneReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetTelephoneReportsResponse> {
            return localVarFp.getTelephoneReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar detail reports
         * @param {ReportsApiGetWebinarDetailsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarDetailsReport(requestParameters: ReportsApiGetWebinarDetailsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetWebinarDetailsReportResponse> {
            return localVarFp.getWebinarDetailsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar poll reports
         * @param {ReportsApiGetWebinarPollReportsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarPollReports(requestParameters: ReportsApiGetWebinarPollReportsRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetWebinarPollReportsResponse> {
            return localVarFp.getWebinarPollReports(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar Q&A report
         * @param {ReportsApiGetWebinarQAReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarQAReport(requestParameters: ReportsApiGetWebinarQAReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetWebinarQaReportResponse> {
            return localVarFp.getWebinarQAReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
         * @summary Get webinar survey report
         * @param {ReportsApiGetWebinarSurveyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebinarSurveyReport(requestParameters: ReportsApiGetWebinarSurveyReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsGetWebinarSurveyReportResponse> {
            return localVarFp.getWebinarSurveyReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get sign In / sign out activity report
         * @param {ReportsApiListSignInSignOutActivitiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSignInSignOutActivities(requestParameters: ReportsApiListSignInSignOutActivitiesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ReportsListSignInSignOutActivitiesResponse> {
            return localVarFp.listSignInSignOutActivities(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report\'s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get upcoming events report
         * @param {ReportsApiListUpcomingEventsReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpcomingEventsReport(requestParameters: ReportsApiListUpcomingEventsReportRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsListUpcomingEventsReportResponse> {
            return localVarFp.listUpcomingEventsReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Get webinar participant reports
         * @param {ReportsApiWebinarParticipantsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webinarParticipantsList(requestParameters: ReportsApiWebinarParticipantsListRequest, options?: AxiosRequestConfig): AxiosPromise<ReportsWebinarParticipantsListResponse> {
            return localVarFp.webinarParticipantsList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getActiveInactiveHostReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetActiveInactiveHostReportsRequest
 */
export type ReportsApiGetActiveInactiveHostReportsRequest = {
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the `from` and `to` parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly to: string | Date
    
    /**
    * Active or inactive hosts.    `active` - Active hosts.     `inactive` - Inactive hosts.
    * @type {'active' | 'inactive'}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly type?: 'active' | 'inactive'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly pageSize?: number
    
    /**
    * The page number of the current page in the returned records.
    * @type {number}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly pageNumber?: number
    
    /**
    * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    * @type {string}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly nextPageToken?: string
    
    /**
    * The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
    * @type {string}
    * @memberof ReportsApiGetActiveInactiveHostReports
    */
    readonly groupId?: string
    
}

/**
 * Request parameters for getBillingInvoices operation in ReportsApi.
 * @export
 * @interface ReportsApiGetBillingInvoicesRequest
 */
export type ReportsApiGetBillingInvoicesRequest = {
    
    /**
    * Unique Identifier of the Billing Report. Retrieve this ID from the response of **Get Billing Reports** API request.   
    * @type {string}
    * @memberof ReportsApiGetBillingInvoices
    */
    readonly billingId: string
    
}

/**
 * Request parameters for getCloudRecordingUsageReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetCloudRecordingUsageReportRequest
 */
export type ReportsApiGetCloudRecordingUsageReportRequest = {
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiGetCloudRecordingUsageReport
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiGetCloudRecordingUsageReport
    */
    readonly to: string | Date
    
    /**
    * The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
    * @type {string}
    * @memberof ReportsApiGetCloudRecordingUsageReport
    */
    readonly groupId?: string
    
}

/**
 * Request parameters for getDailyUsageReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetDailyUsageReportRequest
 */
export type ReportsApiGetDailyUsageReportRequest = {
    
    /**
    * Year for this report
    * @type {number}
    * @memberof ReportsApiGetDailyUsageReport
    */
    readonly year?: number
    
    /**
    * Month for this report
    * @type {number}
    * @memberof ReportsApiGetDailyUsageReport
    */
    readonly month?: number
    
    /**
    * The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain users who are members of the queried group ID.
    * @type {string}
    * @memberof ReportsApiGetDailyUsageReport
    */
    readonly groupId?: string
    
}

/**
 * Request parameters for getMeetingDetailReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingDetailReportsRequest
 */
export type ReportsApiGetMeetingDetailReportsRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    * @type {ReportsGetMeetingDetailReportsMeetingIdParameter}
    * @memberof ReportsApiGetMeetingDetailReports
    */
    readonly meetingId: ReportsGetMeetingDetailReportsMeetingIdParameter
    
}

/**
 * Request parameters for getMeetingParticipantReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingParticipantReportsRequest
 */
export type ReportsApiGetMeetingParticipantReportsRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetMeetingParticipantReports
    */
    readonly meetingId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiGetMeetingParticipantReports
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ReportsApiGetMeetingParticipantReports
    */
    readonly nextPageToken?: string
    
    /**
    * Provide `registrant_id` as the value for this field if you would like to see the registrant ID attribute in the response of this API call. A registrant ID is a unique identifier of a [meeting registrant](https://developers.zoom.us).
    * @type {'registrant_id'}
    * @memberof ReportsApiGetMeetingParticipantReports
    */
    readonly includeFields?: 'registrant_id'
    
}

/**
 * Request parameters for getMeetingPollReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingPollReportsRequest
 */
export type ReportsApiGetMeetingPollReportsRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    * @type {ReportsGetMeetingPollReportsMeetingIdParameter}
    * @memberof ReportsApiGetMeetingPollReports
    */
    readonly meetingId: ReportsGetMeetingPollReportsMeetingIdParameter
    
}

/**
 * Request parameters for getMeetingQaReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingQaReportRequest
 */
export type ReportsApiGetMeetingQaReportRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetMeetingQaReport
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for getMeetingReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingReportsRequest
 */
export type ReportsApiGetMeetingReportsRequest = {
    
    /**
    * The user ID or email address of the user. For user-level apps, pass the `me` value.
    * @type {ReportsGetMeetingReportsUserIdParameter}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly userId: ReportsGetMeetingReportsUserIdParameter
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly to: string | Date
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly nextPageToken?: string
    
    /**
    * The meeting type to query for:  * `past` &mdash; All past meetings.  * `pastOne` &mdash; A single past user meeting.  * `pastJoined` &mdash; All past meetings the account\'s users hosted or joined.
    * @type {'past' | 'pastOne' | 'pastJoined'}
    * @memberof ReportsApiGetMeetingReports
    */
    readonly type?: 'past' | 'pastOne' | 'pastJoined'
    
}

/**
 * Request parameters for getMeetingSurveyReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetMeetingSurveyReportRequest
 */
export type ReportsApiGetMeetingSurveyReportRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetMeetingSurveyReport
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for getOperationLogsReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetOperationLogsReportRequest
 */
export type ReportsApiGetOperationLogsReportRequest = {
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiGetOperationLogsReport
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiGetOperationLogsReport
    */
    readonly to: string | Date
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiGetOperationLogsReport
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ReportsApiGetOperationLogsReport
    */
    readonly nextPageToken?: string
    
    /**
    * **Optional**     Filter your response by a category type to see reports for a specific category. The value for this field can be one of the following:     `all`    `user`    `user_settings`    `account`    `billing`    `im`    `recording`    `phone_contacts`    `webinar`    `sub_account`    `role`    `zoom_rooms`
    * @type {'all' | 'user' | 'user_settings' | 'account' | 'billing' | 'im' | 'recording' | 'phone_contacts' | 'webinar' | 'sub_account' | 'role' | 'zoom_rooms'}
    * @memberof ReportsApiGetOperationLogsReport
    */
    readonly categoryType?: 'all' | 'user' | 'user_settings' | 'account' | 'billing' | 'im' | 'recording' | 'phone_contacts' | 'webinar' | 'sub_account' | 'role' | 'zoom_rooms'
    
}

/**
 * Request parameters for getTelephoneReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetTelephoneReportsRequest
 */
export type ReportsApiGetTelephoneReportsRequest = {
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly to: string | Date
    
    /**
    * Audio types:    `1` - Toll-free Call-in &amp; Call-out.    `2` - Toll      `3` - SIP Connected Audio
    * @type {'1' | '2' | '3'}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly type?: '1' | '2' | '3'
    
    /**
    * The type of date to query.  * `start_time` &mdash; Query by call start time.  * `end_time` &mdash; Query by call end time.  * `meeting_start_time` &mdash; Query by meeting start time.  * `meeting_end_time` &mdash; Query by meeting end time.   This value defaults to `start_time`.
    * @type {'start_time' | 'end_time' | 'meeting_start_time' | 'meeting_end_time'}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly queryDateType?: 'start_time' | 'end_time' | 'meeting_start_time' | 'meeting_end_time'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly pageSize?: number
    
    /**
    * The page number of the current page in the returned records. This field is **not** available if the `query_date_type` parameter is the `meeting_start_time` or `meeting_end_time` value.   This field is deprecated. Use the `next_page_token` query parameter for pagination.
    * @type {number}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly pageNumber?: number
    
    /**
    * The next page token is used to paginate through large result sets. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    * @type {string}
    * @memberof ReportsApiGetTelephoneReports
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for getWebinarDetailsReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetWebinarDetailsReportRequest
 */
export type ReportsApiGetWebinarDetailsReportRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the webinar UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetWebinarDetailsReport
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getWebinarPollReports operation in ReportsApi.
 * @export
 * @interface ReportsApiGetWebinarPollReportsRequest
 */
export type ReportsApiGetWebinarPollReportsRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetWebinarPollReports
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getWebinarQAReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetWebinarQAReportRequest
 */
export type ReportsApiGetWebinarQAReportRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetWebinarQAReport
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for getWebinarSurveyReport operation in ReportsApi.
 * @export
 * @interface ReportsApiGetWebinarSurveyReportRequest
 */
export type ReportsApiGetWebinarSurveyReportRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API returns a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiGetWebinarSurveyReport
    */
    readonly webinarId: string
    
}

/**
 * Request parameters for listSignInSignOutActivities operation in ReportsApi.
 * @export
 * @interface ReportsApiListSignInSignOutActivitiesRequest
 */
export type ReportsApiListSignInSignOutActivitiesRequest = {
    
    /**
    * Start date for which you would like to view the activity logs report. Using the `from` and `to` parameters, specify a monthly date range for the report as the API only provides one month worth of data in one request. The specified date range should fall within the last six months.
    * @type {string | Date}
    * @memberof ReportsApiListSignInSignOutActivities
    */
    readonly from?: string | Date
    
    /**
    * End date up to which you would like to view the activity logs report.
    * @type {string | Date}
    * @memberof ReportsApiListSignInSignOutActivities
    */
    readonly to?: string | Date
    
    /**
    * The number of records to be returned within a single API call
    * @type {number}
    * @memberof ReportsApiListSignInSignOutActivities
    */
    readonly pageSize?: number
    
    /**
    * Next page token is used to paginate through large result sets
    * @type {string}
    * @memberof ReportsApiListSignInSignOutActivities
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listUpcomingEventsReport operation in ReportsApi.
 * @export
 * @interface ReportsApiListUpcomingEventsReportRequest
 */
export type ReportsApiListUpcomingEventsReportRequest = {
    
    /**
    * Start date in \'yyyy-mm-dd\' format. The date range defined by the &quot;from&quot; and &quot;to&quot; parameters should only be one month as the report includes only one month worth of data at once.
    * @type {string | Date}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly from: string | Date
    
    /**
    * End date.
    * @type {string | Date}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly to: string | Date
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly nextPageToken?: string
    
    /**
    * The type of event to query.  * `meeting` &mdash; A meeting event.  * `webinar` &mdash; A webinar event.  * `all` &mdash; Both meeting and webinar events.  This value defaults to `all`.
    * @type {'meeting' | 'webinar' | 'all'}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly type?: 'meeting' | 'webinar' | 'all'
    
    /**
    * The group ID. To get a group ID, use the [**List groups**](https://developers.zoom.us) API.    **Note:** The API response will only contain meetings where the host is a member of the queried group ID.
    * @type {string}
    * @memberof ReportsApiListUpcomingEventsReport
    */
    readonly groupId?: string
    
}

/**
 * Request parameters for webinarParticipantsList operation in ReportsApi.
 * @export
 * @interface ReportsApiWebinarParticipantsListRequest
 */
export type ReportsApiWebinarParticipantsListRequest = {
    
    /**
    * The webinar\'s ID or universally unique ID (UUID).  * If you provide a webinar ID, the API will return a response for the latest webinar instance.  * If you provide a webinar UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the webinar UUID before making an API request.
    * @type {string}
    * @memberof ReportsApiWebinarParticipantsList
    */
    readonly webinarId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ReportsApiWebinarParticipantsList
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ReportsApiWebinarParticipantsList
    */
    readonly nextPageToken?: string
    
    /**
    * The additional query parameters to include.  * `registrant_id` - Include the registrant\'s ID in the API response. The registrant ID is the webinar participant\'s unique ID.
    * @type {'registrant_id'}
    * @memberof ReportsApiWebinarParticipantsList
    */
    readonly includeFields?: 'registrant_id'
    
}

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * Retrieve a host report for a specified period of time within the last six months.   The report time range is limited to a month.   You can specify the type of report and date range using the query parameters.     * The **Active Hosts** report displays a list of meetings, participants, and meeting minutes. An **active host** is defined as any user who has hosted at least one meeting during the during the month specified in the `from` and `to` range.   * The **Inactive Hosts** report pulls a list of users who were not active during a specific period of time.    An **inactive host** is defined as any user who has not hosted any meetings during the specified period of time for the report. to be inactive.               **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get active/inactive host reports
     * @param {ReportsApiGetActiveInactiveHostReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getActiveInactiveHostReports(requestParameters: ReportsApiGetActiveInactiveHostReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getActiveInactiveHostReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get department billing reports of a Zoom account.  **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact Zoom Support team for details.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get billing reports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getBillingDepartmentReports(options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getBillingDepartmentReports(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get department billing invoices reports for a specific billing period. Provide the `billing_id` of the billing period for which you would like to retrieve the invoices for. This ID can be retrieved from **Get Billing Reports** API.   **Prerequisites:**     * Pro or a higher account with Department Billing option enabled. Contact the Zoom Support team to enable this feature.    **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get billing invoice reports
     * @param {ReportsApiGetBillingInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getBillingInvoices(requestParameters: ReportsApiGetBillingInvoicesRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getBillingInvoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve cloud recording usage report for a specified period. You can only get cloud recording reports that is one day earlier than the current date and for the most recent period of 6 months. The date gap between from and to dates should be smaller or equal to 30 days.      **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get cloud recording usage report
     * @param {ReportsApiGetCloudRecordingUsageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getCloudRecordingUsageReport(requestParameters: ReportsApiGetCloudRecordingUsageReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getCloudRecordingUsageReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve daily report to access the account-wide usage of Zoom services for each day in a given month. It lists the number of new users, meetings, participants, and meeting minutes.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get daily usage report
     * @param {ReportsApiGetDailyUsageReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getDailyUsageReport(requestParameters: ReportsApiGetDailyUsageReportRequest = {}, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getDailyUsageReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a detailed report for a past meeting.      **Prerequisites:**     * Pro or a higher plan.         **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get meeting detail reports
     * @param {ReportsApiGetMeetingDetailReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingDetailReports(requestParameters: ReportsApiGetMeetingDetailReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingDetailReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a report of a past meeting with two or more participants, including the host. To return a report for past meeting with only **one** participant, use the [**List meeting participants**](https://developers.zoom.us) API.   **Note:**   This API may return empty values for participants\' `user_name`, `ip_address`, `location`, and `email` responses when the account calling this API:  * Does **not** have a signed HIPAA business associate agreement (BAA).  * Is a [**legacy** HIPAA BAA account](https://developers.zoom.us).   **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get meeting participant reports
     * @param {ReportsApiGetMeetingParticipantReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingParticipantReports(requestParameters: ReportsApiGetMeetingParticipantReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingParticipantReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to get a report of [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) results for a past meeting.    **Prerequisites:**  * A Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get meeting poll reports
     * @param {ReportsApiGetMeetingPollReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingPollReports(requestParameters: ReportsApiGetMeetingPollReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingPollReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a report on questions asked and answered by participants from past meetings.             **Prerequisites:**     * Pro plan or higher.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get meeting Q&A report
     * @param {ReportsApiGetMeetingQaReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingQaReport(requestParameters: ReportsApiGetMeetingQaReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingQaReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve [report](https://support.zoom.us/hc/en-us/articles/216378603-Meeting-Reporting) on past meetings and webinars for a specified time period. The time range for the report is limited to a month and the month must fall within the past six months.  Meetings and webinars are returned only if they have two or more unique participants.            **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get meeting reports
     * @param {ReportsApiGetMeetingReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingReports(requestParameters: ReportsApiGetMeetingReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a report on past [meeting survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get meeting survey report
     * @param {ReportsApiGetMeetingSurveyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getMeetingSurveyReport(requestParameters: ReportsApiGetMeetingSurveyReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getMeetingSurveyReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The [Operations Logs](https://support.zoom.us/hc/en-us/articles/360032748331-Operation-Logs) report allows you to audit admin and user activity, such as adding a new user, changing account settings, and deleting recordings.     Use this API to retrieve operation logs report for a specified period of time.     **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get operation logs report
     * @param {ReportsApiGetOperationLogsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getOperationLogsReport(requestParameters: ReportsApiGetOperationLogsReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getOperationLogsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The [telephone report](https://support.zoom.us/hc/en-us/articles/206514816-Telephone-reports) allows you to view who dialed into meetings via phone (Audio Conferencing or SIP Connected Audio) and which number they dialed into and other details. Use this API to get telephone report for a specified period of time.  **Prerequisites:**     * Pro or higher plan.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get telephone reports
     * @param {ReportsApiGetTelephoneReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getTelephoneReports(requestParameters: ReportsApiGetTelephoneReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getTelephoneReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a [report](https://support.zoom.us/hc/en-us/articles/201393719-Webinar-Reporting) containing past webinar details.            **Prerequisites:**     * Pro or higher plan with Webinar add-on.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get webinar detail reports
     * @param {ReportsApiGetWebinarDetailsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getWebinarDetailsReport(requestParameters: ReportsApiGetWebinarDetailsReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getWebinarDetailsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a report on past [webinar polls](https://support.zoom.us/hc/en-us/articles/203749865-Polling-for-Webinars).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get webinar poll reports
     * @param {ReportsApiGetWebinarPollReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getWebinarPollReports(requestParameters: ReportsApiGetWebinarPollReportsRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getWebinarPollReports(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a report on questions asked by participants and answered by panelists, co-hosts and hosts from past webinars.             **Prerequisites:**     * Pro or a higher plan with the Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get webinar Q&A report
     * @param {ReportsApiGetWebinarQAReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getWebinarQAReport(requestParameters: ReportsApiGetWebinarQAReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getWebinarQAReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a report on past [webinar survey](https://support.zoom.com/hc/en/article?id=zm_kb&sysparm_article=KB0057559).          **Prerequisites:**     * Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `HEAVY`
     * @summary Get webinar survey report
     * @param {ReportsApiGetWebinarSurveyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public getWebinarSurveyReport(requestParameters: ReportsApiGetWebinarSurveyReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).getWebinarSurveyReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of sign in / sign out activity logs [report](https://support.zoom.us/hc/en-us/articles/201363213-Getting-Started-with-Reports) of users under a Zoom account.     **Prerequisites**     * Pro or higher plan.       **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get sign In / sign out activity report
     * @param {ReportsApiListSignInSignOutActivitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listSignInSignOutActivities(requestParameters: ReportsApiListSignInSignOutActivitiesRequest = {}, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listSignInSignOutActivities(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to list upcoming meeting and/or webinar events within a specified period of time. The report\'s time range is limited to one month.  **Prerequisites:**  * A Pro or higher plan  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get upcoming events report
     * @param {ReportsApiListUpcomingEventsReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public listUpcomingEventsReport(requestParameters: ReportsApiListUpcomingEventsReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).listUpcomingEventsReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a detailed report on each webinar attendee. You can get webinar participant reports for the last 6 months.    **Prerequisites:**  * A Pro or a higher plan with Webinar add-on enabled.  **Scopes:** `report:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Get webinar participant reports
     * @param {ReportsApiWebinarParticipantsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public webinarParticipantsList(requestParameters: ReportsApiWebinarParticipantsListRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).webinarParticipantsList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
