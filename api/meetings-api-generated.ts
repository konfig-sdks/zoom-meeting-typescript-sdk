/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MeetingsAddRegistrantRequest } from '../models';
// @ts-ignore
import { MeetingsAddRegistrantRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { MeetingsAddRegistrantResponse } from '../models';
// @ts-ignore
import { MeetingsBatchRegistrantsCreateRequest } from '../models';
// @ts-ignore
import { MeetingsBatchRegistrantsCreateRequestRegistrantsInner } from '../models';
// @ts-ignore
import { MeetingsBatchRegistrantsCreateResponse } from '../models';
// @ts-ignore
import { MeetingsControlInMeetingFeaturesRequest } from '../models';
// @ts-ignore
import { MeetingsControlInMeetingFeaturesRequestParams } from '../models';
// @ts-ignore
import { MeetingsCreateBatchPollsRequest } from '../models';
// @ts-ignore
import { MeetingsCreateBatchPollsRequestPollsInner } from '../models';
// @ts-ignore
import { MeetingsCreateBatchPollsResponse } from '../models';
// @ts-ignore
import { MeetingsCreateInviteLinksRequest } from '../models';
// @ts-ignore
import { MeetingsCreateInviteLinksRequestAttendeesInner } from '../models';
// @ts-ignore
import { MeetingsCreateInviteLinksResponse } from '../models';
// @ts-ignore
import { MeetingsCreateMeetingRequest } from '../models';
// @ts-ignore
import { MeetingsCreateMeetingRequestRecurrence } from '../models';
// @ts-ignore
import { MeetingsCreateMeetingRequestSettings } from '../models';
// @ts-ignore
import { MeetingsCreateMeetingRequestTrackingFieldsInner } from '../models';
// @ts-ignore
import { MeetingsCreateMeetingResponse } from '../models';
// @ts-ignore
import { MeetingsCreatePollRequest } from '../models';
// @ts-ignore
import { MeetingsCreatePollRequestQuestionsInner } from '../models';
// @ts-ignore
import { MeetingsCreatePollResponse } from '../models';
// @ts-ignore
import { MeetingsCreateTemplateFromMeetingRequest } from '../models';
// @ts-ignore
import { MeetingsCreateTemplateFromMeetingResponse } from '../models';
// @ts-ignore
import { MeetingsGetDetails200Response } from '../models';
// @ts-ignore
import { MeetingsGetDetailsResponse } from '../models';
// @ts-ignore
import { MeetingsGetInvitationNoteResponse } from '../models';
// @ts-ignore
import { MeetingsGetJoinTokenLocalRecordingResponse } from '../models';
// @ts-ignore
import { MeetingsGetJoinTokenResponse } from '../models';
// @ts-ignore
import { MeetingsGetLivestreamDetailsResponse } from '../models';
// @ts-ignore
import { MeetingsGetMeetingArchiveTokenForLocalArchivingResponse } from '../models';
// @ts-ignore
import { MeetingsGetMeetingSummaryResponse } from '../models';
// @ts-ignore
import { MeetingsGetMeetingSurveyResponse } from '../models';
// @ts-ignore
import { MeetingsGetMeetingTokenResponse } from '../models';
// @ts-ignore
import { MeetingsGetPastMeetingParticipantsResponse } from '../models';
// @ts-ignore
import { MeetingsGetPollResponse } from '../models';
// @ts-ignore
import { MeetingsGetRegistrantDetailsResponse } from '../models';
// @ts-ignore
import { MeetingsGetSipUriWithPasscodeRequest } from '../models';
// @ts-ignore
import { MeetingsGetSipUriWithPasscodeResponse } from '../models';
// @ts-ignore
import { MeetingsListHostScheduledResponse } from '../models';
// @ts-ignore
import { MeetingsListMeetingPollsResponse } from '../models';
// @ts-ignore
import { MeetingsListMeetingSummariesResponse } from '../models';
// @ts-ignore
import { MeetingsListMeetingTemplatesResponse } from '../models';
// @ts-ignore
import { MeetingsListPastMeetingInstancesResponse } from '../models';
// @ts-ignore
import { MeetingsListPastMeetingPollsResponse } from '../models';
// @ts-ignore
import { MeetingsListPastMeetingQaResponse } from '../models';
// @ts-ignore
import { MeetingsListRegistrantsResponse } from '../models';
// @ts-ignore
import { MeetingsListRegistrationQuestionsResponse } from '../models';
// @ts-ignore
import { MeetingsListUpcomingMeetingsResponse } from '../models';
// @ts-ignore
import { MeetingsLivestreamStatusUpdateRequest } from '../models';
// @ts-ignore
import { MeetingsLivestreamStatusUpdateRequestSettings } from '../models';
// @ts-ignore
import { MeetingsUpdateDetailsRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateDetailsRequestRecurrence } from '../models';
// @ts-ignore
import { MeetingsUpdateDetailsRequestSettings } from '../models';
// @ts-ignore
import { MeetingsUpdateDetailsRequestTrackingFieldsInner } from '../models';
// @ts-ignore
import { MeetingsUpdateLivestreamRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateMeetingPollRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateMeetingPollRequestQuestionsInner } from '../models';
// @ts-ignore
import { MeetingsUpdateMeetingStatusRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateMessageRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateRegistrantStatusRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateRegistrantStatusRequestRegistrantsInner } from '../models';
// @ts-ignore
import { MeetingsUpdateRegistrationQuestionsRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateRegistrationQuestionsRequestCustomQuestionsInner } from '../models';
// @ts-ignore
import { MeetingsUpdateRegistrationQuestionsRequestQuestionsInner } from '../models';
// @ts-ignore
import { MeetingsUpdateSurveyRequest } from '../models';
// @ts-ignore
import { MeetingsUpdateSurveyRequestCustomSurvey } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MeetingsApi - axios parameter creator
 * @export
 */
export const MeetingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and submit a user\'s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting\'s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a meeting registrant
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} [occurrenceIds] A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](https://developers.zoom.us) API.
         * @param {MeetingsAddRegistrantRequest} [meetingsAddRegistrantRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegistrant: async (meetingId: number, occurrenceIds?: string, meetingsAddRegistrantRequest?: MeetingsAddRegistrantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('addRegistrant', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/registrants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)
            if (occurrenceIds !== undefined) {
                localVarQueryParameter['occurrence_ids'] = occurrenceIds;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsAddRegistrantRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsAddRegistrantRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Perform batch registration
         * @param {string} meetingId Unique identifier of the meeting (Meeting Number).
         * @param {MeetingsBatchRegistrantsCreateRequest} [meetingsBatchRegistrantsCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRegistrantsCreate: async (meetingId: string, meetingsBatchRegistrantsCreateRequest?: MeetingsBatchRegistrantsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('batchRegistrantsCreate', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/batch_registrants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsBatchRegistrantsCreateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/batch_registrants',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsBatchRegistrantsCreateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API\'s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Use in-meeting controls
         * @param {string} meetingId The live meeting\&#39;s ID.
         * @param {MeetingsControlInMeetingFeaturesRequest} [meetingsControlInMeetingFeaturesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlInMeetingFeatures: async (meetingId: string, meetingsControlInMeetingFeaturesRequest?: MeetingsControlInMeetingFeaturesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('controlInMeetingFeatures', 'meetingId', meetingId)
            const localVarPath = `/live_meetings/{meetingId}/events`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin", "meeting:master"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsControlInMeetingFeaturesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_meetings/{meetingId}/events',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsControlInMeetingFeaturesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Perform batch poll creation
         * @param {string} meetingId 
         * @param {MeetingsCreateBatchPollsRequest} [meetingsCreateBatchPollsRequest] Batch Meeting poll object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchPolls: async (meetingId: string, meetingsCreateBatchPollsRequest?: MeetingsCreateBatchPollsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('createBatchPolls', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/batch_polls`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsCreateBatchPollsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/batch_polls',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsCreateBatchPollsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create meeting\'s invite links
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsCreateInviteLinksRequest} [meetingsCreateInviteLinksRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInviteLinks: async (meetingId: number, meetingsCreateInviteLinksRequest?: MeetingsCreateInviteLinksRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('createInviteLinks', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/invite_links`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsCreateInviteLinksRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/invite_links',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsCreateInviteLinksRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting\'s `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Create a meeting
         * @param {string} userId The user\&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {MeetingsCreateMeetingRequest} [meetingsCreateMeetingRequest] Meeting object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting: async (userId: string, meetingsCreateMeetingRequest?: MeetingsCreateMeetingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createMeeting', 'userId', userId)
            const localVarPath = `/users/{userId}/meetings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsCreateMeetingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/meetings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsCreateMeetingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a meeting poll
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsCreatePollRequest} [meetingsCreatePollRequest] Meeting poll object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoll: async (meetingId: number, meetingsCreatePollRequest?: MeetingsCreatePollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('createPoll', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/polls`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsCreatePollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/polls',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsCreatePollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a meeting template from an existing meeting
         * @param {string} userId The user ID retrievable from the [List users](https://developers.zoom.us) API.
         * @param {MeetingsCreateTemplateFromMeetingRequest} [meetingsCreateTemplateFromMeetingRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplateFromMeeting: async (userId: string, meetingsCreateTemplateFromMeetingRequest?: MeetingsCreateTemplateFromMeetingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createTemplateFromMeeting', 'userId', userId)
            const localVarPath = `/users/{userId}/meeting_templates`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsCreateTemplateFromMeetingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/meeting_templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsCreateTemplateFromMeetingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live meeting message
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} messageId The live meeting chat message\&#39;s unique identifier (UUID), in base64-encoded format.
         * @param {string} [fileIds] The live webinar chat file\&#39;s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingChatMessage: async (meetingId: number, messageId: string, fileIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteMeetingChatMessage', 'meetingId', meetingId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('deleteMeetingChatMessage', 'messageId', messageId)
            const localVarPath = `/live_meetings/{meetingId}/chat/messages/{messageId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId !== undefined ? messageId : `-messageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)
            if (fileIds !== undefined) {
                localVarQueryParameter['file_ids'] = fileIds;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_meetings/{meetingId}/chat/messages/{messageId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host\'s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting survey
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingSurvey: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteMeetingSurvey', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/survey`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/survey',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a meeting registrant.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting registrant
         * @param {number} meetingId The meeting ID.
         * @param {string} registrantId The meeting registrant ID.
         * @param {string} [occurrenceId] The meeting occurrence ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrant: async (meetingId: number, registrantId: string, occurrenceId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('deleteRegistrant', 'meetingId', meetingId)
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('deleteRegistrant', 'registrantId', registrantId)
            const localVarPath = `/meetings/{meetingId}/registrants/{registrantId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"registrantId"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants/{registrantId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the given meeting\'s details.         **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
         * @param {string} [occurrenceId] Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
         * @param {boolean} [showPreviousOccurrences] Set this field\&#39;s value to &#x60;true&#x60; to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (meetingId: number, occurrenceId?: string, showPreviousOccurrences?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getDetails', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (showPreviousOccurrences !== undefined) {
                localVarQueryParameter['show_previous_occurrences'] = showPreviousOccurrences;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get past meeting details
         * @param {MeetingsGetDetailsMeetingIdParameter} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1: async (meetingId: MeetingsGetDetailsMeetingIdParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getDetails_1', 'meetingId', meetingId)
            const localVarPath = `/past_meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting invitation
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationNote: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getInvitationNote', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/invitation`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/invitation',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meeting\'s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s join token for live streaming
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinToken: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getJoinToken', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/jointoken/live_streaming`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting_token:read:admin:live_streaming", "meeting_token:read:live_streaming"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/jointoken/live_streaming',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meeting\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:local_recording`,`meeting_token:read:admin:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s join token for local recording
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {boolean} [bypassWaitingRoom] Whether to bypass the waiting room.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinTokenLocalRecording: async (meetingId: number, bypassWaitingRoom?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getJoinTokenLocalRecording', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/jointoken/local_recording`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting_token:read:local_recording", "meeting_token:read:admin:local_recording"], configuration)
            if (bypassWaitingRoom !== undefined) {
                localVarQueryParameter['bypass_waiting_room'] = bypassWaitingRoom;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/jointoken/local_recording',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting\'s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get livestream details
         * @param {string} meetingId Unique identifier of the meeting.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivestreamDetails: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getLivestreamDetails', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/livestream`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/livestream',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meeting\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting\'s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s archive token for local archiving
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingArchiveTokenForLocalArchiving: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingArchiveTokenForLocalArchiving', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/jointoken/local_archiving`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting_token:read:admin:local_archiving"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/jointoken/local_archiving',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting summary
         * @param {string} [meetingId] The meeting\&#39;s universally unique ID (UUID). When you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSummary: async (meetingId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meetings/{meetingId}/meeting_summary`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting_summary:read:admin", "meeting_summary:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/meeting_summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting survey
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSurvey: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingSurvey', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/survey`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/survey',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meeting\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get meeting\'s token
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {'closed_caption_token'} [type] The meeting token type:  * &#x60;closed_caption_token&#x60; &amp;mdash; The third-party closed caption API token.   This defaults to &#x60;closed_caption_token&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingToken: async (meetingId: number, type?: 'closed_caption_token', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getMeetingToken', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/token`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/token',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve information on participants from a past meeting. Note the API doesn\'t return results if there\'s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a \'/\'or contains \'//\' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get past meeting participants
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPastMeetingParticipants: async (meetingId: string, pageSize?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getPastMeetingParticipants', 'meetingId', meetingId)
            const localVarPath = `/past_meetings/{meetingId}/participants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingId}/participants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting poll
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} pollId The poll ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoll: async (meetingId: number, pollId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getPoll', 'meetingId', meetingId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('getPoll', 'pollId', pollId)
            const localVarPath = `/meetings/{meetingId}/polls/{pollId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/polls/{pollId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting registrant
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} registrantId The registrant ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrantDetails: async (meetingId: number, registrantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getRegistrantDetails', 'meetingId', meetingId)
            // verify required parameter 'registrantId' is not null or undefined
            assertParamExists('getRegistrantDetails', 'registrantId', registrantId)
            const localVarPath = `/meetings/{meetingId}/registrants/{registrantId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"registrantId"}}`, encodeURIComponent(String(registrantId !== undefined ? registrantId : `-registrantId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants/{registrantId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a meeting\'s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get a meeting SIP URI with Passcode
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsGetSipUriWithPasscodeRequest} [meetingsGetSipUriWithPasscodeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSipUriWithPasscode: async (meetingId: number, meetingsGetSipUriWithPasscodeRequest?: MeetingsGetSipUriWithPasscodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('getSipUriWithPasscode', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/sip_dialing`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:sip_dialing", "meeting:write:admin:sip_dialing"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsGetSipUriWithPasscodeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/sip_dialing',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsGetSipUriWithPasscodeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a meeting host user\'s scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user\'s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meetings
         * @param {string} userId The user\&#39;s user ID or email address. For user-level apps, pass the &#x60;me&#x60; value.
         * @param {'scheduled' | 'live' | 'upcoming' | 'upcoming_meetings' | 'previous_meetings'} [type] The type of meeting.  * &#x60;scheduled&#x60; - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.  * &#x60;live&#x60; - All the ongoing meetings.  * &#x60;upcoming&#x60; - All upcoming meetings, including live meetings.  * &#x60;upcoming_meetings&#x60; - All upcoming meetings, including live meetings.  * &#x60;previous_meetings&#x60; - All the previous meetings.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {number} [pageNumber] The page number of the current page in the returned records.
         * @param {string | Date} [from] The start date.
         * @param {string | Date} [to] The end date.
         * @param {string} [timezone] The timezone to assign to the &#x60;from&#x60; and &#x60;to&#x60; value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHostScheduled: async (userId: string, type?: 'scheduled' | 'live' | 'upcoming' | 'upcoming_meetings' | 'previous_meetings', pageSize?: number, nextPageToken?: string, pageNumber?: number, from?: string | Date, to?: string | Date, timezone?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listHostScheduled', 'userId', userId)
            const localVarPath = `/users/{userId}/meetings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }

            if (timezone !== undefined) {
                localVarQueryParameter['timezone'] = timezone;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/meetings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List meeting polls
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {boolean} [anonymous] Whether to query for polls with the **Anonymous** option enabled:  * &#x60;true&#x60; &amp;mdash; Query for polls with the **Anonymous** option enabled.  * &#x60;false&#x60; &amp;mdash; Do not query for polls with the **Anonymous** option enabled.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingPolls: async (meetingId: number, anonymous?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listMeetingPolls', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/polls`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)
            if (anonymous !== undefined) {
                localVarQueryParameter['anonymous'] = anonymous;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meeting summaries of an account
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
         * @param {string} [from] The start date in &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ss\&#39;Z\&#39;&#x60; UTC format used to retrieve the creation date range of the meeting summaries.
         * @param {string} [to] The end date in &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ss\&#39;Z\&#39;&#x60; UTC format used to retrieve the creation date range of the meeting summaries.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingSummaries: async (pageSize?: number, nextPageToken?: string, from?: string, to?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/meetings/meeting_summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting_summary:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/meeting_summaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting templates
         * @param {string} userId The user ID retrievable from the [List users](https://developers.zoom.us) API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingTemplates: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listMeetingTemplates', 'userId', userId)
            const localVarPath = `/users/{userId}/meeting_templates`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/meeting_templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting instances
         * @param {number} meetingId The past meeting\&#39;s ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingInstances: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listPastMeetingInstances', 'meetingId', meetingId)
            const localVarPath = `/past_meetings/{meetingId}/instances`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingId}/instances',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting\'s poll results
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingPolls: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listPastMeetingPolls', 'meetingId', meetingId)
            const localVarPath = `/past_meetings/{meetingId}/polls`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingId}/polls',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meetings\' Q&A
         * @param {string} meetingId The meeting\&#39;s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a &#x60;/&#x60; character or contains the &#x60;//&#x60; characters, you **must** double-encode the meeting UUID before making an API request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingQA: async (meetingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listPastMeetingQA', 'meetingId', meetingId)
            const localVarPath = `/past_meetings/{meetingId}/qa`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingId}/qa',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting registrants
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {'pending' | 'approved' | 'denied'} [status] Query by the registrant\&#39;s status.  * &#x60;pending&#x60; - The registration is pending.  * &#x60;approved&#x60; - The registrant is approved.  * &#x60;denied&#x60; - The registration is denied.
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants: async (meetingId: number, occurrenceId?: string, status?: 'pending' | 'approved' | 'denied', pageSize?: number, pageNumber?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listRegistrants', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/registrants`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read:admin", "meeting:read"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List registration questions 
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions: async (meetingId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('listRegistrationQuestions', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/registrants/questions`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants/questions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List a Zoom user\'s upcoming meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List upcoming meetings
         * @param {string} userId The user\&#39;s user ID or email address. For user-level apps, pass [the &#x60;me&#x60; value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpcomingMeetings: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listUpcomingMeetings', 'userId', userId)
            const localVarPath = `/users/{userId}/upcoming_meetings`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId !== undefined ? userId : `-userId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:read", "meeting:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/users/{userId}/upcoming_meetings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting\'s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update Live Stream Status
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsLivestreamStatusUpdateRequest} [meetingsLivestreamStatusUpdateRequest] Meeting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livestreamStatusUpdate: async (meetingId: number, meetingsLivestreamStatusUpdateRequest?: MeetingsLivestreamStatusUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('livestreamStatusUpdate', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/livestream/status`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsLivestreamStatusUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/livestream/status',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsLivestreamStatusUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting poll
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} pollId The poll ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollDelete: async (meetingId: number, pollId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('pollDelete', 'meetingId', meetingId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('pollDelete', 'pollId', pollId)
            const localVarPath = `/meetings/{meetingId}/polls/{pollId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/polls/{pollId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {boolean} [scheduleForReminder] &#x60;true&#x60;: Notify host and alternative host about the meeting cancellation via email. &#x60;false&#x60;: Do not send any email notification.
         * @param {boolean} [cancelMeetingReminder] &#x60;true&#x60;: Notify registrants about the meeting cancellation via email.   &#x60;false&#x60;: Do not send any email notification to meeting registrants.   The default value of this field is &#x60;false&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMeeting: async (meetingId: number, occurrenceId?: string, scheduleForReminder?: boolean, cancelMeetingReminder?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('removeMeeting', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }

            if (scheduleForReminder !== undefined) {
                localVarQueryParameter['schedule_for_reminder'] = scheduleForReminder;
            }

            if (cancelMeetingReminder !== undefined) {
                localVarQueryParameter['cancel_meeting_reminder'] = cancelMeetingReminder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update meeting details.  **Note**  * The `start_time` value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
         * @param {string} [occurrenceId] Meeting occurrence ID. Support change of agenda, &#x60;start_time&#x60;, duration, or settings {&#x60;host_video&#x60;, &#x60;participant_video&#x60;, &#x60;join_before_host&#x60;, &#x60;mute_upon_entry&#x60;, &#x60;waiting_room&#x60;, &#x60;watermark&#x60;, &#x60;auto_recording&#x60;}.
         * @param {MeetingsUpdateDetailsRequest} [meetingsUpdateDetailsRequest] Meeting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (meetingId: number, occurrenceId?: string, meetingsUpdateDetailsRequest?: MeetingsUpdateDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateDetails', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a meeting\'s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a livestream
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsUpdateLivestreamRequest} [meetingsUpdateLivestreamRequest] Meeting
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLivestream: async (meetingId: number, meetingsUpdateLivestreamRequest?: MeetingsUpdateLivestreamRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateLivestream', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/livestream`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateLivestreamRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/livestream',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateLivestreamRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a meeting poll
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} pollId The poll ID
         * @param {MeetingsUpdateMeetingPollRequest} [meetingsUpdateMeetingPollRequest] Meeting Poll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingPoll: async (meetingId: number, pollId: string, meetingsUpdateMeetingPollRequest?: MeetingsUpdateMeetingPollRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateMeetingPoll', 'meetingId', meetingId)
            // verify required parameter 'pollId' is not null or undefined
            assertParamExists('updateMeetingPoll', 'pollId', pollId)
            const localVarPath = `/meetings/{meetingId}/polls/{pollId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"pollId"}}`, encodeURIComponent(String(pollId !== undefined ? pollId : `-pollId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateMeetingPollRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/polls/{pollId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateMeetingPollRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the status of a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update meeting status
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsUpdateMeetingStatusRequest} [meetingsUpdateMeetingStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingStatus: async (meetingId: number, meetingsUpdateMeetingStatusRequest?: MeetingsUpdateMeetingStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateMeetingStatus', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/status`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateMeetingStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateMeetingStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update a live meeting message
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} messageId The live meeting chat message\&#39;s unique identifier (UUID), in base64-encoded format.
         * @param {MeetingsUpdateMessageRequest} [meetingsUpdateMessageRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (meetingId: number, messageId: string, meetingsUpdateMessageRequest?: MeetingsUpdateMessageRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateMessage', 'meetingId', meetingId)
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessage', 'messageId', messageId)
            const localVarPath = `/live_meetings/{meetingId}/chat/messages/{messageId}`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)))
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId !== undefined ? messageId : `-messageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateMessageRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/live_meetings/{meetingId}/chat/messages/{messageId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateMessageRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a meeting registrant\'s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {string} [occurrenceId] The meeting or webinar occurrence ID.
         * @param {MeetingsUpdateRegistrantStatusRequest} [meetingsUpdateRegistrantStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus: async (meetingId: number, occurrenceId?: string, meetingsUpdateRegistrantStatusRequest?: MeetingsUpdateRegistrantStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateRegistrantStatus', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/registrants/status`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)
            if (occurrenceId !== undefined) {
                localVarQueryParameter['occurrence_id'] = occurrenceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateRegistrantStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateRegistrantStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
         * @param {MeetingsUpdateRegistrationQuestionsRequest} [meetingsUpdateRegistrationQuestionsRequest] Meeting Registrant Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions: async (meetingId: number, meetingsUpdateRegistrationQuestionsRequest?: MeetingsUpdateRegistrationQuestionsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateRegistrationQuestions', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/registrants/questions`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write", "meeting:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateRegistrationQuestionsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/registrants/questions',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateRegistrationQuestionsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting survey
         * @param {number} meetingId The meeting\&#39;s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
         * @param {MeetingsUpdateSurveyRequest} [meetingsUpdateSurveyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurvey: async (meetingId: number, meetingsUpdateSurveyRequest?: MeetingsUpdateSurveyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingId' is not null or undefined
            assertParamExists('updateSurvey', 'meetingId', meetingId)
            const localVarPath = `/meetings/{meetingId}/survey`
                .replace(`{${"meetingId"}}`, encodeURIComponent(String(meetingId !== undefined ? meetingId : `-meetingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["meeting:write:admin", "meeting:write"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: meetingsUpdateSurveyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/meetings/{meetingId}/survey',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(meetingsUpdateSurveyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MeetingsApi - functional programming interface
 * @export
 */
export const MeetingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MeetingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create and submit a user\'s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting\'s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a meeting registrant
         * @param {MeetingsApiAddRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRegistrant(requestParameters: MeetingsApiAddRegistrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsAddRegistrantResponse>> {
            const meetingsAddRegistrantRequest: MeetingsAddRegistrantRequest = {
                first_name: requestParameters.first_name,
                last_name: requestParameters.last_name,
                email: requestParameters.email,
                address: requestParameters.address,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                phone: requestParameters.phone,
                comments: requestParameters.comments,
                custom_questions: requestParameters.custom_questions,
                industry: requestParameters.industry,
                job_title: requestParameters.job_title,
                no_of_employees: requestParameters.no_of_employees,
                org: requestParameters.org,
                purchasing_time_frame: requestParameters.purchasing_time_frame,
                role_in_purchase_process: requestParameters.role_in_purchase_process,
                language: requestParameters.language,
                auto_approve: requestParameters.auto_approve
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRegistrant(requestParameters.meetingId, requestParameters.occurrenceIds, meetingsAddRegistrantRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Perform batch registration
         * @param {MeetingsApiBatchRegistrantsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async batchRegistrantsCreate(requestParameters: MeetingsApiBatchRegistrantsCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsBatchRegistrantsCreateResponse>> {
            const meetingsBatchRegistrantsCreateRequest: MeetingsBatchRegistrantsCreateRequest = {
                auto_approve: requestParameters.auto_approve,
                registrants_confirmation_email: requestParameters.registrants_confirmation_email,
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.batchRegistrantsCreate(requestParameters.meetingId, meetingsBatchRegistrantsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API\'s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Use in-meeting controls
         * @param {MeetingsApiControlInMeetingFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlInMeetingFeatures(requestParameters: MeetingsApiControlInMeetingFeaturesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsControlInMeetingFeaturesRequest: MeetingsControlInMeetingFeaturesRequest = {
                method: requestParameters.method,
                params: requestParameters.params
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlInMeetingFeatures(requestParameters.meetingId, meetingsControlInMeetingFeaturesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Perform batch poll creation
         * @param {MeetingsApiCreateBatchPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatchPolls(requestParameters: MeetingsApiCreateBatchPollsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsCreateBatchPollsResponse>> {
            const meetingsCreateBatchPollsRequest: MeetingsCreateBatchPollsRequest = {
                polls: requestParameters.polls
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchPolls(requestParameters.meetingId, meetingsCreateBatchPollsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create meeting\'s invite links
         * @param {MeetingsApiCreateInviteLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInviteLinks(requestParameters: MeetingsApiCreateInviteLinksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsCreateInviteLinksResponse>> {
            const meetingsCreateInviteLinksRequest: MeetingsCreateInviteLinksRequest = {
                attendees: requestParameters.attendees,
                ttl: requestParameters.ttl
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInviteLinks(requestParameters.meetingId, meetingsCreateInviteLinksRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting\'s `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Create a meeting
         * @param {MeetingsApiCreateMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMeeting(requestParameters: MeetingsApiCreateMeetingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsCreateMeetingResponse>> {
            const meetingsCreateMeetingRequest: MeetingsCreateMeetingRequest = {
                agenda: requestParameters.agenda,
                default_password: requestParameters.default_password,
                duration: requestParameters.duration,
                password: requestParameters.password,
                pre_schedule: requestParameters.pre_schedule,
                recurrence: requestParameters.recurrence,
                schedule_for: requestParameters.schedule_for,
                settings: requestParameters.settings,
                start_time: requestParameters.start_time,
                template_id: requestParameters.template_id,
                timezone: requestParameters.timezone,
                topic: requestParameters.topic,
                tracking_fields: requestParameters.tracking_fields,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMeeting(requestParameters.userId, meetingsCreateMeetingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a meeting poll
         * @param {MeetingsApiCreatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPoll(requestParameters: MeetingsApiCreatePollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsCreatePollResponse>> {
            const meetingsCreatePollRequest: MeetingsCreatePollRequest = {
                title: requestParameters.title,
                anonymous: requestParameters.anonymous,
                poll_type: requestParameters.poll_type,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPoll(requestParameters.meetingId, meetingsCreatePollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a meeting template from an existing meeting
         * @param {MeetingsApiCreateTemplateFromMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplateFromMeeting(requestParameters: MeetingsApiCreateTemplateFromMeetingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsCreateTemplateFromMeetingResponse>> {
            const meetingsCreateTemplateFromMeetingRequest: MeetingsCreateTemplateFromMeetingRequest = {
                meeting_id: requestParameters.meeting_id,
                name: requestParameters.name,
                save_recurrence: requestParameters.save_recurrence,
                overwrite: requestParameters.overwrite
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplateFromMeeting(requestParameters.userId, meetingsCreateTemplateFromMeetingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live meeting message
         * @param {MeetingsApiDeleteMeetingChatMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingChatMessage(requestParameters: MeetingsApiDeleteMeetingChatMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingChatMessage(requestParameters.meetingId, requestParameters.messageId, requestParameters.fileIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host\'s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting survey
         * @param {MeetingsApiDeleteMeetingSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMeetingSurvey(requestParameters: MeetingsApiDeleteMeetingSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMeetingSurvey(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a meeting registrant.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting registrant
         * @param {MeetingsApiDeleteRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRegistrant(requestParameters: MeetingsApiDeleteRegistrantRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistrant(requestParameters.meetingId, requestParameters.registrantId, requestParameters.occurrenceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the given meeting\'s details.         **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting
         * @param {MeetingsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: MeetingsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.meetingId, requestParameters.occurrenceId, requestParameters.showPreviousOccurrences, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get past meeting details
         * @param {MeetingsApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails_1(requestParameters: MeetingsApiGetDetails0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetDetails200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails_1(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting invitation
         * @param {MeetingsApiGetInvitationNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvitationNote(requestParameters: MeetingsApiGetInvitationNoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetInvitationNoteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvitationNote(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meeting\'s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s join token for live streaming
         * @param {MeetingsApiGetJoinTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJoinToken(requestParameters: MeetingsApiGetJoinTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetJoinTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJoinToken(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meeting\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:local_recording`,`meeting_token:read:admin:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s join token for local recording
         * @param {MeetingsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJoinTokenLocalRecording(requestParameters: MeetingsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetJoinTokenLocalRecordingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJoinTokenLocalRecording(requestParameters.meetingId, requestParameters.bypassWaitingRoom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting\'s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get livestream details
         * @param {MeetingsApiGetLivestreamDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLivestreamDetails(requestParameters: MeetingsApiGetLivestreamDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetLivestreamDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLivestreamDetails(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meeting\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting\'s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s archive token for local archiving
         * @param {MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingArchiveTokenForLocalArchiving(requestParameters: MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingArchiveTokenForLocalArchiving(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting summary
         * @param {MeetingsApiGetMeetingSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingSummary(requestParameters: MeetingsApiGetMeetingSummaryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetMeetingSummaryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingSummary(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting survey
         * @param {MeetingsApiGetMeetingSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingSurvey(requestParameters: MeetingsApiGetMeetingSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetMeetingSurveyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingSurvey(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meeting\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get meeting\'s token
         * @param {MeetingsApiGetMeetingTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMeetingToken(requestParameters: MeetingsApiGetMeetingTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetMeetingTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMeetingToken(requestParameters.meetingId, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve information on participants from a past meeting. Note the API doesn\'t return results if there\'s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a \'/\'or contains \'//\' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get past meeting participants
         * @param {MeetingsApiGetPastMeetingParticipantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPastMeetingParticipants(requestParameters: MeetingsApiGetPastMeetingParticipantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetPastMeetingParticipantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPastMeetingParticipants(requestParameters.meetingId, requestParameters.pageSize, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting poll
         * @param {MeetingsApiGetPollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPoll(requestParameters: MeetingsApiGetPollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetPollResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPoll(requestParameters.meetingId, requestParameters.pollId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting registrant
         * @param {MeetingsApiGetRegistrantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRegistrantDetails(requestParameters: MeetingsApiGetRegistrantDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetRegistrantDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistrantDetails(requestParameters.meetingId, requestParameters.registrantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a meeting\'s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get a meeting SIP URI with Passcode
         * @param {MeetingsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSipUriWithPasscode(requestParameters: MeetingsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsGetSipUriWithPasscodeResponse>> {
            const meetingsGetSipUriWithPasscodeRequest: MeetingsGetSipUriWithPasscodeRequest = {
                passcode: requestParameters.passcode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSipUriWithPasscode(requestParameters.meetingId, meetingsGetSipUriWithPasscodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a meeting host user\'s scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user\'s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meetings
         * @param {MeetingsApiListHostScheduledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHostScheduled(requestParameters: MeetingsApiListHostScheduledRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListHostScheduledResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHostScheduled(requestParameters.userId, requestParameters.type, requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.pageNumber, requestParameters.from, requestParameters.to, requestParameters.timezone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List meeting polls
         * @param {MeetingsApiListMeetingPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMeetingPolls(requestParameters: MeetingsApiListMeetingPollsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListMeetingPollsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMeetingPolls(requestParameters.meetingId, requestParameters.anonymous, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meeting summaries of an account
         * @param {MeetingsApiListMeetingSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMeetingSummaries(requestParameters: MeetingsApiListMeetingSummariesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListMeetingSummariesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMeetingSummaries(requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting templates
         * @param {MeetingsApiListMeetingTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMeetingTemplates(requestParameters: MeetingsApiListMeetingTemplatesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListMeetingTemplatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMeetingTemplates(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting instances
         * @param {MeetingsApiListPastMeetingInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPastMeetingInstances(requestParameters: MeetingsApiListPastMeetingInstancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListPastMeetingInstancesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPastMeetingInstances(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting\'s poll results
         * @param {MeetingsApiListPastMeetingPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPastMeetingPolls(requestParameters: MeetingsApiListPastMeetingPollsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListPastMeetingPollsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPastMeetingPolls(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meetings\' Q&A
         * @param {MeetingsApiListPastMeetingQARequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPastMeetingQA(requestParameters: MeetingsApiListPastMeetingQARequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListPastMeetingQaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPastMeetingQA(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting registrants
         * @param {MeetingsApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrants(requestParameters: MeetingsApiListRegistrantsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListRegistrantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrants(requestParameters.meetingId, requestParameters.occurrenceId, requestParameters.status, requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List registration questions 
         * @param {MeetingsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRegistrationQuestions(requestParameters: MeetingsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListRegistrationQuestionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistrationQuestions(requestParameters.meetingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List a Zoom user\'s upcoming meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List upcoming meetings
         * @param {MeetingsApiListUpcomingMeetingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUpcomingMeetings(requestParameters: MeetingsApiListUpcomingMeetingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeetingsListUpcomingMeetingsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUpcomingMeetings(requestParameters.userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting\'s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update Live Stream Status
         * @param {MeetingsApiLivestreamStatusUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async livestreamStatusUpdate(requestParameters: MeetingsApiLivestreamStatusUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsLivestreamStatusUpdateRequest: MeetingsLivestreamStatusUpdateRequest = {
                action: requestParameters.action,
                settings: requestParameters.settings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.livestreamStatusUpdate(requestParameters.meetingId, meetingsLivestreamStatusUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting poll
         * @param {MeetingsApiPollDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pollDelete(requestParameters: MeetingsApiPollDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pollDelete(requestParameters.meetingId, requestParameters.pollId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting
         * @param {MeetingsApiRemoveMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeMeeting(requestParameters: MeetingsApiRemoveMeetingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeMeeting(requestParameters.meetingId, requestParameters.occurrenceId, requestParameters.scheduleForReminder, requestParameters.cancelMeetingReminder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update meeting details.  **Note**  * The `start_time` value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting
         * @param {MeetingsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: MeetingsApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateDetailsRequest: MeetingsUpdateDetailsRequest = {
                agenda: requestParameters.agenda,
                duration: requestParameters.duration,
                password: requestParameters.password,
                pre_schedule: requestParameters.pre_schedule,
                schedule_for: requestParameters.schedule_for,
                recurrence: requestParameters.recurrence,
                settings: requestParameters.settings,
                start_time: requestParameters.start_time,
                template_id: requestParameters.template_id,
                timezone: requestParameters.timezone,
                topic: requestParameters.topic,
                tracking_fields: requestParameters.tracking_fields,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.meetingId, requestParameters.occurrenceId, meetingsUpdateDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a meeting\'s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a livestream
         * @param {MeetingsApiUpdateLivestreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLivestream(requestParameters: MeetingsApiUpdateLivestreamRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateLivestreamRequest: MeetingsUpdateLivestreamRequest = {
                page_url: requestParameters.page_url,
                stream_key: requestParameters.stream_key,
                stream_url: requestParameters.stream_url,
                resolution: requestParameters.resolution
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLivestream(requestParameters.meetingId, meetingsUpdateLivestreamRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a meeting poll
         * @param {MeetingsApiUpdateMeetingPollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeetingPoll(requestParameters: MeetingsApiUpdateMeetingPollRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateMeetingPollRequest: MeetingsUpdateMeetingPollRequest = {
                title: requestParameters.title,
                anonymous: requestParameters.anonymous,
                poll_type: requestParameters.poll_type,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeetingPoll(requestParameters.meetingId, requestParameters.pollId, meetingsUpdateMeetingPollRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the status of a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update meeting status
         * @param {MeetingsApiUpdateMeetingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMeetingStatus(requestParameters: MeetingsApiUpdateMeetingStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateMeetingStatusRequest: MeetingsUpdateMeetingStatusRequest = {
                action: requestParameters.action
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMeetingStatus(requestParameters.meetingId, meetingsUpdateMeetingStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update a live meeting message
         * @param {MeetingsApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(requestParameters: MeetingsApiUpdateMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateMessageRequest: MeetingsUpdateMessageRequest = {
                message_content: requestParameters.message_content
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(requestParameters.meetingId, requestParameters.messageId, meetingsUpdateMessageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a meeting registrant\'s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {MeetingsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrantStatus(requestParameters: MeetingsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateRegistrantStatusRequest: MeetingsUpdateRegistrantStatusRequest = {
                action: requestParameters.action,
                registrants: requestParameters.registrants
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrantStatus(requestParameters.meetingId, requestParameters.occurrenceId, meetingsUpdateRegistrantStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {MeetingsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRegistrationQuestions(requestParameters: MeetingsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateRegistrationQuestionsRequest: MeetingsUpdateRegistrationQuestionsRequest = {
                custom_questions: requestParameters.custom_questions,
                questions: requestParameters.questions
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistrationQuestions(requestParameters.meetingId, meetingsUpdateRegistrationQuestionsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting survey
         * @param {MeetingsApiUpdateSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSurvey(requestParameters: MeetingsApiUpdateSurveyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const meetingsUpdateSurveyRequest: MeetingsUpdateSurveyRequest = {
                custom_survey: requestParameters.custom_survey,
                show_in_the_browser: requestParameters.show_in_the_browser,
                third_party_survey: requestParameters.third_party_survey
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSurvey(requestParameters.meetingId, meetingsUpdateSurveyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MeetingsApi - factory interface
 * @export
 */
export const MeetingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MeetingsApiFp(configuration)
    return {
        /**
         * Create and submit a user\'s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting\'s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Add a meeting registrant
         * @param {MeetingsApiAddRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRegistrant(requestParameters: MeetingsApiAddRegistrantRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsAddRegistrantResponse> {
            return localVarFp.addRegistrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
         * @summary Perform batch registration
         * @param {MeetingsApiBatchRegistrantsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        batchRegistrantsCreate(requestParameters: MeetingsApiBatchRegistrantsCreateRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsBatchRegistrantsCreateResponse> {
            return localVarFp.batchRegistrantsCreate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API\'s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Use in-meeting controls
         * @param {MeetingsApiControlInMeetingFeaturesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlInMeetingFeatures(requestParameters: MeetingsApiControlInMeetingFeaturesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.controlInMeetingFeatures(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Perform batch poll creation
         * @param {MeetingsApiCreateBatchPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchPolls(requestParameters: MeetingsApiCreateBatchPollsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsCreateBatchPollsResponse> {
            return localVarFp.createBatchPolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create meeting\'s invite links
         * @param {MeetingsApiCreateInviteLinksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInviteLinks(requestParameters: MeetingsApiCreateInviteLinksRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsCreateInviteLinksResponse> {
            return localVarFp.createInviteLinks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting\'s `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Create a meeting
         * @param {MeetingsApiCreateMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMeeting(requestParameters: MeetingsApiCreateMeetingRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsCreateMeetingResponse> {
            return localVarFp.createMeeting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a meeting poll
         * @param {MeetingsApiCreatePollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPoll(requestParameters: MeetingsApiCreatePollRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsCreatePollResponse> {
            return localVarFp.createPoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Create a meeting template from an existing meeting
         * @param {MeetingsApiCreateTemplateFromMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplateFromMeeting(requestParameters: MeetingsApiCreateTemplateFromMeetingRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsCreateTemplateFromMeetingResponse> {
            return localVarFp.createTemplateFromMeeting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Delete a live meeting message
         * @param {MeetingsApiDeleteMeetingChatMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingChatMessage(requestParameters: MeetingsApiDeleteMeetingChatMessageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingChatMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host\'s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting survey
         * @param {MeetingsApiDeleteMeetingSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMeetingSurvey(requestParameters: MeetingsApiDeleteMeetingSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteMeetingSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a meeting registrant.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting registrant
         * @param {MeetingsApiDeleteRegistrantRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRegistrant(requestParameters: MeetingsApiDeleteRegistrantRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRegistrant(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the given meeting\'s details.         **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting
         * @param {MeetingsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: MeetingsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get past meeting details
         * @param {MeetingsApiGetDetails0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails_1(requestParameters: MeetingsApiGetDetails0Request, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetDetails200Response> {
            return localVarFp.getDetails_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get meeting invitation
         * @param {MeetingsApiGetInvitationNoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvitationNote(requestParameters: MeetingsApiGetInvitationNoteRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetInvitationNoteResponse> {
            return localVarFp.getInvitationNote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meeting\'s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s join token for live streaming
         * @param {MeetingsApiGetJoinTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinToken(requestParameters: MeetingsApiGetJoinTokenRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetJoinTokenResponse> {
            return localVarFp.getJoinToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meeting\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:local_recording`,`meeting_token:read:admin:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s join token for local recording
         * @param {MeetingsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJoinTokenLocalRecording(requestParameters: MeetingsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetJoinTokenLocalRecordingResponse> {
            return localVarFp.getJoinTokenLocalRecording(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting\'s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get livestream details
         * @param {MeetingsApiGetLivestreamDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLivestreamDetails(requestParameters: MeetingsApiGetLivestreamDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetLivestreamDetailsResponse> {
            return localVarFp.getLivestreamDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meeting\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting\'s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting\'s archive token for local archiving
         * @param {MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingArchiveTokenForLocalArchiving(requestParameters: MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetMeetingArchiveTokenForLocalArchivingResponse> {
            return localVarFp.getMeetingArchiveTokenForLocalArchiving(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting summary
         * @param {MeetingsApiGetMeetingSummaryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSummary(requestParameters: MeetingsApiGetMeetingSummaryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetMeetingSummaryResponse> {
            return localVarFp.getMeetingSummary(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting survey
         * @param {MeetingsApiGetMeetingSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingSurvey(requestParameters: MeetingsApiGetMeetingSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetMeetingSurveyResponse> {
            return localVarFp.getMeetingSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meeting\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get meeting\'s token
         * @param {MeetingsApiGetMeetingTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMeetingToken(requestParameters: MeetingsApiGetMeetingTokenRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetMeetingTokenResponse> {
            return localVarFp.getMeetingToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve information on participants from a past meeting. Note the API doesn\'t return results if there\'s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a \'/\'or contains \'//\' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Get past meeting participants
         * @param {MeetingsApiGetPastMeetingParticipantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPastMeetingParticipants(requestParameters: MeetingsApiGetPastMeetingParticipantsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetPastMeetingParticipantsResponse> {
            return localVarFp.getPastMeetingParticipants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting poll
         * @param {MeetingsApiGetPollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPoll(requestParameters: MeetingsApiGetPollRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetPollResponse> {
            return localVarFp.getPoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a meeting registrant
         * @param {MeetingsApiGetRegistrantDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRegistrantDetails(requestParameters: MeetingsApiGetRegistrantDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetRegistrantDetailsResponse> {
            return localVarFp.getRegistrantDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a meeting\'s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get a meeting SIP URI with Passcode
         * @param {MeetingsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSipUriWithPasscode(requestParameters: MeetingsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsGetSipUriWithPasscodeResponse> {
            return localVarFp.getSipUriWithPasscode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List a meeting host user\'s scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user\'s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meetings
         * @param {MeetingsApiListHostScheduledRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHostScheduled(requestParameters: MeetingsApiListHostScheduledRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListHostScheduledResponse> {
            return localVarFp.listHostScheduled(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List meeting polls
         * @param {MeetingsApiListMeetingPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingPolls(requestParameters: MeetingsApiListMeetingPollsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListMeetingPollsResponse> {
            return localVarFp.listMeetingPolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List meeting summaries of an account
         * @param {MeetingsApiListMeetingSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingSummaries(requestParameters: MeetingsApiListMeetingSummariesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<MeetingsListMeetingSummariesResponse> {
            return localVarFp.listMeetingSummaries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting templates
         * @param {MeetingsApiListMeetingTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMeetingTemplates(requestParameters: MeetingsApiListMeetingTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListMeetingTemplatesResponse> {
            return localVarFp.listMeetingTemplates(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting instances
         * @param {MeetingsApiListPastMeetingInstancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingInstances(requestParameters: MeetingsApiListPastMeetingInstancesRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListPastMeetingInstancesResponse> {
            return localVarFp.listPastMeetingInstances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meeting\'s poll results
         * @param {MeetingsApiListPastMeetingPollsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingPolls(requestParameters: MeetingsApiListPastMeetingPollsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListPastMeetingPollsResponse> {
            return localVarFp.listPastMeetingPolls(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List past meetings\' Q&A
         * @param {MeetingsApiListPastMeetingQARequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPastMeetingQA(requestParameters: MeetingsApiListPastMeetingQARequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListPastMeetingQaResponse> {
            return localVarFp.listPastMeetingQA(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List meeting registrants
         * @param {MeetingsApiListRegistrantsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrants(requestParameters: MeetingsApiListRegistrantsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListRegistrantsResponse> {
            return localVarFp.listRegistrants(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary List registration questions 
         * @param {MeetingsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRegistrationQuestions(requestParameters: MeetingsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListRegistrationQuestionsResponse> {
            return localVarFp.listRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List a Zoom user\'s upcoming meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List upcoming meetings
         * @param {MeetingsApiListUpcomingMeetingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUpcomingMeetings(requestParameters: MeetingsApiListUpcomingMeetingsRequest, options?: AxiosRequestConfig): AxiosPromise<MeetingsListUpcomingMeetingsResponse> {
            return localVarFp.listUpcomingMeetings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting\'s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update Live Stream Status
         * @param {MeetingsApiLivestreamStatusUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        livestreamStatusUpdate(requestParameters: MeetingsApiLivestreamStatusUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.livestreamStatusUpdate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting poll
         * @param {MeetingsApiPollDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pollDelete(requestParameters: MeetingsApiPollDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.pollDelete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting
         * @param {MeetingsApiRemoveMeetingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeMeeting(requestParameters: MeetingsApiRemoveMeetingRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeMeeting(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update meeting details.  **Note**  * The `start_time` value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting
         * @param {MeetingsApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: MeetingsApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a meeting\'s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a livestream
         * @param {MeetingsApiUpdateLivestreamRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLivestream(requestParameters: MeetingsApiUpdateLivestreamRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateLivestream(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a meeting poll
         * @param {MeetingsApiUpdateMeetingPollRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingPoll(requestParameters: MeetingsApiUpdateMeetingPollRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMeetingPoll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the status of a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update meeting status
         * @param {MeetingsApiUpdateMeetingStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMeetingStatus(requestParameters: MeetingsApiUpdateMeetingStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMeetingStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary Update a live meeting message
         * @param {MeetingsApiUpdateMessageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(requestParameters: MeetingsApiUpdateMessageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateMessage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a meeting registrant\'s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Update registrant\'s status
         * @param {MeetingsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrantStatus(requestParameters: MeetingsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrantStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update registration questions
         * @param {MeetingsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRegistrationQuestions(requestParameters: MeetingsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRegistrationQuestions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update a meeting survey
         * @param {MeetingsApiUpdateSurveyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSurvey(requestParameters: MeetingsApiUpdateSurveyRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSurvey(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addRegistrant operation in MeetingsApi.
 * @export
 * @interface MeetingsApiAddRegistrantRequest
 */
export type MeetingsApiAddRegistrantRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiAddRegistrant
    */
    readonly meetingId: number
    
    /**
    * A comma-separated list of meeting occurrence IDs. You can get this value with the [Get a meeting](https://developers.zoom.us) API.
    * @type {string}
    * @memberof MeetingsApiAddRegistrant
    */
    readonly occurrenceIds?: string
    
} & MeetingsAddRegistrantRequest

/**
 * Request parameters for batchRegistrantsCreate operation in MeetingsApi.
 * @export
 * @interface MeetingsApiBatchRegistrantsCreateRequest
 */
export type MeetingsApiBatchRegistrantsCreateRequest = {
    
    /**
    * Unique identifier of the meeting (Meeting Number).
    * @type {string}
    * @memberof MeetingsApiBatchRegistrantsCreate
    */
    readonly meetingId: string
    
} & MeetingsBatchRegistrantsCreateRequest

/**
 * Request parameters for controlInMeetingFeatures operation in MeetingsApi.
 * @export
 * @interface MeetingsApiControlInMeetingFeaturesRequest
 */
export type MeetingsApiControlInMeetingFeaturesRequest = {
    
    /**
    * The live meeting\'s ID.
    * @type {string}
    * @memberof MeetingsApiControlInMeetingFeatures
    */
    readonly meetingId: string
    
} & MeetingsControlInMeetingFeaturesRequest

/**
 * Request parameters for createBatchPolls operation in MeetingsApi.
 * @export
 * @interface MeetingsApiCreateBatchPollsRequest
 */
export type MeetingsApiCreateBatchPollsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof MeetingsApiCreateBatchPolls
    */
    readonly meetingId: string
    
} & MeetingsCreateBatchPollsRequest

/**
 * Request parameters for createInviteLinks operation in MeetingsApi.
 * @export
 * @interface MeetingsApiCreateInviteLinksRequest
 */
export type MeetingsApiCreateInviteLinksRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiCreateInviteLinks
    */
    readonly meetingId: number
    
} & MeetingsCreateInviteLinksRequest

/**
 * Request parameters for createMeeting operation in MeetingsApi.
 * @export
 * @interface MeetingsApiCreateMeetingRequest
 */
export type MeetingsApiCreateMeetingRequest = {
    
    /**
    * The user\'s user ID or email address. For user-level apps, pass the `me` value.
    * @type {string}
    * @memberof MeetingsApiCreateMeeting
    */
    readonly userId: string
    
} & MeetingsCreateMeetingRequest

/**
 * Request parameters for createPoll operation in MeetingsApi.
 * @export
 * @interface MeetingsApiCreatePollRequest
 */
export type MeetingsApiCreatePollRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiCreatePoll
    */
    readonly meetingId: number
    
} & MeetingsCreatePollRequest

/**
 * Request parameters for createTemplateFromMeeting operation in MeetingsApi.
 * @export
 * @interface MeetingsApiCreateTemplateFromMeetingRequest
 */
export type MeetingsApiCreateTemplateFromMeetingRequest = {
    
    /**
    * The user ID retrievable from the [List users](https://developers.zoom.us) API.
    * @type {string}
    * @memberof MeetingsApiCreateTemplateFromMeeting
    */
    readonly userId: string
    
} & MeetingsCreateTemplateFromMeetingRequest

/**
 * Request parameters for deleteMeetingChatMessage operation in MeetingsApi.
 * @export
 * @interface MeetingsApiDeleteMeetingChatMessageRequest
 */
export type MeetingsApiDeleteMeetingChatMessageRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiDeleteMeetingChatMessage
    */
    readonly meetingId: number
    
    /**
    * The live meeting chat message\'s unique identifier (UUID), in base64-encoded format.
    * @type {string}
    * @memberof MeetingsApiDeleteMeetingChatMessage
    */
    readonly messageId: string
    
    /**
    * The live webinar chat file\'s universally unique identifier (UUID), in base64-encoded format. Separate multiple values with commas.
    * @type {string}
    * @memberof MeetingsApiDeleteMeetingChatMessage
    */
    readonly fileIds?: string
    
}

/**
 * Request parameters for deleteMeetingSurvey operation in MeetingsApi.
 * @export
 * @interface MeetingsApiDeleteMeetingSurveyRequest
 */
export type MeetingsApiDeleteMeetingSurveyRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiDeleteMeetingSurvey
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for deleteRegistrant operation in MeetingsApi.
 * @export
 * @interface MeetingsApiDeleteRegistrantRequest
 */
export type MeetingsApiDeleteRegistrantRequest = {
    
    /**
    * The meeting ID.
    * @type {number}
    * @memberof MeetingsApiDeleteRegistrant
    */
    readonly meetingId: number
    
    /**
    * The meeting registrant ID.
    * @type {string}
    * @memberof MeetingsApiDeleteRegistrant
    */
    readonly registrantId: string
    
    /**
    * The meeting occurrence ID.
    * @type {string}
    * @memberof MeetingsApiDeleteRegistrant
    */
    readonly occurrenceId?: string
    
}

/**
 * Request parameters for getDetails operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetDetailsRequest
 */
export type MeetingsApiGetDetailsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be more than 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetDetails
    */
    readonly meetingId: number
    
    /**
    * Meeting occurrence ID. Provide this field to view meeting details of a particular occurrence of the [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings).
    * @type {string}
    * @memberof MeetingsApiGetDetails
    */
    readonly occurrenceId?: string
    
    /**
    * Set this field\'s value to `true` to view meeting details of all previous occurrences of a [recurring meeting](https://support.zoom.us/hc/en-us/articles/214973206-Scheduling-Recurring-Meetings). 
    * @type {boolean}
    * @memberof MeetingsApiGetDetails
    */
    readonly showPreviousOccurrences?: boolean
    
}

/**
 * Request parameters for getDetails_1 operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetDetails0Request
 */
export type MeetingsApiGetDetails0Request = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID before making an API request.
    * @type {MeetingsGetDetailsMeetingIdParameter}
    * @memberof MeetingsApiGetDetails0
    */
    readonly meetingId: MeetingsGetDetailsMeetingIdParameter
    
}

/**
 * Request parameters for getInvitationNote operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetInvitationNoteRequest
 */
export type MeetingsApiGetInvitationNoteRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetInvitationNote
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for getJoinToken operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetJoinTokenRequest
 */
export type MeetingsApiGetJoinTokenRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetJoinToken
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for getJoinTokenLocalRecording operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetJoinTokenLocalRecordingRequest
 */
export type MeetingsApiGetJoinTokenLocalRecordingRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetJoinTokenLocalRecording
    */
    readonly meetingId: number
    
    /**
    * Whether to bypass the waiting room.
    * @type {boolean}
    * @memberof MeetingsApiGetJoinTokenLocalRecording
    */
    readonly bypassWaitingRoom?: boolean
    
}

/**
 * Request parameters for getLivestreamDetails operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetLivestreamDetailsRequest
 */
export type MeetingsApiGetLivestreamDetailsRequest = {
    
    /**
    * Unique identifier of the meeting.
    * @type {string}
    * @memberof MeetingsApiGetLivestreamDetails
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for getMeetingArchiveTokenForLocalArchiving operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest
 */
export type MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetMeetingArchiveTokenForLocalArchiving
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for getMeetingSummary operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetMeetingSummaryRequest
 */
export type MeetingsApiGetMeetingSummaryRequest = {
    
    /**
    * The meeting\'s universally unique ID (UUID). When you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof MeetingsApiGetMeetingSummary
    */
    readonly meetingId?: string
    
}

/**
 * Request parameters for getMeetingSurvey operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetMeetingSurveyRequest
 */
export type MeetingsApiGetMeetingSurveyRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be more than 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetMeetingSurvey
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for getMeetingToken operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetMeetingTokenRequest
 */
export type MeetingsApiGetMeetingTokenRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetMeetingToken
    */
    readonly meetingId: number
    
    /**
    * The meeting token type:  * `closed_caption_token` &mdash; The third-party closed caption API token.   This defaults to `closed_caption_token`.
    * @type {'closed_caption_token'}
    * @memberof MeetingsApiGetMeetingToken
    */
    readonly type?: 'closed_caption_token'
    
}

/**
 * Request parameters for getPastMeetingParticipants operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetPastMeetingParticipantsRequest
 */
export type MeetingsApiGetPastMeetingParticipantsRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof MeetingsApiGetPastMeetingParticipants
    */
    readonly meetingId: string
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof MeetingsApiGetPastMeetingParticipants
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof MeetingsApiGetPastMeetingParticipants
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for getPoll operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetPollRequest
 */
export type MeetingsApiGetPollRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetPoll
    */
    readonly meetingId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof MeetingsApiGetPoll
    */
    readonly pollId: string
    
}

/**
 * Request parameters for getRegistrantDetails operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetRegistrantDetailsRequest
 */
export type MeetingsApiGetRegistrantDetailsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetRegistrantDetails
    */
    readonly meetingId: number
    
    /**
    * The registrant ID.
    * @type {string}
    * @memberof MeetingsApiGetRegistrantDetails
    */
    readonly registrantId: string
    
}

/**
 * Request parameters for getSipUriWithPasscode operation in MeetingsApi.
 * @export
 * @interface MeetingsApiGetSipUriWithPasscodeRequest
 */
export type MeetingsApiGetSipUriWithPasscodeRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiGetSipUriWithPasscode
    */
    readonly meetingId: number
    
} & MeetingsGetSipUriWithPasscodeRequest

/**
 * Request parameters for listHostScheduled operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListHostScheduledRequest
 */
export type MeetingsApiListHostScheduledRequest = {
    
    /**
    * The user\'s user ID or email address. For user-level apps, pass the `me` value.
    * @type {string}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly userId: string
    
    /**
    * The type of meeting.  * `scheduled` - All valid previous (unexpired) meetings, live meetings, and upcoming scheduled meetings.  * `live` - All the ongoing meetings.  * `upcoming` - All upcoming meetings, including live meetings.  * `upcoming_meetings` - All upcoming meetings, including live meetings.  * `previous_meetings` - All the previous meetings.
    * @type {'scheduled' | 'live' | 'upcoming' | 'upcoming_meetings' | 'previous_meetings'}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly type?: 'scheduled' | 'live' | 'upcoming' | 'upcoming_meetings' | 'previous_meetings'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly nextPageToken?: string
    
    /**
    * The page number of the current page in the returned records.
    * @type {number}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly pageNumber?: number
    
    /**
    * The start date.
    * @type {string | Date}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly from?: string | Date
    
    /**
    * The end date.
    * @type {string | Date}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly to?: string | Date
    
    /**
    * The timezone to assign to the `from` and `to` value. For a list of supported timezones and their formats, see our [timezone list](https://developers.zoom.us/docs/api/rest/other-references/abbreviation-lists/#timezones).
    * @type {string}
    * @memberof MeetingsApiListHostScheduled
    */
    readonly timezone?: string
    
}

/**
 * Request parameters for listMeetingPolls operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListMeetingPollsRequest
 */
export type MeetingsApiListMeetingPollsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiListMeetingPolls
    */
    readonly meetingId: number
    
    /**
    * Whether to query for polls with the **Anonymous** option enabled:  * `true` &mdash; Query for polls with the **Anonymous** option enabled.  * `false` &mdash; Do not query for polls with the **Anonymous** option enabled.
    * @type {boolean}
    * @memberof MeetingsApiListMeetingPolls
    */
    readonly anonymous?: boolean
    
}

/**
 * Request parameters for listMeetingSummaries operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListMeetingSummariesRequest
 */
export type MeetingsApiListMeetingSummariesRequest = {
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof MeetingsApiListMeetingSummaries
    */
    readonly pageSize?: number
    
    /**
    * The next page token paginates through a large set of results. A next page token returns whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
    * @type {string}
    * @memberof MeetingsApiListMeetingSummaries
    */
    readonly nextPageToken?: string
    
    /**
    * The start date in `yyyy-MM-dd\'T\'HH:mm:ss\'Z\'` UTC format used to retrieve the creation date range of the meeting summaries.
    * @type {string}
    * @memberof MeetingsApiListMeetingSummaries
    */
    readonly from?: string
    
    /**
    * The end date in `yyyy-MM-dd\'T\'HH:mm:ss\'Z\'` UTC format used to retrieve the creation date range of the meeting summaries.
    * @type {string}
    * @memberof MeetingsApiListMeetingSummaries
    */
    readonly to?: string
    
}

/**
 * Request parameters for listMeetingTemplates operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListMeetingTemplatesRequest
 */
export type MeetingsApiListMeetingTemplatesRequest = {
    
    /**
    * The user ID retrievable from the [List users](https://developers.zoom.us) API.
    * @type {string}
    * @memberof MeetingsApiListMeetingTemplates
    */
    readonly userId: string
    
}

/**
 * Request parameters for listPastMeetingInstances operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListPastMeetingInstancesRequest
 */
export type MeetingsApiListPastMeetingInstancesRequest = {
    
    /**
    * The past meeting\'s ID.
    * @type {number}
    * @memberof MeetingsApiListPastMeetingInstances
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for listPastMeetingPolls operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListPastMeetingPollsRequest
 */
export type MeetingsApiListPastMeetingPollsRequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof MeetingsApiListPastMeetingPolls
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for listPastMeetingQA operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListPastMeetingQARequest
 */
export type MeetingsApiListPastMeetingQARequest = {
    
    /**
    * The meeting\'s ID or universally unique ID (UUID).  * If you provide a meeting ID, the API will return a response for the latest meeting instance.  * If you provide a meeting UUID that begins with a `/` character or contains the `//` characters, you **must** double-encode the meeting UUID before making an API request.
    * @type {string}
    * @memberof MeetingsApiListPastMeetingQA
    */
    readonly meetingId: string
    
}

/**
 * Request parameters for listRegistrants operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListRegistrantsRequest
 */
export type MeetingsApiListRegistrantsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiListRegistrants
    */
    readonly meetingId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof MeetingsApiListRegistrants
    */
    readonly occurrenceId?: string
    
    /**
    * Query by the registrant\'s status.  * `pending` - The registration is pending.  * `approved` - The registrant is approved.  * `denied` - The registration is denied.
    * @type {'pending' | 'approved' | 'denied'}
    * @memberof MeetingsApiListRegistrants
    */
    readonly status?: 'pending' | 'approved' | 'denied'
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof MeetingsApiListRegistrants
    */
    readonly pageSize?: number
    
    /**
    * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    * @type {number}
    * @memberof MeetingsApiListRegistrants
    */
    readonly pageNumber?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof MeetingsApiListRegistrants
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for listRegistrationQuestions operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListRegistrationQuestionsRequest
 */
export type MeetingsApiListRegistrationQuestionsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiListRegistrationQuestions
    */
    readonly meetingId: number
    
}

/**
 * Request parameters for listUpcomingMeetings operation in MeetingsApi.
 * @export
 * @interface MeetingsApiListUpcomingMeetingsRequest
 */
export type MeetingsApiListUpcomingMeetingsRequest = {
    
    /**
    * The user\'s user ID or email address. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword).
    * @type {string}
    * @memberof MeetingsApiListUpcomingMeetings
    */
    readonly userId: string
    
}

/**
 * Request parameters for livestreamStatusUpdate operation in MeetingsApi.
 * @export
 * @interface MeetingsApiLivestreamStatusUpdateRequest
 */
export type MeetingsApiLivestreamStatusUpdateRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiLivestreamStatusUpdate
    */
    readonly meetingId: number
    
} & MeetingsLivestreamStatusUpdateRequest

/**
 * Request parameters for pollDelete operation in MeetingsApi.
 * @export
 * @interface MeetingsApiPollDeleteRequest
 */
export type MeetingsApiPollDeleteRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiPollDelete
    */
    readonly meetingId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof MeetingsApiPollDelete
    */
    readonly pollId: string
    
}

/**
 * Request parameters for removeMeeting operation in MeetingsApi.
 * @export
 * @interface MeetingsApiRemoveMeetingRequest
 */
export type MeetingsApiRemoveMeetingRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiRemoveMeeting
    */
    readonly meetingId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof MeetingsApiRemoveMeeting
    */
    readonly occurrenceId?: string
    
    /**
    * `true`: Notify host and alternative host about the meeting cancellation via email. `false`: Do not send any email notification.
    * @type {boolean}
    * @memberof MeetingsApiRemoveMeeting
    */
    readonly scheduleForReminder?: boolean
    
    /**
    * `true`: Notify registrants about the meeting cancellation via email.   `false`: Do not send any email notification to meeting registrants.   The default value of this field is `false`.
    * @type {boolean}
    * @memberof MeetingsApiRemoveMeeting
    */
    readonly cancelMeetingReminder?: boolean
    
}

/**
 * Request parameters for updateDetails operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateDetailsRequest
 */
export type MeetingsApiUpdateDetailsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long format integer and **not** an integer. Meeting IDs can be greater than 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateDetails
    */
    readonly meetingId: number
    
    /**
    * Meeting occurrence ID. Support change of agenda, `start_time`, duration, or settings {`host_video`, `participant_video`, `join_before_host`, `mute_upon_entry`, `waiting_room`, `watermark`, `auto_recording`}.
    * @type {string}
    * @memberof MeetingsApiUpdateDetails
    */
    readonly occurrenceId?: string
    
} & MeetingsUpdateDetailsRequest

/**
 * Request parameters for updateLivestream operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateLivestreamRequest
 */
export type MeetingsApiUpdateLivestreamRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateLivestream
    */
    readonly meetingId: number
    
} & MeetingsUpdateLivestreamRequest

/**
 * Request parameters for updateMeetingPoll operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateMeetingPollRequest
 */
export type MeetingsApiUpdateMeetingPollRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateMeetingPoll
    */
    readonly meetingId: number
    
    /**
    * The poll ID
    * @type {string}
    * @memberof MeetingsApiUpdateMeetingPoll
    */
    readonly pollId: string
    
} & MeetingsUpdateMeetingPollRequest

/**
 * Request parameters for updateMeetingStatus operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateMeetingStatusRequest
 */
export type MeetingsApiUpdateMeetingStatusRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateMeetingStatus
    */
    readonly meetingId: number
    
} & MeetingsUpdateMeetingStatusRequest

/**
 * Request parameters for updateMessage operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateMessageRequest
 */
export type MeetingsApiUpdateMessageRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long-format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateMessage
    */
    readonly meetingId: number
    
    /**
    * The live meeting chat message\'s unique identifier (UUID), in base64-encoded format.
    * @type {string}
    * @memberof MeetingsApiUpdateMessage
    */
    readonly messageId: string
    
} & MeetingsUpdateMessageRequest

/**
 * Request parameters for updateRegistrantStatus operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateRegistrantStatusRequest
 */
export type MeetingsApiUpdateRegistrantStatusRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateRegistrantStatus
    */
    readonly meetingId: number
    
    /**
    * The meeting or webinar occurrence ID.
    * @type {string}
    * @memberof MeetingsApiUpdateRegistrantStatus
    */
    readonly occurrenceId?: string
    
} & MeetingsUpdateRegistrantStatusRequest

/**
 * Request parameters for updateRegistrationQuestions operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateRegistrationQuestionsRequest
 */
export type MeetingsApiUpdateRegistrationQuestionsRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, you must store it as a long format integer and **not** an integer. Meeting IDs can exceed 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateRegistrationQuestions
    */
    readonly meetingId: number
    
} & MeetingsUpdateRegistrationQuestionsRequest

/**
 * Request parameters for updateSurvey operation in MeetingsApi.
 * @export
 * @interface MeetingsApiUpdateSurveyRequest
 */
export type MeetingsApiUpdateSurveyRequest = {
    
    /**
    * The meeting\'s ID.    When storing this value in your database, store it as a long-format integer and **not** a simple integer. Meeting IDs can be over 10 digits.
    * @type {number}
    * @memberof MeetingsApiUpdateSurvey
    */
    readonly meetingId: number
    
} & MeetingsUpdateSurveyRequest

/**
 * MeetingsApiGenerated - object-oriented interface
 * @export
 * @class MeetingsApiGenerated
 * @extends {BaseAPI}
 */
export class MeetingsApiGenerated extends BaseAPI {
    /**
     * Create and submit a user\'s registration to a meeting. See [Customizing webinar registration](https://support.zoom.us/hc/en-us/articles/202835649-Customizing-webinar-registration) for details on how to set the requirements for these fields. Note that there is a maximum limit of 4,999 registrants per meeting and users will see an error if the meeting\'s capacity is reached.    **Prerequisites:**  * The host must be a **Licensed** user type.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Add a meeting registrant
     * @param {MeetingsApiAddRegistrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public addRegistrant(requestParameters: MeetingsApiAddRegistrantRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).addRegistrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register up to 30 registrants at once for a meeting that requires [registration](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).       **Prerequisites:**     * The meeting host must be a Licensed user. * The meeting must require registration and should be of type `2`, i.e., they should be scheduled meetings. Instant meetings and Recurring meetings are not supported by this API.            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Heavy`
     * @summary Perform batch registration
     * @param {MeetingsApiBatchRegistrantsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public batchRegistrantsCreate(requestParameters: MeetingsApiBatchRegistrantsCreateRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).batchRegistrantsCreate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Control [in-meeting](https://support.zoom.us/hc/en-us/articles/360021921032-In-Meeting-Controls) features. In-meeting controls include starting and stopping a recording, pausing and resuming a recording, and inviting participants.   **Note:** This API\'s recording control only works for cloud recordings. It does **not** work for local recordings.   **Prerequisites:** * The meeting **must** be a live meeting **except** inviting participants to the meeting through [call out (phone)/(room system)].  * Recording control: [Cloud recording](https://support.zoom.us/hc/en-us/articles/360060231472-Enabling-cloud-recording) must be enabled on the account.  * The user calling this API must be the host or an alternative meeting host.     **Scopes:** `meeting:write`,`meeting:write:admin`,`meeting:master`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Use in-meeting controls
     * @param {MeetingsApiControlInMeetingFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public controlInMeetingFeatures(requestParameters: MeetingsApiControlInMeetingFeaturesRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).controlInMeetingFeatures(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. Create batch [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Perform batch poll creation
     * @param {MeetingsApiCreateBatchPollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public createBatchPolls(requestParameters: MeetingsApiCreateBatchPollsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).createBatchPolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a batch of invitation links for a meeting.    **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Create meeting\'s invite links
     * @param {MeetingsApiCreateInviteLinksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public createInviteLinks(requestParameters: MeetingsApiCreateInviteLinksRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).createInviteLinks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Create a meeting](https://support.zoom.us/hc/en-us/articles/201362413-Scheduling-meetings) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  * A meeting\'s `start_url` value is the URL a host or an alternative host can use to start a meeting. The expiration time for the `start_url` value is **two hours** for all regular users. * For `custCreate` meeting hosts (users created with the `custCreate` parameter via the [**Create users**](https://developers.zoom.us/docs/api/rest/reference/zoom-api/methods/#operation/userCreate) API), the expiration time of the `start_url` parameter is **90 days** from the generation of the `start_url`.  **Note:**   For security reasons, the recommended way to programmatically get the updated `start_url` value after expiry is to call the [**Get a meeting**](/api-reference/zoom-api/methods#operation/meeting) API. Refer to the `start_url` value in the response.    **100 requests per day**. The rate limit is applied against the `userId` of the **meeting host** used to make the request.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Create a meeting
     * @param {MeetingsApiCreateMeetingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public createMeeting(requestParameters: MeetingsApiCreateMeetingRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).createMeeting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. Create a [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) for a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Polling feature must be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Create a meeting poll
     * @param {MeetingsApiCreatePollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public createPoll(requestParameters: MeetingsApiCreatePollRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).createPoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a meeting template from an existing meeting.     **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Create a meeting template from an existing meeting
     * @param {MeetingsApiCreateTemplateFromMeetingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public createTemplateFromMeeting(requestParameters: MeetingsApiCreateTemplateFromMeetingRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).createTemplateFromMeeting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a message in a live meeting, based on ID.   **Prerequisites:**  * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Delete a live meeting message
     * @param {MeetingsApiDeleteMeetingChatMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public deleteMeetingChatMessage(requestParameters: MeetingsApiDeleteMeetingChatMessageRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).deleteMeetingChatMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).    **Prerequisites:**  * The host must be a **Pro** user type.  * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature enabled in the host\'s account.  * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting survey
     * @param {MeetingsApiDeleteMeetingSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public deleteMeetingSurvey(requestParameters: MeetingsApiDeleteMeetingSurveyRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).deleteMeetingSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a meeting registrant.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting registrant
     * @param {MeetingsApiDeleteRegistrantRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public deleteRegistrant(requestParameters: MeetingsApiDeleteRegistrantRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).deleteRegistrant(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the given meeting\'s details.         **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a meeting
     * @param {MeetingsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getDetails(requestParameters: MeetingsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a past meeting.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get past meeting details
     * @param {MeetingsApiGetDetails0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getDetails_1(requestParameters: MeetingsApiGetDetails0Request, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getDetails_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the meeting invitation note for a specific meeting.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get meeting invitation
     * @param {MeetingsApiGetInvitationNoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getInvitationNote(requestParameters: MeetingsApiGetInvitationNoteRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getInvitationNote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meeting\'s join token to allow live streaming. The join token allows a recording bot implemented using Zoom meeting SDK to connect to a Zoom meeting &quot;hosted by the issuer of the token&quot;, and can call the streaming method automatically. It supports both regular live streaming, and raw streaming.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Allow livestreaming of meetings** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:live_streaming`,`meeting_token:read:live_streaming`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a meeting\'s join token for live streaming
     * @param {MeetingsApiGetJoinTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getJoinToken(requestParameters: MeetingsApiGetJoinTokenRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getJoinToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meeting\'s join token to allow for local recording. The join token lets a recording bot implemented using Zoom Meeting SDK to connect to a Zoom meeting. The recording bot can then automatically start locally recording. This supports both regular and raw local recording types.   **Prerequisites:**  * The **Local recording** user setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:local_recording`,`meeting_token:read:admin:local_recording`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a meeting\'s join token for local recording
     * @param {MeetingsApiGetJoinTokenLocalRecordingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getJoinTokenLocalRecording(requestParameters: MeetingsApiGetJoinTokenLocalRecordingRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getJoinTokenLocalRecording(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Get a meeting\'s livestream configuration details such as Stream URL, Stream Key and Page URL.          **Prerequisites:**     * Meeting host must be a licensed user with a Pro or higher plan.     * Live streaming details must have been [configured](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service#h_01589a6f-a40a-4e18-a448-cb746e52ebc5) for the meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get livestream details
     * @param {MeetingsApiGetLivestreamDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getLivestreamDetails(requestParameters: MeetingsApiGetLivestreamDetailsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getLivestreamDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meeting\'s archive token to allow local archiving. The archive token allows a meeting SDK app or bot to get archive permission to access the meeting\'s raw audio and video media stream in real-time.   **Prerequisites:**  * A Pro or higher plan for the meeting host.  * The **Archive meetings and webinars** account setting enabled in the Zoom web portal.  **Scopes:** `meeting_token:read:admin:local_archiving`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a meeting\'s archive token for local archiving
     * @param {MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getMeetingArchiveTokenForLocalArchiving(requestParameters: MeetingsApiGetMeetingArchiveTokenForLocalArchivingRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getMeetingArchiveTokenForLocalArchiving(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Displays information about a meeting summary.  **Prerequisites**: * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`,`meeting_summary:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a meeting summary
     * @param {MeetingsApiGetMeetingSummaryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getMeetingSummary(requestParameters: MeetingsApiGetMeetingSummaryRequest = {}, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getMeetingSummary(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Display information about a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host has a **Pro** license. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled on the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a meeting survey
     * @param {MeetingsApiGetMeetingSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getMeetingSurvey(requestParameters: MeetingsApiGetMeetingSurveyRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getMeetingSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meeting\'s [closed caption token (caption URL)](https://support.zoom.us/hc/en-us/articles/115002212983-Using-a-third-party-closed-captioning-service). This token lets you use a third-party service to stream text to their closed captioning software to the Zoom meeting.   **Prerequisites:**  * The **Closed captioning** setting enabled in the Zoom web portal.  * The **Allow use of caption API Token to integrate with 3rd-party Closed Captioning services** setting enabled.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get meeting\'s token
     * @param {MeetingsApiGetMeetingTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getMeetingToken(requestParameters: MeetingsApiGetMeetingTokenRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getMeetingToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve information on participants from a past meeting. Note the API doesn\'t return results if there\'s only one participant in a meeting.          **Prerequisites:**     * Paid account on a Pro or higher plan.             **Note**: Please double encode your UUID when using this API if the UUID begins with a \'/\'or contains \'//\' in it.   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Get past meeting participants
     * @param {MeetingsApiGetPastMeetingParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getPastMeetingParticipants(requestParameters: MeetingsApiGetPastMeetingParticipantsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getPastMeetingParticipants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. Retrieve information about a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a meeting poll
     * @param {MeetingsApiGetPollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getPoll(requestParameters: MeetingsApiGetPollRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getPoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details on a specific user who has registered for the meeting. A host or a user with administrative permissions can require [registration for Zoom meetings](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).  **Prerequisites:**  * The account must have a Meeting plan  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a meeting registrant
     * @param {MeetingsApiGetRegistrantDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getRegistrantDetails(requestParameters: MeetingsApiGetRegistrantDetailsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getRegistrantDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a meeting\'s SIP URI.  The URI consists of the meeting ID, (optional, user-supplied) passcode and participant identifier code.  The API return data also includes additional fields to indicate whether the API caller has a valid Cloud Room Connector subscription, the participant identifier code from the URI, and the SIP URI validity period (in seconds).     **Scopes:** `meeting:write:sip_dialing`,`meeting:write:admin:sip_dialing`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Get a meeting SIP URI with Passcode
     * @param {MeetingsApiGetSipUriWithPasscodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public getSipUriWithPasscode(requestParameters: MeetingsApiGetSipUriWithPasscodeRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).getSipUriWithPasscode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a meeting host user\'s scheduled meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.   **Note**  * This API **only** supports scheduled meetings. This API does not return information about instant meetings.  * This API only returns a user\'s [unexpired meetings](https://support.zoom.us/hc/en-us/articles/201362373-Meeting-ID#h_c73f9b08-c1c0-4a1a-b538-e01ebb98e844).      **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List meetings
     * @param {MeetingsApiListHostScheduledRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listHostScheduled(requestParameters: MeetingsApiListHostScheduledRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listHostScheduled(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. List all [polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) of a meeting.           **Prerequisites**:     * Host user type must be **Pro** or higher plan. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary List meeting polls
     * @param {MeetingsApiListMeetingPollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listMeetingPolls(requestParameters: MeetingsApiListMeetingPollsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listMeetingPolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a list of all meeting summaries for an account.  **Prerequisites** * Host user type must be Pro or higher plan. * The Meeting Summary with AI Companion feature enabled in the host\'s account. * E2ee meetings do not have summary feature enabled.  **Scopes:** `meeting_summary:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List meeting summaries of an account
     * @param {MeetingsApiListMeetingSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listMeetingSummaries(requestParameters: MeetingsApiListMeetingSummariesRequest = {}, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listMeetingSummaries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List available [meeting templates](https://support.zoom.us/hc/en-us/articles/360036559151-Meeting-templates) for a user. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.    **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List meeting templates
     * @param {MeetingsApiListMeetingTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listMeetingTemplates(requestParameters: MeetingsApiListMeetingTemplatesRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listMeetingTemplates(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of past meeting instances.      **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List past meeting instances
     * @param {MeetingsApiListPastMeetingInstancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listPastMeetingInstances(requestParameters: MeetingsApiListPastMeetingInstancesRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listPastMeetingInstances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * [Polls](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings) allow the meeting host to survey attendees. List poll results of a meeting.           **Prerequisites**:     * Host user type must be **Pro**. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List past meeting\'s poll results
     * @param {MeetingsApiListPastMeetingPollsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listPastMeetingPolls(requestParameters: MeetingsApiListPastMeetingPollsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listPastMeetingPolls(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The question &amp; answer (Q&amp;A) feature for Zoom Meetings lets attendees ask questions during a meeting and lets the other attendees answer those questions.     List Q&amp;A of a specific meeting.  **Prerequisites:**     *   **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List past meetings\' Q&A
     * @param {MeetingsApiListPastMeetingQARequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listPastMeetingQA(requestParameters: MeetingsApiListPastMeetingQARequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listPastMeetingQA(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A host or a user with admin permission can require [registration for a Zoom meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings). List users that have registered for a meeting.            **Scopes:** `meeting:read:admin`,`meeting:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List meeting registrants
     * @param {MeetingsApiListRegistrantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listRegistrants(requestParameters: MeetingsApiListRegistrantsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listRegistrants(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).        **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary List registration questions 
     * @param {MeetingsApiListRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listRegistrationQuestions(requestParameters: MeetingsApiListRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List a Zoom user\'s upcoming meetings. For user-level apps, pass [the `me` value](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#the-me-keyword) instead of the `userId` parameter.  **Note** * This API includes the meetings that Zoom users schedule and the meetings they are invited to join. * This API **only** includes upcoming meetings within the next 24 hours.  **Scopes:** `meeting:read`,`meeting:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List upcoming meetings
     * @param {MeetingsApiListUpcomingMeetingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public listUpcomingMeetings(requestParameters: MeetingsApiListUpcomingMeetingsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).listUpcomingMeetings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform. Update the status of a meeting\'s livestream.          **Prerequisites:**     * Meeting host must have a Pro license.       **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update Live Stream Status
     * @param {MeetingsApiLivestreamStatusUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public livestreamStatusUpdate(requestParameters: MeetingsApiLivestreamStatusUpdateRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).livestreamStatusUpdate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. Delete a meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings).     **Prerequisites**:     * Host user type must be **Pro**. * Polling feature should be enabled in the host\'s account. * Meeting must be a scheduled meeting. Instant meetings do not have polling features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting poll
     * @param {MeetingsApiPollDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public pollDelete(requestParameters: MeetingsApiPollDeleteRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).pollDelete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting
     * @param {MeetingsApiRemoveMeetingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public removeMeeting(requestParameters: MeetingsApiRemoveMeetingRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).removeMeeting(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update meeting details.  **Note**  * The `start_time` value **must** be a future date. If the value is omitted or a date is in the past, the API ignores this value and does **not** update any recurring meetings.  * The `recurrence` object is **required**. * This API has a rate limit of **100 requests per day**. You can update a meeting for a maximum of **100 times within a 24-hour period**.      **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a meeting
     * @param {MeetingsApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateDetails(requestParameters: MeetingsApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a meeting\'s livestream information. Zoom allows users to [livestream a meeting](https://support.zoom.us/hc/en-us/articles/115001777826-Live-Streaming-Meetings-or-Webinars-Using-a-Custom-Service) to a custom platform.  **Prerequisites:**  * Meeting host must have a Pro license.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update a livestream
     * @param {MeetingsApiUpdateLivestreamRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateLivestream(requestParameters: MeetingsApiUpdateLivestreamRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateLivestream(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Polls allow the meeting host to survey attendees. Update information of a specific meeting [poll](https://support.zoom.us/hc/en-us/articles/213756303-Polling-for-Meetings)            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update a meeting poll
     * @param {MeetingsApiUpdateMeetingPollRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateMeetingPoll(requestParameters: MeetingsApiUpdateMeetingPollRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateMeetingPoll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the status of a meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update meeting status
     * @param {MeetingsApiUpdateMeetingStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateMeetingStatus(requestParameters: MeetingsApiUpdateMeetingStatusRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateMeetingStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a message in a live meeting, based on ID. **Prerequisites:** * Have Zoom enable the DLP for the in-meeting chat feature to use this API.  **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary Update a live meeting message
     * @param {MeetingsApiUpdateMessageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateMessage(requestParameters: MeetingsApiUpdateMessageRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateMessage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a meeting registrant\'s status by either approving, cancelling or denying a registrant from joining the meeting.            **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Update registrant\'s status
     * @param {MeetingsApiUpdateRegistrantStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateRegistrantStatus(requestParameters: MeetingsApiUpdateRegistrantStatusRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateRegistrantStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update registration questions that will be displayed to users while [registering for a meeting](https://support.zoom.us/hc/en-us/articles/211579443-Registration-for-Meetings).            **Scopes:** `meeting:write`,`meeting:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update registration questions
     * @param {MeetingsApiUpdateRegistrationQuestionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateRegistrationQuestions(requestParameters: MeetingsApiUpdateRegistrationQuestionsRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateRegistrationQuestions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [meeting survey](https://support.zoom.us/hc/en-us/articles/4404969060621-Post-meeting-survey-and-reporting).  **Prerequisites:** * The host must be a **Pro** user type. * The [**Meeting Survey**](https://support.zoom.us/hc/en-us/articles/4404939095053-Enabling-meeting-surveys) feature is enabled in the host\'s account. * The meeting must be a scheduled meeting. Instant meetings do not have survey features enabled.  **Scopes:** `meeting:write:admin`,`meeting:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update a meeting survey
     * @param {MeetingsApiUpdateSurveyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeetingsApiGenerated
     */
    public updateSurvey(requestParameters: MeetingsApiUpdateSurveyRequest, options?: AxiosRequestConfig) {
        return MeetingsApiFp(this.configuration).updateSurvey(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
