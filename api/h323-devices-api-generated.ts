/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { H323DevicesCreateDeviceRequest } from '../models';
// @ts-ignore
import { H323DevicesCreateDeviceResponse } from '../models';
// @ts-ignore
import { H323DevicesListDevicesResponse } from '../models';
// @ts-ignore
import { H323DevicesUpdateDeviceInfoRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * H323DevicesApi - axios parameter creator
 * @export
 */
export const H323DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a H.323/SIP device
         * @param {H323DevicesCreateDeviceRequest} [h323DevicesCreateDeviceRequest] H.323/SIP device.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: async (h323DevicesCreateDeviceRequest?: H323DevicesCreateDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/h323/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["h323:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: h323DevicesCreateDeviceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/h323/devices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(h323DevicesCreateDeviceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a H.323/SIP device
         * @param {string} deviceId The device ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDevice', 'deviceId', deviceId)
            const localVarPath = `/h323/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["h323:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/h323/devices/{deviceId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.            **Scopes:** `h323:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List H.323/SIP devices
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {number} [pageNumber] **Deprecated.** We will no longer support this field in a future release. Instead, use the &#x60;next_page_token&#x60; for pagination.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: async (pageSize?: number, pageNumber?: number, nextPageToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/h323/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["h323:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/h323/devices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a H.323/SIP device
         * @param {string} deviceId The device ID.
         * @param {H323DevicesUpdateDeviceInfoRequest} [h323DevicesUpdateDeviceInfoRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceInfo: async (deviceId: string, h323DevicesUpdateDeviceInfoRequest?: H323DevicesUpdateDeviceInfoRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDeviceInfo', 'deviceId', deviceId)
            const localVarPath = `/h323/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["h323:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: h323DevicesUpdateDeviceInfoRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/h323/devices/{deviceId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(h323DevicesUpdateDeviceInfoRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * H323DevicesApi - functional programming interface
 * @export
 */
export const H323DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = H323DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a H.323/SIP device
         * @param {H323DevicesApiCreateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice(requestParameters: H323DevicesApiCreateDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H323DevicesCreateDeviceResponse>> {
            const h323DevicesCreateDeviceRequest: H323DevicesCreateDeviceRequest = {
                encryption: requestParameters.encryption,
                ip: requestParameters.ip,
                name: requestParameters.name,
                protocol: requestParameters.protocol
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDevice(h323DevicesCreateDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a H.323/SIP device
         * @param {H323DevicesApiDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(requestParameters: H323DevicesApiDeleteDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDevice(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.            **Scopes:** `h323:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List H.323/SIP devices
         * @param {H323DevicesApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevices(requestParameters: H323DevicesApiListDevicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<H323DevicesListDevicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDevices(requestParameters.pageSize, requestParameters.pageNumber, requestParameters.nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a H.323/SIP device
         * @param {H323DevicesApiUpdateDeviceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDeviceInfo(requestParameters: H323DevicesApiUpdateDeviceInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const h323DevicesUpdateDeviceInfoRequest: H323DevicesUpdateDeviceInfoRequest = {
                encryption: requestParameters.encryption,
                ip: requestParameters.ip,
                name: requestParameters.name,
                protocol: requestParameters.protocol
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDeviceInfo(requestParameters.deviceId, h323DevicesUpdateDeviceInfoRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * H323DevicesApi - factory interface
 * @export
 */
export const H323DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = H323DevicesApiFp(configuration)
    return {
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a H.323/SIP device
         * @param {H323DevicesApiCreateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice(requestParameters: H323DevicesApiCreateDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<H323DevicesCreateDeviceResponse> {
            return localVarFp.createDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a H.323/SIP device
         * @param {H323DevicesApiDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(requestParameters: H323DevicesApiDeleteDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.            **Scopes:** `h323:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List H.323/SIP devices
         * @param {H323DevicesApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(requestParameters: H323DevicesApiListDevicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<H323DevicesListDevicesResponse> {
            return localVarFp.listDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a H.323/SIP device
         * @param {H323DevicesApiUpdateDeviceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDeviceInfo(requestParameters: H323DevicesApiUpdateDeviceInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDeviceInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDevice operation in H323DevicesApi.
 * @export
 * @interface H323DevicesApiCreateDeviceRequest
 */
export type H323DevicesApiCreateDeviceRequest = {
    
} & H323DevicesCreateDeviceRequest

/**
 * Request parameters for deleteDevice operation in H323DevicesApi.
 * @export
 * @interface H323DevicesApiDeleteDeviceRequest
 */
export type H323DevicesApiDeleteDeviceRequest = {
    
    /**
    * The device ID.
    * @type {string}
    * @memberof H323DevicesApiDeleteDevice
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for listDevices operation in H323DevicesApi.
 * @export
 * @interface H323DevicesApiListDevicesRequest
 */
export type H323DevicesApiListDevicesRequest = {
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof H323DevicesApiListDevices
    */
    readonly pageSize?: number
    
    /**
    * **Deprecated.** We will no longer support this field in a future release. Instead, use the `next_page_token` for pagination.
    * @type {number}
    * @memberof H323DevicesApiListDevices
    */
    readonly pageNumber?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof H323DevicesApiListDevices
    */
    readonly nextPageToken?: string
    
}

/**
 * Request parameters for updateDeviceInfo operation in H323DevicesApi.
 * @export
 * @interface H323DevicesApiUpdateDeviceInfoRequest
 */
export type H323DevicesApiUpdateDeviceInfoRequest = {
    
    /**
    * The device ID.
    * @type {string}
    * @memberof H323DevicesApiUpdateDeviceInfo
    */
    readonly deviceId: string
    
} & H323DevicesUpdateDeviceInfoRequest

/**
 * H323DevicesApiGenerated - object-oriented interface
 * @export
 * @class H323DevicesApiGenerated
 * @extends {BaseAPI}
 */
export class H323DevicesApiGenerated extends BaseAPI {
    /**
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to add a H.323/SIP device to your Zoom account            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Create a H.323/SIP device
     * @param {H323DevicesApiCreateDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H323DevicesApiGenerated
     */
    public createDevice(requestParameters: H323DevicesApiCreateDeviceRequest, options?: AxiosRequestConfig) {
        return H323DevicesApiFp(this.configuration).createDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to delete a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a H.323/SIP device
     * @param {H323DevicesApiDeleteDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H323DevicesApiGenerated
     */
    public deleteDevice(requestParameters: H323DevicesApiDeleteDeviceRequest, options?: AxiosRequestConfig) {
        return H323DevicesApiFp(this.configuration).deleteDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to list all H.323/SIP Devices on a Zoom account.            **Scopes:** `h323:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List H.323/SIP devices
     * @param {H323DevicesApiListDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H323DevicesApiGenerated
     */
    public listDevices(requestParameters: H323DevicesApiListDevicesRequest = {}, options?: AxiosRequestConfig) {
        return H323DevicesApiFp(this.configuration).listDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A H.323 or SIP device can make a video call to a [Room Connector](https://support.zoom.us/hc/en-us/articles/201363273-Getting-Started-With-H-323-SIP-Room-Connector) to join a Zoom cloud meeting. A Room Connector can also call out to a H.323 or SIP device to join a Zoom cloud meeting. Use this API to edit information of a H.323/SIP device from your Zoom account.            **Scopes:** `h323:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update a H.323/SIP device
     * @param {H323DevicesApiUpdateDeviceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof H323DevicesApiGenerated
     */
    public updateDeviceInfo(requestParameters: H323DevicesApiUpdateDeviceInfoRequest, options?: AxiosRequestConfig) {
        return H323DevicesApiFp(this.configuration).updateDeviceInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
