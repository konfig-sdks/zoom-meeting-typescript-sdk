/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArchivingGetStatisticsResponse } from '../models';
// @ts-ignore
import { ArchivingMeetingFilesList200Response } from '../models';
// @ts-ignore
import { ArchivingMeetingFilesListResponse } from '../models';
// @ts-ignore
import { ArchivingUpdateAutoDeleteStatusRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ArchivingApi - axios parameter creator
 * @export
 */
export const ArchivingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get statistics about an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get archived file statistics
         * @param {string} [from] The query start date, &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;to&#x60; query parameter value cannot exceed seven days.
         * @param {string} [to] The query end date, in &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;from&#x60; query parameter value cannot exceed seven days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics: async (from?: string, to?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archive_files/statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin"], configuration)
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/archive_files/statistics',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete all of a meeting\'s archived files.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting\'s archived files
         * @param {string} meetingUUID The meeting\&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesDelete: async (meetingUUID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingUUID' is not null or undefined
            assertParamExists('meetingFilesDelete', 'meetingUUID', meetingUUID)
            const localVarPath = `/past_meetings/{meetingUUID}/archive_files`
                .replace(`{${"meetingUUID"}}`, encodeURIComponent(String(meetingUUID !== undefined ? meetingUUID : `-meetingUUID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write:admin", "recording:write"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingUUID}/archive_files',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List archived files
         * @param {number} [pageSize] The number of records returned within a single API call.
         * @param {string} [nextPageToken] Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\&#39;s expiration period is 15 minutes.
         * @param {string} [from] The query start date, in &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;to&#x60; query parameter value cannot exceed seven days.
         * @param {string} [to] The query end date, in &#x60;yyyy-MM-dd\&#39;T\&#39;HH:mm:ssZ&#x60; format. This value and the &#x60;from&#x60; query parameter value cannot exceed seven days.
         * @param {'meeting_start_time' | 'archive_complete_time'} [queryDateType] The type of query date. * &#x60;meeting_start_time&#x60;  * &#x60;archive_complete_time&#x60;    This value defaults to &#x60;meeting_start_time&#x60;.
         * @param {string} [groupId] The group ID. To get a group ID, use the [List groups](https://developers.zoom.us/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesList: async (pageSize?: number, nextPageToken?: string, from?: string, to?: string, queryDateType?: 'meeting_start_time' | 'archive_complete_time', groupId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archive_files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read:admin"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['next_page_token'] = nextPageToken;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (queryDateType !== undefined) {
                localVarQueryParameter['query_date_type'] = queryDateType;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/archive_files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a specific meeting instance\'s [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s archived files
         * @param {string} meetingUUID The meeting\&#39;s universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a &#x60;/&#x60; character or contains a &#x60;//&#x60; character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesList_1: async (meetingUUID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'meetingUUID' is not null or undefined
            assertParamExists('meetingFilesList_1', 'meetingUUID', meetingUUID)
            const localVarPath = `/past_meetings/{meetingUUID}/archive_files`
                .replace(`{${"meetingUUID"}}`, encodeURIComponent(String(meetingUUID !== undefined ? meetingUUID : `-meetingUUID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:read"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/past_meetings/{meetingUUID}/archive_files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an archived file\'s auto-delete status.    **Prerequisites:**  * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account. * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.  **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update an archived file\'s auto-delete status
         * @param {string} [fileId] 
         * @param {ArchivingUpdateAutoDeleteStatusRequest} [archivingUpdateAutoDeleteStatusRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoDeleteStatus: async (fileId?: string, archivingUpdateAutoDeleteStatusRequest?: ArchivingUpdateAutoDeleteStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/archive_files/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["recording:write", "recording:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: archivingUpdateAutoDeleteStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/archive_files/{fileId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(archivingUpdateAutoDeleteStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArchivingApi - functional programming interface
 * @export
 */
export const ArchivingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArchivingApiAxiosParamCreator(configuration)
    return {
        /**
         * Get statistics about an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get archived file statistics
         * @param {ArchivingApiGetStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatistics(requestParameters: ArchivingApiGetStatisticsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivingGetStatisticsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatistics(requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete all of a meeting\'s archived files.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting\'s archived files
         * @param {ArchivingApiMeetingFilesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meetingFilesDelete(requestParameters: ArchivingApiMeetingFilesDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meetingFilesDelete(requestParameters.meetingUUID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List archived files
         * @param {ArchivingApiMeetingFilesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meetingFilesList(requestParameters: ArchivingApiMeetingFilesListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivingMeetingFilesListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meetingFilesList(requestParameters.pageSize, requestParameters.nextPageToken, requestParameters.from, requestParameters.to, requestParameters.queryDateType, requestParameters.groupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a specific meeting instance\'s [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s archived files
         * @param {ArchivingApiMeetingFilesList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meetingFilesList_1(requestParameters: ArchivingApiMeetingFilesList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArchivingMeetingFilesList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meetingFilesList_1(requestParameters.meetingUUID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an archived file\'s auto-delete status.    **Prerequisites:**  * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account. * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.  **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update an archived file\'s auto-delete status
         * @param {ArchivingApiUpdateAutoDeleteStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAutoDeleteStatus(requestParameters: ArchivingApiUpdateAutoDeleteStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const archivingUpdateAutoDeleteStatusRequest: ArchivingUpdateAutoDeleteStatusRequest = {
                auto_delete: requestParameters.auto_delete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAutoDeleteStatus(requestParameters.fileId, archivingUpdateAutoDeleteStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ArchivingApi - factory interface
 * @export
 */
export const ArchivingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArchivingApiFp(configuration)
    return {
        /**
         * Get statistics about an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary Get archived file statistics
         * @param {ArchivingApiGetStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatistics(requestParameters: ArchivingApiGetStatisticsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ArchivingGetStatisticsResponse> {
            return localVarFp.getStatistics(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete all of a meeting\'s archived files.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a meeting\'s archived files
         * @param {ArchivingApiMeetingFilesDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesDelete(requestParameters: ArchivingApiMeetingFilesDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.meetingFilesDelete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
         * @summary List archived files
         * @param {ArchivingApiMeetingFilesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesList(requestParameters: ArchivingApiMeetingFilesListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ArchivingMeetingFilesListResponse> {
            return localVarFp.meetingFilesList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a specific meeting instance\'s [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Get a meeting\'s archived files
         * @param {ArchivingApiMeetingFilesList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meetingFilesList_1(requestParameters: ArchivingApiMeetingFilesList0Request, options?: AxiosRequestConfig): AxiosPromise<ArchivingMeetingFilesList200Response> {
            return localVarFp.meetingFilesList_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an archived file\'s auto-delete status.    **Prerequisites:**  * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account. * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.  **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
         * @summary Update an archived file\'s auto-delete status
         * @param {ArchivingApiUpdateAutoDeleteStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAutoDeleteStatus(requestParameters: ArchivingApiUpdateAutoDeleteStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAutoDeleteStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStatistics operation in ArchivingApi.
 * @export
 * @interface ArchivingApiGetStatisticsRequest
 */
export type ArchivingApiGetStatisticsRequest = {
    
    /**
    * The query start date, `yyyy-MM-dd\'T\'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
    * @type {string}
    * @memberof ArchivingApiGetStatistics
    */
    readonly from?: string
    
    /**
    * The query end date, in `yyyy-MM-dd\'T\'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
    * @type {string}
    * @memberof ArchivingApiGetStatistics
    */
    readonly to?: string
    
}

/**
 * Request parameters for meetingFilesDelete operation in ArchivingApi.
 * @export
 * @interface ArchivingApiMeetingFilesDeleteRequest
 */
export type ArchivingApiMeetingFilesDeleteRequest = {
    
    /**
    * The meeting\'s universally unique identifier (UUID). Each meeting instance generates a UUID. For example, after a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesDelete
    */
    readonly meetingUUID: string
    
}

/**
 * Request parameters for meetingFilesList operation in ArchivingApi.
 * @export
 * @interface ArchivingApiMeetingFilesListRequest
 */
export type ArchivingApiMeetingFilesListRequest = {
    
    /**
    * The number of records returned within a single API call.
    * @type {number}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly pageSize?: number
    
    /**
    * Use the next page token to paginate through large result sets. A next page token is returned whenever the set of available results exceeds the current page size. This token\'s expiration period is 15 minutes.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly nextPageToken?: string
    
    /**
    * The query start date, in `yyyy-MM-dd\'T\'HH:mm:ssZ` format. This value and the `to` query parameter value cannot exceed seven days.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly from?: string
    
    /**
    * The query end date, in `yyyy-MM-dd\'T\'HH:mm:ssZ` format. This value and the `from` query parameter value cannot exceed seven days.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly to?: string
    
    /**
    * The type of query date. * `meeting_start_time`  * `archive_complete_time`    This value defaults to `meeting_start_time`.
    * @type {'meeting_start_time' | 'archive_complete_time'}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly queryDateType?: 'meeting_start_time' | 'archive_complete_time'
    
    /**
    * The group ID. To get a group ID, use the [List groups](https://developers.zoom.us/docs/api/rest/reference/scim-api/methods/#operation/groupSCIM2List) API.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesList
    */
    readonly groupId?: string
    
}

/**
 * Request parameters for meetingFilesList_1 operation in ArchivingApi.
 * @export
 * @interface ArchivingApiMeetingFilesList0Request
 */
export type ArchivingApiMeetingFilesList0Request = {
    
    /**
    * The meeting\'s universally unique identifier (UUID). Each meeting instance generates a UUID. After a meeting ends, a new UUID is generated for the next meeting instance.  If the meeting UUID begins with a `/` character or contains a `//` character, you **must** [double encode](https://developers.zoom.us/docs/api/rest/using-zoom-apis/#meeting-id-and-uuid) the meeting UUID when using the meeting UUID for other API calls.
    * @type {string}
    * @memberof ArchivingApiMeetingFilesList0
    */
    readonly meetingUUID: string
    
}

/**
 * Request parameters for updateAutoDeleteStatus operation in ArchivingApi.
 * @export
 * @interface ArchivingApiUpdateAutoDeleteStatusRequest
 */
export type ArchivingApiUpdateAutoDeleteStatusRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ArchivingApiUpdateAutoDeleteStatus
    */
    readonly fileId?: string
    
} & ArchivingUpdateAutoDeleteStatusRequest

/**
 * ArchivingApiGenerated - object-oriented interface
 * @export
 * @class ArchivingApiGenerated
 * @extends {BaseAPI}
 */
export class ArchivingApiGenerated extends BaseAPI {
    /**
     * Get statistics about an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA and other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary Get archived file statistics
     * @param {ArchivingApiGetStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivingApiGenerated
     */
    public getStatistics(requestParameters: ArchivingApiGetStatisticsRequest = {}, options?: AxiosRequestConfig) {
        return ArchivingApiFp(this.configuration).getStatistics(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete all of a meeting\'s archived files.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:write:admin`,`recording:write`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a meeting\'s archived files
     * @param {ArchivingApiMeetingFilesDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivingApiGenerated
     */
    public meetingFilesDelete(requestParameters: ArchivingApiMeetingFilesDeleteRequest, options?: AxiosRequestConfig) {
        return ArchivingApiFp(this.configuration).meetingFilesDelete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an account\'s archived meeting or webinar files.    Zoom\'s [archiving solution](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators) lets account administrators set up an automated mechanism to record, collect, and archive meeting data to a third-party platform of their choice to satisfy FINRA or other compliance requirements.    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `MEDIUM`
     * @summary List archived files
     * @param {ArchivingApiMeetingFilesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivingApiGenerated
     */
    public meetingFilesList(requestParameters: ArchivingApiMeetingFilesListRequest = {}, options?: AxiosRequestConfig) {
        return ArchivingApiFp(this.configuration).meetingFilesList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a specific meeting instance\'s [archived files](https://support.zoom.us/hc/en-us/articles/360050431572-Archiving-indicators).    **Prerequisites:**  * The [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) enabled for your account by [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003).  **Scopes:** `recording:read`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Get a meeting\'s archived files
     * @param {ArchivingApiMeetingFilesList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivingApiGenerated
     */
    public meetingFilesList_1(requestParameters: ArchivingApiMeetingFilesList0Request, options?: AxiosRequestConfig) {
        return ArchivingApiFp(this.configuration).meetingFilesList_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an archived file\'s auto-delete status.    **Prerequisites:**  * [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) must enable the [**Meeting and Webinar Archiving** feature](https://support.zoom.us/hc/en-us/articles/4405656451213--Archiving-for-meetings-and-webinars) for your account. * Open the disabling auto-delete feature in OP. Contact [Zoom Support](https://support.zoom.us/hc/en-us/articles/201362003) to open.  **Scopes:** `recording:write`,`recording:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `LIGHT`
     * @summary Update an archived file\'s auto-delete status
     * @param {ArchivingApiUpdateAutoDeleteStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArchivingApiGenerated
     */
    public updateAutoDeleteStatus(requestParameters: ArchivingApiUpdateAutoDeleteStatusRequest, options?: AxiosRequestConfig) {
        return ArchivingApiFp(this.configuration).updateAutoDeleteStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
