/* tslint:disable */
/* eslint-disable */
/*
Zoom Meeting API

The Zoom Meeting APIs let developers to access information from Zoom. 

The version of the OpenAPI document: 2


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TrackingFieldCreateFieldRequest } from '../models';
// @ts-ignore
import { TrackingFieldCreateFieldResponse } from '../models';
// @ts-ignore
import { TrackingFieldGetResponse } from '../models';
// @ts-ignore
import { TrackingFieldListResponse } from '../models';
// @ts-ignore
import { TrackingFieldUpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrackingFieldApi - axios parameter creator
 * @export
 */
export const TrackingFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a tracking field
         * @param {TrackingFieldCreateFieldRequest} [trackingFieldCreateFieldRequest] Tracking Field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createField: async (trackingFieldCreateFieldRequest?: TrackingFieldCreateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tracking_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tracking_fields:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trackingFieldCreateFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tracking_fields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trackingFieldCreateFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a tracking field
         * @param {string} fieldId The Tracking Field ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField: async (fieldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldId' is not null or undefined
            assertParamExists('deleteField', 'fieldId', fieldId)
            const localVarPath = `/tracking_fields/{fieldId}`
                .replace(`{${"fieldId"}}`, encodeURIComponent(String(fieldId !== undefined ? fieldId : `-fieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tracking_fields:write:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tracking_fields/{fieldId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a tracking field
         * @param {string} fieldId The Tracking Field ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (fieldId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldId' is not null or undefined
            assertParamExists('get', 'fieldId', fieldId)
            const localVarPath = `/tracking_fields/{fieldId}`
                .replace(`{${"fieldId"}}`, encodeURIComponent(String(fieldId !== undefined ? fieldId : `-fieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tracking_fields:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tracking_fields/{fieldId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List tracking fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tracking_fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tracking_fields:read:admin"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tracking_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a tracking field
         * @param {string} fieldId The Tracking Field ID
         * @param {TrackingFieldUpdateRequest} [trackingFieldUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (fieldId: string, trackingFieldUpdateRequest?: TrackingFieldUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldId' is not null or undefined
            assertParamExists('update', 'fieldId', fieldId)
            const localVarPath = `/tracking_fields/{fieldId}`
                .replace(`{${"fieldId"}}`, encodeURIComponent(String(fieldId !== undefined ? fieldId : `-fieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication openapi_authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "openapiAuthorization", configuration })
            // authentication openapi_oauth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "openapi_oauth", ["tracking_fields:write:admin"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trackingFieldUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tracking_fields/{fieldId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trackingFieldUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackingFieldApi - functional programming interface
 * @export
 */
export const TrackingFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrackingFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a tracking field
         * @param {TrackingFieldApiCreateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createField(requestParameters: TrackingFieldApiCreateFieldRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackingFieldCreateFieldResponse>> {
            const trackingFieldCreateFieldRequest: TrackingFieldCreateFieldRequest = {
                field: requestParameters.field,
                recommended_values: requestParameters.recommended_values,
                required: requestParameters.required,
                visible: requestParameters.visible
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createField(trackingFieldCreateFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a tracking field
         * @param {TrackingFieldApiDeleteFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteField(requestParameters: TrackingFieldApiDeleteFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteField(requestParameters.fieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a tracking field
         * @param {TrackingFieldApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: TrackingFieldApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackingFieldGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.fieldId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List tracking fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackingFieldListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a tracking field
         * @param {TrackingFieldApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: TrackingFieldApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const trackingFieldUpdateRequest: TrackingFieldUpdateRequest = {
                field: requestParameters.field,
                recommended_values: requestParameters.recommended_values,
                required: requestParameters.required,
                visible: requestParameters.visible
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.fieldId, trackingFieldUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrackingFieldApi - factory interface
 * @export
 */
export const TrackingFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrackingFieldApiFp(configuration)
    return {
        /**
         * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Create a tracking field
         * @param {TrackingFieldApiCreateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createField(requestParameters: TrackingFieldApiCreateFieldRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TrackingFieldCreateFieldResponse> {
            return localVarFp.createField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Delete a tracking field
         * @param {TrackingFieldApiDeleteFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteField(requestParameters: TrackingFieldApiDeleteFieldRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Get a tracking field
         * @param {TrackingFieldApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: TrackingFieldApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<TrackingFieldGetResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
         * @summary List tracking fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<TrackingFieldListResponse> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
         * @summary Update a tracking field
         * @param {TrackingFieldApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: TrackingFieldApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createField operation in TrackingFieldApi.
 * @export
 * @interface TrackingFieldApiCreateFieldRequest
 */
export type TrackingFieldApiCreateFieldRequest = {
    
} & TrackingFieldCreateFieldRequest

/**
 * Request parameters for deleteField operation in TrackingFieldApi.
 * @export
 * @interface TrackingFieldApiDeleteFieldRequest
 */
export type TrackingFieldApiDeleteFieldRequest = {
    
    /**
    * The Tracking Field ID
    * @type {string}
    * @memberof TrackingFieldApiDeleteField
    */
    readonly fieldId: string
    
}

/**
 * Request parameters for get operation in TrackingFieldApi.
 * @export
 * @interface TrackingFieldApiGetRequest
 */
export type TrackingFieldApiGetRequest = {
    
    /**
    * The Tracking Field ID
    * @type {string}
    * @memberof TrackingFieldApiGet
    */
    readonly fieldId: string
    
}

/**
 * Request parameters for update operation in TrackingFieldApi.
 * @export
 * @interface TrackingFieldApiUpdateRequest
 */
export type TrackingFieldApiUpdateRequest = {
    
    /**
    * The Tracking Field ID
    * @type {string}
    * @memberof TrackingFieldApiUpdate
    */
    readonly fieldId: string
    
} & TrackingFieldUpdateRequest

/**
 * TrackingFieldApiGenerated - object-oriented interface
 * @export
 * @class TrackingFieldApiGenerated
 * @extends {BaseAPI}
 */
export class TrackingFieldApiGenerated extends BaseAPI {
    /**
     * Use this API to create a new [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields). Tracking fields let you analyze usage by various fields within an organization. When scheduling a meeting, tracking fields will be included in the meeting options.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Create a tracking field
     * @param {TrackingFieldApiCreateFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingFieldApiGenerated
     */
    public createField(requestParameters: TrackingFieldApiCreateFieldRequest = {}, options?: AxiosRequestConfig) {
        return TrackingFieldApiFp(this.configuration).createField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to delete a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Delete a tracking field
     * @param {TrackingFieldApiDeleteFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingFieldApiGenerated
     */
    public deleteField(requestParameters: TrackingFieldApiDeleteFieldRequest, options?: AxiosRequestConfig) {
        return TrackingFieldApiFp(this.configuration).deleteField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to return information about a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Get a tracking field
     * @param {TrackingFieldApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingFieldApiGenerated
     */
    public get(requestParameters: TrackingFieldApiGetRequest, options?: AxiosRequestConfig) {
        return TrackingFieldApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to list all the [tracking fields](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields) on your Zoom account. Tracking fields let you analyze usage by various fields within an organization.   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:read:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Medium`
     * @summary List tracking fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingFieldApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return TrackingFieldApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this API to update a [tracking field](https://support.zoom.us/hc/en-us/articles/115000293426-Scheduling-Tracking-Fields).   **Prerequisites:**  * A Business, Education, API or higher plan.  **Scopes:** `tracking_fields:write:admin`  **[Rate Limit Label](https://marketplace.zoom.us/docs/api-reference/rate-limits#rate-limits):** `Light`
     * @summary Update a tracking field
     * @param {TrackingFieldApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackingFieldApiGenerated
     */
    public update(requestParameters: TrackingFieldApiUpdateRequest, options?: AxiosRequestConfig) {
        return TrackingFieldApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
